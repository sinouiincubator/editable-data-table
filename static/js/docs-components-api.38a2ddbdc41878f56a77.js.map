{"version":3,"sources":["D:/workspaces/editable-data-table/docs/components-api.mdx","D:/workspaces/editable-data-table/src/Table.tsx","D:/workspaces/editable-data-table/src/EmptyDataTableRow.tsx","D:/workspaces/editable-data-table/src/DataTableColGroup.tsx","D:/workspaces/editable-data-table/src/DataTableHead.tsx","D:/workspaces/editable-data-table/src/DataTableBodyRow.tsx","D:/workspaces/editable-data-table/src/DataTableBody.tsx","D:/workspaces/editable-data-table/src/EditableDataTable.tsx","D:/workspaces/editable-data-table/src/DataTableCellEditor.tsx","D:/workspaces/editable-data-table/src/DataTableBodyCell.tsx","D:/workspaces/editable-data-table/src/DataTableHeadCell.tsx","D:/workspaces/editable-data-table/src/TableColumn.tsx","D:/workspaces/editable-data-table/src/shared/DataTableRowContext.ts","D:/workspaces/editable-data-table/src/shared/EditableDataTableContext.ts","D:/workspaces/editable-data-table/src/shared/EditingBodyRowContainer.ts","D:/workspaces/editable-data-table/src/shared/constants.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_3__","of","EditableDataTable","TableColumn","isMDXComponent","captionTypeStyle","css","_templateObject","theme","typography","body1","fontSize","fontFamily","fontWeightMedium","color","bodyTypeStyle","_templateObject2","fontWeight","dataTableCellStyle","_templateObject3","palette","type","rowBgColor","light","tableRowSelected","tableRowHover","dark","StyledTable","styled","Table","_templateObject4","primary","caption","Wrapper","div","EmptyDataTableRow_templateObject","EmptyDataTableRow","children","react_default","a","createElement","className","data-testid","context","RowType","ColGroup","DataTableColGroup","DataTableRowContext","Provider","value","DataTableHead","React","memo","data","index","editing","useMemo","Body","EditingBodyRowContainer","DataTableBody","idPropertyName","_ref$editingRows","editingRows","length","map","item","src_DataTableBodyRow","key","concat","_props$data","_props$idPropertyName","_props$emptyTitle","emptyTitle","_ref$idPropertyName","onRowChange","validate","options","useRef","useEffect","current","useEditableDataTable","Fragment","src_Table","EditableDataTableContext","src_DataTableColGroup","src_DataTableHead","src_DataTableBody","src_EmptyDataTableRow","name","Editor","editor","useContext","valueFromContext","_useState","useState","setValue","slicedToArray","_EditingBodyRowContai","useContainer","touched","errors","validateField","handleChange","useCallback","event","newValue","target","isChangeEvent","error","undefined","onChange","FormHelpText","MemoDataTableBodyCellInner","order","render","Error","src_DataTableCellEditor","DataTableBodyCell","state","DataTableHeadCell","title","classNames","align_center","width","Head","src_DataTableHeadCell","src_DataTableBodyCell","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_constants__WEBPACK_IMPORTED_MODULE_1__","createContext","createContainer","rowData","_useState2","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","setTouched","_useState3","_useState4","setErrors","rowDataRef","_useContext","updateErrors","newErrors","prev","shallowEqual","newRowData","arguments","updateTouched","result","newTouched","keys","forEach","filter","fieldName","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","d","__webpack_exports__"],"mappings":"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","file":"static/js/docs-components-api.14ed24c7.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport TableColumn from '../src/TableColumn';\nimport EditableDataTable from '../src/EditableDataTable';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"组件-api\"\n    }}>{`组件 API`}</h1>\n    <p>{`包括两个核心的组件和一个自定义 hook：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`EditableDataTable - 可编辑数据表格组件`}</li>\n      <li parentName=\"ul\">{`TableColumn - 定义数据表格列的组件`}</li>\n      <li parentName=\"ul\">{`useEditingList - 可编辑表格数据的状态管理 hook`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"editabledatatable\"\n    }}>{`EditableDataTable`}</h2>\n    <Props of={EditableDataTable} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"tablecolumn\"\n    }}>{`TableColumn`}</h2>\n    <Props of={TableColumn} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"useeditinglist\"\n    }}>{`useEditingList`}</h2>\n    <h3 {...{\n      \"id\": \"参数配置\"\n    }}>{`参数配置`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`url(string)`}</inlineCode>{` - crud 操作时的 url`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`defaultValue(T[])`}</inlineCode>{` - 指定默认列表数据，默认值为`}<inlineCode parentName=\"li\">{`[]`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options`}</inlineCode>{` - 相关配置,主要有 idPropertyName（数据的 id 属性名。默认为`}<inlineCode parentName=\"li\">{`id`}</inlineCode>{`）`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"返回值的数据结构\"\n    }}>{`返回值的数据结构`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`items(T[])`}</inlineCode>{` - 列表数据`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`editingRows(boolean[])`}</inlineCode>{` - 处于编辑状态的行。`}<inlineCode parentName=\"li\">{`editingRows`}</inlineCode>{`数组需要与`}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`数组保持一一对应的关系，`}<inlineCode parentName=\"li\">{`editingRows`}</inlineCode>{`数组中每一个数据项代表的是`}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`数组中对应数据项的编辑状态，`}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`表示编辑状态，`}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`表示非编辑状态。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`add(()=>void)`}</inlineCode>{` - 新增一条可编辑的空数据`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`remove((index:number)=>void)`}</inlineCode>{` - 删除一条数据`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`edit((index)=>void)`}</inlineCode>{` - 更新一条数据的编辑状态`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`save((row:T,index:number)=>void)`}</inlineCode>{` - 新增一条数据或者更新一条数据`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`idPropertyName(string)`}</inlineCode>{` - 数据的 id 属性名。默认为`}<inlineCode parentName=\"li\">{`id`}</inlineCode></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import styled, { css } from 'sinoui-components/styles';\nimport Table from 'sinoui-components/Table';\n\nconst captionTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.fontWeightMedium};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst bodyTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.body1.fontWeight};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst dataTableCellStyle = css`\n  padding: 0;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-bottom: 1px solid\n    ${(props) =>\n      props.theme.palette.type === 'light'\n        ? 'rgba(224, 224, 224, 1)'\n        : 'rgba(80, 80, 80, 1)'};\n`;\n\nconst rowBgColor = {\n  light: {\n    tableRowSelected: 'rgba(0, 0, 0, 0.04)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(0, 0, 0, 0.07)', // 表格行hover时的背景色\n  },\n  dark: {\n    tableRowSelected: 'rgba(255, 255, 255, 0.08)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(255, 255, 255, 0.14)', // 表格行hover时的背景色\n  },\n};\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n  border-top: 1px solid rgba(224, 224, 224, 1);\n  & .sinoui-data-table-head {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    background-color: ${(props) =>\n      props.theme.palette.type === 'light'\n        ? props.theme.palette.primary[50]\n        : props.theme.palette.primary[200]};\n    text-align: left;\n    vertical-align: middle;\n  }\n\n  .sinoui-checkbox-button {\n    margin: 14px;\n  }\n\n  & .sinoui-data-table-head.numeric,\n  .sinoui-data-table-body-td.numeric {\n    text-align: right;\n    flex-direction: row-reverse;\n  }\n\n  & .sinoui-data-table-head.align_center,\n  .sinoui-data-table-body-td.align_center {\n    text-align: center;\n  }\n\n  & .sinoui-data-table-head.checkbox,\n  .sinoui-data-table-body-td.checkbox {\n    padding: 0;\n    width: 48px;\n  }\n\n  & .sinoui-data-table-head.extraInfo,\n  .sinoui-data-table-body-td.extraInfo {\n    padding: 0;\n    width: 60px;\n  }\n\n  & .sinoui-data-table-head:last-child,\n  .sinoui-data-table-body-td:last-child {\n    padding-right: 24px;\n  }\n\n  & .sinoui-data-table-footer {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    padding-left: 24px;\n    padding-right: 12px;\n  }\n\n  & .sinoui-data-table-body-cell-no-data {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    padding: 64px;\n    text-align: center;\n    color: ${(props) => props.theme.typography.caption.color};\n  }\n\n  & .sinoui-data-table-body-td {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    text-align: left;\n    vertical-align: middle;\n    word-wrap: break-word;\n    word-break: break-all;\n  }\n\n  & .sinoui-data-table-head-row {\n    height: 48px;\n  }\n\n  & .sinoui-data-table-footer-row,\n  .sinoui-data-table-body-row-no-data {\n    height: 56px;\n    background-color: transparent;\n  }\n\n  & .sinoui-data-table-body-row {\n    height: 48px;\n    background-color: transparent;\n\n    &:hover {\n      background-color: ${(props) =>\n        rowBgColor[props.theme.palette.type].tableRowHover};\n    }\n  }\n\n  & .sinoui-data-table-body-row.selected {\n    background-color: ${(props) =>\n      rowBgColor[props.theme.palette.type].tableRowSelected};\n  }\n`;\n\nexport default StyledTable;\n","import React from 'react';\nimport styled from 'sinoui-components/styles';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  padding: 32px 8px;\n`;\n\n/**\n * 表格空数据时显示的行\n */\nconst EmptyDataTableRow: React.SFC = (props) => {\n  const { children } = props;\n  return (\n    <Wrapper className=\"sinoui-data-table-info\" data-testid=\"emptyInfo\">\n      {children}\n    </Wrapper>\n  );\n};\n\nexport default EmptyDataTableRow;\n","import React from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext from './shared/DataTableRowContext';\n\nconst context: { type: RowType.ColGroup } = {\n  type: RowType.ColGroup,\n};\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nfunction DataTableColGroup(props: Props) {\n  const { children } = props;\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <colgroup data-testid=\"colgroup\">{children}</colgroup>\n    </DataTableRowContext.Provider>\n  );\n}\n\nexport default DataTableColGroup;\n","import React from 'react';\n\n/**\n * 数据表头\n */\nconst DataTableHead: React.SFC = function TableHead({ children }) {\n  return (\n    <thead>\n      <tr className=\"sinoui-data-table-head-row\" data-testid=\"tableHead\">\n        {children}\n      </tr>\n    </thead>\n  );\n};\n\nexport default DataTableHead;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props<T> {\n  /**\n   * 此行数据\n   */\n  data: T;\n  /**\n   * 数据序号\n   */\n  index: number;\n  /**\n   * 单元格子组件\n   */\n  children: React.ReactNode;\n\n  /**\n   * 是否处于编辑状态\n   */\n  editing?: boolean;\n}\n\ntype CompType<T = any> = React.SFC<Props<T>>;\n\n/**\n * 内容行\n */\nconst DataTableBodyRow: CompType = (props) => {\n  const { data, index, children, editing } = props;\n  const context: BodyRowContextType<any> = useMemo(\n    () => ({ type: RowType.Body, data, index, editing: !!editing }),\n    [data, index, editing],\n  );\n\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <EditingBodyRowContainer.Provider>\n        <tr className=\"sinoui-data-table-body-row\" data-testid=\"bodyRow\">\n          {children}\n        </tr>\n      </EditingBodyRowContainer.Provider>\n    </DataTableRowContext.Provider>\n  );\n};\n\nexport default React.memo(DataTableBodyRow);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport DataTableBodyRow from './DataTableBodyRow';\n\n/**\n * 数据表格内容组件\n */\nconst DataTableBody: React.SFC<{\n  data?: any[];\n  idPropertyName: string;\n  editingRows?: boolean[];\n}> = function DataTableBody({\n  idPropertyName,\n  data,\n  children,\n  editingRows = [],\n}) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n  return (\n    <tbody>\n      {data.map((item, index) => (\n        <DataTableBodyRow\n          key={item[idPropertyName] || `index_${index}`}\n          data={item}\n          index={index}\n          data-testid=\"tableBody\"\n          editing={editingRows[index]}\n        >\n          {children}\n        </DataTableBodyRow>\n      ))}\n    </tbody>\n  );\n};\n\nexport default DataTableBody;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo, useRef, useEffect } from 'react';\nimport Table from './Table';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EmptyDataTableRow from './EmptyDataTableRow';\nimport DataTableColGroup from './DataTableColGroup';\nimport DataTableHead from './DataTableHead';\nimport DataTableBody from './DataTableBody';\n\nexport interface Props<T> {\n  /**\n   * 列表数据\n   */\n  data?: T[];\n  /**\n   * 处于编辑状态的行。`editingRows`数组需要与`data`数组保持一一对应的关系，`editingRows`数组中每一个数据项代表的是`data`数组中对应数据项的编辑状态，`true`表示编辑状态，`false`表示非编辑状态。\n   */\n  editingRows?: boolean[];\n\n  /**\n   * 子节点，一组TableColumn。使用TableColumn指表格列信息。\n   */\n  children: React.ReactNode;\n  /**\n   * 数据的id属性名。默认为'id'。\n   */\n  idPropertyName?: string;\n  /**\n   * 无数据时的提示信息。默认为“暂无数据”。\n   */\n  emptyTitle?: React.ReactNode;\n\n  /**\n   * 监听行数据发生变化的事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onRowChange?: (index: number, rowData: T) => void;\n\n  /**\n   * 给正在编辑的行添加校验规则。\n   * \n   * 返回错误提示：\n   * \n   * ```js\n     {\n       'title': '不能为空',\n       'name': '不能少于三个字'\n     }\n   * ```\n   *\n   * 上面的错误信息表示字段`title`和`name`校验失败。\n   * \n   * 如果数据行没有错误，则返回`{}`或者`undefined`。\n   */\n  validate?: (rowData: T) => { [x: string]: string } | undefined;\n}\n\nfunction useEditableDataTable<T>({\n  idPropertyName = 'id',\n  onRowChange,\n  validate,\n}: Props<T>) {\n  const options = useRef({\n    onRowChange,\n    validate,\n  });\n\n  useEffect(() => {\n    options.current.onRowChange = onRowChange;\n    options.current.validate = validate;\n  }, [onRowChange, validate]);\n\n  const context = useMemo(\n    () => ({ idPropertyName, options: options.current }),\n    [idPropertyName],\n  );\n\n  return context;\n}\n\n/**\n * 可编辑表格\n */\nfunction EditableDataTable<T>(props: Props<T>) {\n  const {\n    data = [],\n    idPropertyName = 'id',\n    children,\n    emptyTitle = '暂无数据',\n    editingRows,\n  } = props;\n  const context = useEditableDataTable(props);\n  return (\n    <>\n      <Table>\n        <EditableDataTableContext.Provider value={context}>\n          <DataTableColGroup>{children}</DataTableColGroup>\n          <DataTableHead>{children}</DataTableHead>\n          <DataTableBody\n            data={data}\n            idPropertyName={idPropertyName}\n            editingRows={editingRows}\n          >\n            {children}\n          </DataTableBody>\n        </EditableDataTableContext.Provider>\n      </Table>\n      {(!data || data.length === 0) && (\n        <EmptyDataTableRow>{emptyTitle}</EmptyDataTableRow>\n      )}\n    </>\n  );\n}\n\nexport default EditableDataTable;\n","import React, { useState, useContext, useCallback, useMemo } from 'react';\nimport FormHelpText from 'sinoui-components/Form/FormHelpText';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props {\n  editor: React.ReactType;\n  name: string;\n}\n\nfunction isChangeEvent(\n  event?: React.ChangeEvent<HTMLInputElement> | string,\n): event is React.ChangeEvent<HTMLInputElement> {\n  return !!(event && (event as React.ChangeEvent<HTMLInputElement>).target);\n}\n\n/**\n * 单元格编辑器\n */\nfunction DataTableCellEditor(props: Props) {\n  const { name, editor: Editor } = props;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { data, index } = useContext(DataTableRowContext) as BodyRowContextType<\n    any\n  >;\n  const valueFromContext = data[name] || '';\n  const [, setValue] = useState(valueFromContext);\n  const { options } = useContext(EditableDataTableContext);\n  const {\n    touched,\n    errors,\n    validateField,\n  } = EditingBodyRowContainer.useContainer();\n\n  const handleChange = useCallback(\n    (event?: React.ChangeEvent<HTMLInputElement> | string) => {\n      const newValue = isChangeEvent(event) ? event.target.value : event;\n      setValue(newValue);\n\n      data[name] = newValue;\n\n      if (options.onRowChange) {\n        options.onRowChange(index, data);\n      }\n      validateField(name, data);\n    },\n    [data, name, options, index, validateField],\n  );\n\n  const isTouched = touched[name];\n  const error = isTouched ? errors[name] : undefined;\n\n  const element = useMemo(\n    () => (\n      <>\n        <Editor\n          name={name}\n          value={valueFromContext}\n          item={data}\n          onChange={handleChange}\n          error={!!error}\n        />\n        {error && <FormHelpText error>{error}</FormHelpText>}\n      </>\n    ),\n    [data, error, handleChange, name, valueFromContext],\n  );\n\n  return element;\n}\n\nexport default React.memo(DataTableCellEditor);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport DataTableCellEditor from './DataTableCellEditor';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface CellState<T> {\n  data: T;\n  index: number;\n  editing: boolean;\n  errors?: { [x: string]: any };\n  validate: (rowData?: T) => boolean;\n  idPropertyName: string;\n}\n\ninterface DataCellProps<T, CellDataType> {\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n  /**\n   * 数据列名称\n   */\n  name?: string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\nfunction useCellState<T>(): CellState<T> {\n  const { data, index, editing } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<any>;\n  const { validate } = EditingBodyRowContainer.useContainer();\n  const { idPropertyName } = useContext(EditableDataTableContext);\n\n  return {\n    data,\n    index,\n    editing,\n    idPropertyName,\n    validate,\n  };\n}\n\n/**\n * 数据单元格\n */\nfunction DataTableBodyCellInner(\n  props: DataCellProps<any, any> & CellState<any>,\n) {\n  const {\n    order,\n    render,\n    name,\n    editor,\n    index,\n    editing,\n    data,\n    idPropertyName,\n    validate,\n  } = props;\n\n  if (order) {\n    return (\n      <td className=\"sinoui-data-table-body-td align_center\">{index + 1}</td>\n    );\n  }\n\n  if (editing && editor) {\n    if (!name) {\n      throw new Error(`没有给TableColumn指定name属性`);\n    }\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        <DataTableCellEditor name={name} editor={editor} />\n      </td>\n    );\n  }\n\n  if (render) {\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        {render(\n          name ? data[name] : undefined,\n          data,\n          index,\n          data[idPropertyName],\n          {\n            editing,\n            validate,\n          },\n        )}\n      </td>\n    );\n  }\n\n  return name ? (\n    <td className=\"sinoui-data-table-body-td\">{data[name]}</td>\n  ) : null;\n}\n\nconst MemoDataTableBodyCellInner = React.memo(DataTableBodyCellInner);\n\nfunction DataTableBodyCell<T = any, CellDataType = string>(\n  props: DataCellProps<T, CellDataType>,\n) {\n  const state = useCellState<any>();\n\n  return <MemoDataTableBodyCellInner {...props} {...state} />;\n}\n\nexport default DataTableBodyCell;\n","import React from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  order?: boolean;\n  title?: React.ReactNode;\n}\n\n/**\n * 表格头单元格\n */\nfunction DataTableHeadCell(props: Props) {\n  const { order, title } = props;\n  return (\n    <th\n      className={classNames('sinoui-data-table-head', {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        align_center: order,\n      })}\n    >\n      {title}\n    </th>\n  );\n}\n\nexport default DataTableHeadCell;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport DataTableRowContext from './shared/DataTableRowContext';\nimport DataTableBodyCell from './DataTableBodyCell';\nimport DataTableHeadCell from './DataTableHeadCell';\nimport { RowType } from './shared/constants';\n\nexport interface Props<T, CellDataType> {\n  /**\n   * 数据列名称\n   */\n  name?: string;\n  /**\n   * 标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n\n  /**\n   * 列宽度\n   */\n  width?: number | string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\n/**\n * 表格列\n */\nconst TableColumn: React.SFC<Props<any, any>> = React.memo(function TableColumn<\n  T,\n  CellDataType\n>(props: Props<T, CellDataType>) {\n  const { title, order, width } = props;\n  const { type } = useContext(DataTableRowContext);\n\n  switch (type) {\n    case RowType.Head:\n      return <DataTableHeadCell title={title} order={order} />;\n    case RowType.ColGroup:\n      return <col width={order ? 50 : width} />;\n    default:\n      return <DataTableBodyCell {...props} />;\n  }\n});\n\nexport default TableColumn;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport { RowType } from './constants';\n\nexport interface BodyRowContextType<T> {\n  type: RowType.Body;\n  data: T;\n  index: number;\n  /**\n   * 是否处于编辑状态\n   */\n  editing: boolean;\n}\n\nexport interface HeadRowContextType {\n  type: RowType.Head;\n}\n\nexport interface ColGroupContextType {\n  type: RowType.ColGroup;\n}\n\nexport type RowContextType<T = any> =\n  | BodyRowContextType<T>\n  | HeadRowContextType\n  | ColGroupContextType;\n\nconst DataTableRowContext = React.createContext<RowContextType>({\n  type: RowType.Head,\n});\n\nexport default DataTableRowContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\n\ninterface ContextType {\n  idPropertyName: string;\n  options: {\n    onRowChange?: (index: number, rowData: any) => void;\n    validate?: (rowData: any) => { [x: string]: string } | undefined;\n  };\n}\n\nconst EditableDataTableContext = React.createContext<ContextType>({\n  idPropertyName: 'id',\n  options: {},\n});\n\nexport default EditableDataTableContext;\n","import { useState, useCallback, useRef, useEffect, useContext } from 'react';\nimport { createContainer } from 'unstated-next';\nimport shallowEqual from 'shallowequal';\nimport EditableDataTableContext from './EditableDataTableContext';\nimport DataTableRowContext, { BodyRowContextType } from './DataTableRowContext';\n\ninterface ContextType<T> {\n  /**\n   * 校验错误信息\n   */\n  errors: {\n    [x: string]: string;\n  };\n\n  /**\n   * 点击状态\n   */\n  touched: {\n    [x: string]: boolean;\n  };\n\n  /**\n   * 校验数据行\n   *\n   * 如果通过校验，则返回`true`，否则返回`false`。\n   */\n  validate: (newItem?: T) => boolean;\n\n  /**\n   * 校验表单域\n   */\n  validateField: (fieldName: string, newRowData: T) => void;\n}\n\n/**\n * 用于正在编辑的行数据的状态管理hook\n *\n * 主要维护的状态：\n *\n * * 表单校验\n * * 是否点击过的状态\n *\n */\nfunction useEditingBodyRow<T>(): ContextType<T> {\n  const { data: rowData } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<T>;\n  const [touched, setTouched] = useState<{ [x: string]: boolean }>({});\n  const [errors, setErrors] = useState({});\n  const rowDataRef = useRef(rowData);\n  const { options, idPropertyName } = useContext(EditableDataTableContext);\n\n  useEffect(() => {\n    rowDataRef.current = rowData;\n  }, [rowData]);\n\n  const updateErrors = useCallback((newErrors: any) => {\n    setErrors((prev) => {\n      if (!shallowEqual(newErrors, prev)) {\n        return newErrors;\n      }\n      return prev;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!(rowData as any)[idPropertyName] && options.validate) {\n      const newErrors = options.validate(rowData) || {};\n      updateErrors(newErrors);\n    }\n  }, [rowData, options, idPropertyName, updateErrors]);\n\n  const validate = useCallback(\n    (newRowData: T = rowDataRef.current, updateTouched: boolean = true) => {\n      if (options.validate) {\n        const result = options.validate(newRowData);\n        if (result) {\n          if (updateTouched) {\n            const newTouched: { [x: string]: boolean } = {};\n            Object.keys(result).forEach((key) => {\n              newTouched[key] = true;\n            });\n\n            setTouched(newTouched);\n          }\n\n          updateErrors(result || {});\n\n          return (\n            Object.keys(result).filter((key) => !!result[key]).length === 0\n          );\n        }\n      }\n\n      return true;\n    },\n    [options, updateErrors],\n  );\n\n  const validateField = useCallback(\n    (fieldName: string, newRowData: T) => {\n      setTouched((prev) => {\n        if (!prev[fieldName]) {\n          return { ...prev, [fieldName]: true };\n        }\n        return prev;\n      });\n      validate(newRowData, false);\n    },\n    [validate],\n  );\n\n  return {\n    errors,\n    touched,\n    validate,\n    validateField,\n  };\n}\n\nconst EditingBodyRowContainer = createContainer(useEditingBodyRow);\n\nexport default EditingBodyRowContainer;\n","export enum RowType {\n  Body,\n  Head,\n  ColGroup,\n}\n\nexport const EMPTY_ROW_INFO = '暂无数据';\n"],"sourceRoot":""}
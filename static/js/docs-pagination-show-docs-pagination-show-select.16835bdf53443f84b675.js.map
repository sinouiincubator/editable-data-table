{"version":3,"sources":["D:/workspaces/editable-data-table/docs/pagination-show-docs/pagination-show-select.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"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","file":"static/js/docs-pagination-show-docs-pagination-show-select.28a3e446.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"选择数据行-v060\"\n    }}>{`选择数据行 (v0.6.0)`}</h1>\n    <p>{`这个场景的选择因分页和一次性加载的要求，所以处理方式也会比`}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`普通选择`}</a>{`要复杂一些。`}<inlineCode parentName=\"p\">{`useEditingList`}</inlineCode>{`默认集成了选择行状态管理逻辑，但是需要二次处理才能适合当前这个场景。`}</p>\n    <p>{`首先，我们使用`}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`RowTableColumn`}</a>{`来渲染选择列：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<RowSelectColumn\n  startIndex={currentPage * pageSize}\n  selectedRows={editingList.selectedRows}\n  isAllSelected={editingList.isAllSelected}\n  isContainsSelected={editingList.isContainsSelected}\n  toggleAllSelected={editingList.toggleAllSelected}\n  toggleRowSelected={editingList.toggleRowSelected}\n/>\n`}</code></pre>\n    <p>{`这个组件的三个属性需要做分页调整：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isAllSelected`}</inlineCode>{` - 判断是否全部选中。`}<strong parentName=\"li\">{`更准确地说`}</strong>{`，应该是判断当前页的数据是否全部选中。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isContainsSelected`}</inlineCode>{` - 判断是否包含选中数据。`}<strong parentName=\"li\">{`更准确地说`}</strong>{`，应该是判断当前页是否有选中的数据行。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleAllSelected`}</inlineCode>{` - 切换全选。`}<strong parentName=\"li\">{`更准确地说`}</strong>{`，应该是切换当前页所有数据的选中状态，要么全选，要么全部取消选中。`}</li>\n    </ul>\n    <p>{`以上三个属性应该只跟当前页的数据相关，但是`}<inlineCode parentName=\"p\">{`editingList`}</inlineCode>{`提供的选择状态是与整个列表相关的，所以需要做二次处理。`}</p>\n    <p>{`首先，我们创建一个自定义 hook，名称为`}<inlineCode parentName=\"p\">{`usePaginationSelectedRows`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function usePaginationSelectedRows(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const start = currentPage * pageSize;\n  const end = Math.min(editingList.items.length, (currentPage + 1) * pageSize);\n\n  // TODO: 下面的isAllSelected、isContainsSelected、toggleAllSelected的代码都放在这\n\n  return {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n  };\n}\n`}</code></pre>\n    <p>{`然后，我们来处理`}<inlineCode parentName=\"p\">{`isAllSelected`}</inlineCode>{`，它表示当前页是否全部选中，那么我们只需要拿到当前页所有行，然后看看每一行是否都在`}<inlineCode parentName=\"p\">{`editingList.selectedRows`}</inlineCode>{`中即可。`}</p>\n    <p>{`为了方便生成当前页所有行的索引数组，创建一个 range 方法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 生成序列数组\n *\n * @param start 开始\n * @param end 结束\n */\nfunction range(start: number, end: number) {\n  return new Array(end - start).fill(null).map((_, idx) => start + idx);\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`isAllSelected`}</inlineCode>{`的计算过程：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 是否全部选中\n */\nconst isAllSelected = useMemo(() => {\n  return range(start, end).every(\n    (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n  );\n}, [currentPage, editingList.selectedRows, pageSize]);\n`}</code></pre>\n    <p>{`接着处理`}<inlineCode parentName=\"p\">{`isContainsSelected`}</inlineCode>{`，它表示当前页是否有选中的数据行：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 是否包含选中\n */\nconst isContainsSelected = useMemo(() => {\n  return range(start, end).some(\n    (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n  );\n}, [currentPage, editingList.selectedRows, pageSize]);\n`}</code></pre>\n    <p>{`然后处理一下`}<inlineCode parentName=\"p\">{`toggleAllSelected`}</inlineCode>{`，它只能切换当前页行的选中状态：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 切换全选\n */\nconst toggleAllSelected = useCallback(() => {\n  editingList.setRowsSelected(range(start, end), !isAllSelected);\n}, [editingList, end, isAllSelected, start]);\n`}</code></pre>\n    <p>{`最后，在`}<inlineCode parentName=\"p\">{`Demo`}</inlineCode>{`组件中使用`}<inlineCode parentName=\"p\">{`usePaginationSelectedRows`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  // ...\n  const paginationSelectedRows = usePaginationSelectedRows(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <EditableDataTable>\n      <RowSelectColumn\n        startIndex={currentPage * pageSize}\n        selectedRows={editingList.selectedRows}\n        isAllSelected={paginationSelectedRows.isAllSelected}\n        isContainsSelected={paginationSelectedRows.isContainsSelected}\n        toggleAllSelected={paginationSelectedRows.toggleAllSelected}\n        toggleRowSelected={editingList.toggleRowSelected}\n      />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"删除选中数据\"\n    }}>{`删除选中数据`}</h2>\n    <p>{`在`}<inlineCode parentName=\"p\">{`usePaginationSelectedRows`}</inlineCode>{`中添加一个`}<inlineCode parentName=\"p\">{`removeAllSelectedRows`}</inlineCode>{`方法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function usePaginationSelectedRows() {\n  /**\n   * 删除所有选中的数据\n   */\n  const removeAllSelectedRows = async () => {\n    const rows = editingList.items\n      .map((item, idx) => [item, idx])\n      .filter((_data, index) => editingList.selectedRows.includes(index));\n    await editingList.remove(rows);\n  };\n\n  return {\n    // ...\n    removeAllSelectedRows,\n  };\n}\n`}</code></pre>\n    <p>{`将`}<inlineCode parentName=\"p\">{`paginationSelectedRows.removeAllSelectedRows`}</inlineCode>{`方法绑定到删除按钮的点击事件上即可。`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}
{"version":3,"sources":["/Users/sinosoft/Documents/GitHub/editable-data-table/docs/TableColumnEditor.mdx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/Table.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/EmptyDataTableRow.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/DataTableColGroup.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/DataTableHead.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/DataTableBodyRow.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/DataTableBody.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/EditableDataTable.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/DataTableCellEditor.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/DataTableBodyCell.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/DataTableHeadCell.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/TableColumn.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/shared/DataTableRowContext.ts","/Users/sinosoft/Documents/GitHub/editable-data-table/src/shared/EditableDataTableContext.ts","/Users/sinosoft/Documents/GitHub/editable-data-table/src/shared/EditingBodyRowContainer.ts","/Users/sinosoft/Documents/GitHub/editable-data-table/src/shared/constants.ts"],"names":["name","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__","assign","mdxType","id","parentName","href","className","docz__WEBPACK_IMPORTED_MODULE_5__","__position","__code","__scope","this","useState","useCallback","useMemo","Playground","Props","TableColumn","EditableDataTable","produce","_src_EditableDataTable__WEBPACK_IMPORTED_MODULE_7__","data","title","editingRows","validate","rowData","errors","_src_TableColumn__WEBPACK_IMPORTED_MODULE_6__","editor","value","onChange","error","style","color","titles","titleId","item","event","target","find","titleItem","map","key","TitleSelect","_useState","_useState2","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","items","setItems","onRowChange","index","draft","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","createSelectEditor","options","displayName","Selector","optionItem","FavSelect","_useState3","_useState4","isMDXComponent","captionTypeStyle","css","_templateObject","theme","typography","body1","fontSize","fontFamily","fontWeightMedium","bodyTypeStyle","_templateObject2","fontWeight","dataTableCellStyle","_templateObject3","palette","type","rowBgColor","light","tableRowSelected","tableRowHover","dark","StyledTable","styled","Table","_templateObject4","primary","caption","Wrapper","div","EmptyDataTableRow_templateObject","EmptyDataTableRow","children","react_default","a","createElement","data-testid","context","RowType","ColGroup","DataTableColGroup","DataTableRowContext","Provider","DataTableHead","React","memo","editing","touched","Body","EditingBodyRowContainer","DataTableBody","idPropertyName","_ref$editingRows","length","src_DataTableBodyRow","concat","undefined","_props$data","_props$idPropertyName","_props$emptyTitle","emptyTitle","_ref$idPropertyName","onFieldChange","useRef","useEffect","current","useEditableDataTable","Fragment","src_Table","EditableDataTableContext","src_DataTableColGroup","src_DataTableHead","src_DataTableBody","src_EmptyDataTableRow","Editor","useContext","valueFromContext","setValue","slicedToArray","_EditingBodyRowContai","useContainer","validateField","errorControlled","handleChange","newValue","isChangeEvent","FormHelpText","MemoDataTableBodyCellInner","order","render","Error","src_DataTableCellEditor","DataTableBodyCell","state","DataTableHeadCell","classNames","align_center","width","Head","src_DataTableHeadCell","src_DataTableBodyCell","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_constants__WEBPACK_IMPORTED_MODULE_1__","createContext","createContainer","outerError","outTouched","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","setTouched","setErrors","rowDataRef","_useContext","updateErrors","newErrors","prev","shallowEqual","newRowData","arguments","updateTouched","result","newTouched","keys","forEach","filter","fieldName","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","d","__webpack_exports__"],"mappings":"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","file":"static/js/docs-table-column-editor.e588b001.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { useState, useCallback, useMemo } from 'react';\nimport { Playground, Props } from 'docz';\nimport TableColumn from '../src/TableColumn';\nimport EditableDataTable from '../src/EditableDataTable';\nimport { produce } from 'immer';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Demo = makeShortcode(\"Demo\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"单元格编辑器\"\n    }}>{`单元格编辑器`}</h1>\n    <p>{`在`}<a parentName=\"p\" {...{\n        \"href\": \"components-api#tablecolumn\"\n      }}>{`TableColumn`}</a>{`上通过`}<inlineCode parentName=\"p\">{`editor`}</inlineCode>{`属性指定单元格编辑器。单元格编辑器必须正确处理 EditableDataTable 给与的参数，方能让编辑器与 EditableDataTable 结合在一起使用，这些参数包括：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{` - 单元格值`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` - 编辑器值变更时的回调函数。编辑器在值变化时，调用这个回调函数，将变化后的值传递给 EditingDataTable。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` - 数据属性名称`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`item`}</inlineCode>{` - 当前行的数据对象`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`error`}</inlineCode>{` - 是否校验错误`}</li>\n    </ul>\n    <p>{`例子：`}</p>\n    <p>{`一个自定义的标题选择器组件`}<inlineCode parentName=\"p\">{`TitleSelect.tsx`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function TitleSelect(props) {\n  const { value, onChange, name, error } = props;\n  return (\n    <select\n      name={name}\n      value={value}\n      onChange={onChange}\n      style={{\n        color: error ? 'red' : '#333',\n      }}\n    >\n      <option value=\"web developer\">web developer</option>\n      <option value=\"Java developer\">Java developer</option>\n    </select>\n  );\n}\n`}</code></pre>\n    <p>{`使用`}<inlineCode parentName=\"p\">{`TitleSelect`}</inlineCode>{`的例子：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  function validate(rowData) {\n    const errors = {};\n\n    if (rowData.title && rowData.title !== 'Java developer') {\n      errors.title = '不能是Java developer';\n    }\n\n    return errors;\n  }\n\n  const users = [\n    {\n      id: '1',\n      name: 'Jacking',\n      title: 'web developer',\n    },\n    {\n      id: '2',\n      name: 'zinuo',\n      title: 'web developer',\n    },\n  ];\n\n  const editingRows = [false, true]; // 第二行数据是编辑状态\n\n  return (\n    <EditableDataTable\n      data={users}\n      editingRows={editingRows}\n      validate={validate}\n    >\n      <TableColumn title=\"id\" name=\"id\" editor=\"input\" />\n      <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" />\n      <TableColumn title=\"标题\" name=\"title\" editor={TitleSelect} />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  function TitleSelect(props) {\\n    const { value, onChange, name, error } = props\\n    return (\\n      <select\\n        name={name}\\n        value={value}\\n        onChange={onChange}\\n        style={{\\n          color: error ? \\'red\\' : \\'#333\\',\\n        }}\\n      >\\n        <option value=\\\"web developer\\\">web developer</option>\\n        <option value=\\\"Java developer\\\">Java developer</option>\\n        <option value=\\\"node.js developer\\\">Node.js developer</option>\\n      </select>\\n    )\\n  }\\n  function validate(rowData) {\\n    const errors = {}\\n    if (rowData.title && rowData.title === \\'Java developer\\') {\\n      errors.title = \\'不能是 Java developer\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'web developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'web developer\\',\\n    },\\n  ]\\n\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable\\n      data={users}\\n      editingRows={editingRows}\\n      validate={validate}\\n    >\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TitleSelect} />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        function TitleSelect(props) {\n          const {\n            value,\n            onChange,\n            name,\n            error\n          } = props;\n          return <select name={name} value={value} onChange={onChange} style={{\n            color: error ? 'red' : '#333'\n          }}>\n          <option value=\"web developer\">web developer</option>\n          <option value=\"Java developer\">Java developer</option>\n          <option value=\"node.js developer\">Node.js developer</option>\n        </select>;\n        }\n\n        function validate(rowData) {\n          const errors = {};\n\n          if (rowData.title && rowData.title === 'Java developer') {\n            errors.title = '不能是 Java developer';\n          }\n\n          return errors;\n        }\n\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'web developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'web developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TitleSelect} mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"onchange-属性\"\n    }}>{`onChange 属性`}</h2>\n    <p><inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`属性用来将编辑器的值传递给可编辑数据表格。方法签名如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`onChange(event?: React.ChangeEvent | string): void;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`支持两种传值方式：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`变更事件。这种情况可编辑数据表格从`}<inlineCode parentName=\"li\">{`event.target.value`}</inlineCode>{`中取值。`}</li>\n      <li parentName=\"ul\">{`直接传值。`}</li>\n    </ul>\n    <p>{`上述提供的`}<inlineCode parentName=\"p\">{`TitleSelect`}</inlineCode>{`采用了第一种方式。还可以通过第二种方式来传值：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function TitleSelect(props: EditorProps) {\n  const { value, onChange, name, error } = props;\n\n  const handleChange = (event) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <select\n      name={name}\n      value={value}\n      onChange={handleChange}\n      style={{\n        color: error ? 'red' : '#333',\n      }}\n    >\n      <option value=\"web developer\">web developer</option>\n      <option value=\"Java developer\">Java developer</option>\n    </select>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"item-属性\"\n    }}>{`item 属性`}</h2>\n    <p>{`item 属性有两个用途：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`为单元格编辑器提供整行数据，单元格编辑器有可能需要其他行数据才能渲染出来`}</li>\n      <li parentName=\"ul\">{`单元格编辑器可能需要修改其他字段的值`}</li>\n    </ul>\n    <p>{`看一个用途二的例子：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const titles = [\n  {\n    id: '1',\n    title: 'web developer',\n  },\n  {\n    id: '2',\n    title: 'Java developer',\n  },\n];\n\nfunction TitleSelect(props) {\n  const { value, onChange, name, error, item } = props;\n\n  const handleChange = (event) => {\n    const title = event.target.value;\n    const { id } = titles.find((titleItem) => titleItem.title === title);\n\n    item.titleId = id;\n    onChange(title);\n  };\n\n  return (\n    <div>\n      <select\n        name={name}\n        value={value}\n        onChange={handleChange}\n        style={{\n          color: error ? 'red' : '#333',\n        }}\n      >\n        {titles.map((titleItem) => (\n          <option key={titleItem.id} value={titleItem.title}>\n            {titleItem.title}\n          </option>\n        ))}\n      </select>\n      <span>titleId: {item.titleId}</span>\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`示例：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const titles = [\\n    {\\n      id: \\'1\\',\\n      title: \\'web developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      title: \\'Java developer\\',\\n    },\\n  ]\\n  function TitleSelect(props) {\\n    const { value, onChange, name, error, item } = props\\n\\n    const handleChange = event => {\\n      const title = event.target.value\\n      const { id } = titles.find(titleItem => titleItem.title === title)\\n\\n      item.titleId = id\\n      onChange(title)\\n    }\\n\\n    return (\\n      <div>\\n        <select\\n          name={name}\\n          value={value}\\n          onChange={handleChange}\\n          style={{\\n            color: error ? \\'red\\' : \\'#333\\',\\n          }}\\n        >\\n          {titles.map(titleItem => (\\n            <option key={titleItem.id} value={titleItem.title}>\\n              {titleItem.title}\\n            </option>\\n          ))}\\n        </select>\\n        <span>titleId: {item.titleId}</span>\\n      </div>\\n    )\\n  }\\n\\n  function validate(rowData) {\\n    const errors = {}\\n    if (rowData.title && rowData.title === \\'Java developer\\') {\\n      errors.title = \\'不能是 Java developer\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'web developer\\',\\n      titleId: \\'1\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'web developer\\',\\n      titleId: \\'1\\',\\n    },\\n  ]\\n\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable\\n      data={users}\\n      editingRows={editingRows}\\n      validate={validate}\\n    >\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TitleSelect} />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const titles = [{\n          id: '1',\n          title: 'web developer'\n        }, {\n          id: '2',\n          title: 'Java developer'\n        }];\n\n        function TitleSelect(props) {\n          const {\n            value,\n            onChange,\n            name,\n            error,\n            item\n          } = props;\n\n          const handleChange = event => {\n            const title = event.target.value;\n            const {\n              id\n            } = titles.find(titleItem => titleItem.title === title);\n            item.titleId = id;\n            onChange(title);\n          };\n\n          return <div>\n      <select name={name} value={value} onChange={handleChange} style={{\n              color: error ? 'red' : '#333'\n            }}>\n        {titles.map(titleItem => <option key={titleItem.id} value={titleItem.title}>\n            {titleItem.title}\n          </option>)}\n      </select>\n      <span>titleId: {item.titleId}</span>\n    </div>;\n        }\n\n        function validate(rowData) {\n          const errors = {};\n\n          if (rowData.title && rowData.title === 'Java developer') {\n            errors.title = '不能是 Java developer';\n          }\n\n          return errors;\n        }\n\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'web developer',\n          titleId: '1'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'web developer',\n          titleId: '1'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TitleSelect} mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"单元格之间的值关联\"\n    }}>{`单元格之间的值关联`}</h2>\n    <p>{`单元格编辑器可以随意修改`}<inlineCode parentName=\"p\">{`item`}</inlineCode>{`，但是直接修改`}<inlineCode parentName=\"p\">{`item`}</inlineCode>{`对象的属性值并不等于状态变更，也就不会引起可编辑数据表格的重绘。如果需要做单元格之间的值关联，我们需要监听到行数据变化并更新`}<inlineCode parentName=\"p\">{`items`}</inlineCode>{`状态。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState } from 'react';\nimport { produce } from 'immer';\nimport EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const [items, setItems] = useState([\n    { id: '1', title: 'Java developer', titleId: '2', name: 'jacking' },\n  ]);\n\n  const handleRowChange = (index, rowData) => {\n    setItems(\n      produce((draft) => {\n        draft[index] = { ...rowData };\n      }),\n    );\n  };\n\n  return (\n    <EditableDataTable\n      data={items}\n      onRowChange={handleRowChange}\n      editingRows={[true]}\n    >\n      <TableColumn title=\"姓名\" name=\"name\" />\n      <TableColumn title=\"标题id\" name=\"titleId\" />\n      <TableColumn title=\"标题\" name=\"title\" editor={TitleSelect} />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`重点是我们在`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`上添加了`}<inlineCode parentName=\"p\">{`onRowChange`}</inlineCode>{`属性，用来监听数据行值变化事件。`}</p>\n    <p>{`示例：`}</p>\n    <Playground __position={2} __code={'() => {\\n  const titles = [\\n    {\\n      id: \\'1\\',\\n      title: \\'web developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      title: \\'Java developer\\',\\n    },\\n  ]\\n  function TitleSelect(props) {\\n    const { value, onChange, name, error, item } = props\\n\\n    const handleChange = event => {\\n      const title = event.target.value\\n      const { id } = titles.find(titleItem => titleItem.title === title)\\n\\n      item.titleId = id\\n      onChange(title)\\n    }\\n\\n    return (\\n      <select\\n        name={name}\\n        value={value}\\n        onChange={handleChange}\\n        style={{\\n          color: error ? \\'red\\' : \\'#333\\',\\n        }}\\n      >\\n        {titles.map(titleItem => (\\n          <option key={titleItem.id} value={titleItem.title}>\\n            {titleItem.title}\\n          </option>\\n        ))}\\n      </select>\\n    )\\n  }\\n\\n  function Demo() {\\n    const [items, setItems] = useState([\\n      { id: \\'1\\', title: \\'Java developer\\', titleId: \\'2\\', name: \\'jacking\\' },\\n      { id: \\'2\\', title: \\'web developer\\', titleId: \\'1\\', name: \\'zinuo\\' },\\n    ])\\n\\n    const handleRowChange = (index, rowData) => {\\n      setItems(\\n        produce(draft => {\\n          draft[index] = { ...rowData }\\n        }),\\n      )\\n    }\\n\\n    return (\\n      <EditableDataTable\\n        data={items}\\n        onRowChange={handleRowChange}\\n        editingRows={[true, true]}\\n      >\\n        <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" />\\n        <TableColumn title=\\\"标题id\\\" name=\\\"titleId\\\" />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TitleSelect} />\\n      </EditableDataTable>\\n    )\\n  }\\n\\n  return <Demo />\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const titles = [{\n          id: '1',\n          title: 'web developer'\n        }, {\n          id: '2',\n          title: 'Java developer'\n        }];\n\n        function TitleSelect(props) {\n          const {\n            value,\n            onChange,\n            name,\n            error,\n            item\n          } = props;\n\n          const handleChange = event => {\n            const title = event.target.value;\n            const {\n              id\n            } = titles.find(titleItem => titleItem.title === title);\n            item.titleId = id;\n            onChange(title);\n          };\n\n          return <select name={name} value={value} onChange={handleChange} style={{\n            color: error ? 'red' : '#333'\n          }}>\n      {titles.map(titleItem => <option key={titleItem.id} value={titleItem.title}>\n          {titleItem.title}\n        </option>)}\n    </select>;\n        }\n\n        function Demo() {\n          const [items, setItems] = useState([{\n            id: '1',\n            title: 'Java developer',\n            titleId: '2',\n            name: 'jacking'\n          }, {\n            id: '2',\n            title: 'web developer',\n            titleId: '1',\n            name: 'zinuo'\n          }]);\n\n          const handleRowChange = (index, rowData) => {\n            setItems(produce(draft => {\n              draft[index] = { ...rowData\n              };\n            }));\n          };\n\n          return <EditableDataTable data={items} onRowChange={handleRowChange} editingRows={[true, true]} mdxType=\"EditableDataTable\">\n      <TableColumn title=\"姓名\" name=\"name\" mdxType=\"TableColumn\" />\n      <TableColumn title=\"标题id\" name=\"titleId\" mdxType=\"TableColumn\" />\n      <TableColumn title=\"标题\" name=\"title\" editor={TitleSelect} mdxType=\"TableColumn\" />\n    </EditableDataTable>;\n        }\n\n        return <Demo mdxType=\"Demo\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"typescript-支持\"\n    }}>{`Typescript 支持`}</h2>\n    <p>{`提供了`}<inlineCode parentName=\"p\">{`EditorProps`}</inlineCode>{`，表示单元格编辑器的属性类型。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { EditorProps } from '@sinouiincubator/editable-data-table';\n\nfunction TitleSelect(props: EditorProps) {\n  const { value, onChange, name, error } = props;\n  return (\n    <select\n      name={name}\n      value={value}\n      onChange={onChange}\n      style={{\n        color: error ? 'red' : '#333',\n      }}\n    >\n      <option value=\"web developer\">web developer</option>\n      <option value=\"Java developer\">Java developer</option>\n    </select>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"选择框编辑器\"\n    }}>{`选择框编辑器`}</h2>\n    <p>{`需要为选择框编辑器提供选项。大家可以创建一个高阶函数，来创建选择框编辑器，如下所示：`}</p>\n    <p><inlineCode parentName=\"p\">{`createSelectEditor.tsx`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { EditorProps } from '@sinouiincubator/editable-data-table';\n\ninterface Option {\n  value: string;\n  title: string;\n}\n\nfunction createSelectEditor(options: Option[], displayName?: name) {\n  const Selector: React.SFC<EditorProps> = (props) => {\n    const { error, name, value, onChange } = props;\n    return (\n      <select4\n        style={{\n          color: error ? 'red' : '#333',\n        }}\n        name={name}\n        value={value}\n        onChange={onChange}\n      >\n        {options.map((optionItem) => (\n          <option key={optionItem.value} value={optionItem.value}>\n            {optionItem.title}\n          </option>\n        ))}\n      </select>\n    );\n  };\n\n  if (displayName) {\n    // displayName 方便大家在调试React时快速定位组件\n    Selector.displayName = displayName;\n  }\n\n  return Selector;\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`TitleSelect.tsx`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const titles = [\n  {\n    value: 'web developer',\n    title: 'web developer',\n  },\n  {\n    value: 'Java developer',\n    title: 'Java developer',\n  },\n];\nconst TitleSelect = createSelectEditor(titles, 'TitleSelect');\n\nconst favs = [\n  {\n    value: '篮球',\n    title: '篮球',\n  },\n  {\n    value: '足球',\n    title: '足球',\n  },\n];\nconst FavSelect = createSelectEditor(favs, 'FavSelect');\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Demo.tsx`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState } from 'react';\n\nfunction Demo() {\n  const [items, setItems] = useState([\n    { id: '1', title: 'Java developer', name: 'jacking' },\n    { id: '2', title: 'web developer', name: 'zinuo' },\n  ]);\n\n  return (\n    <EditableDataTable data={items} editingRows={[true, true]}>\n      <TableColumn title=\"姓名\" name=\"name\" />\n      <TableColumn title=\"标题id\" name=\"titleId\" />\n      <TableColumn title=\"标题\" name=\"title\" editor={TitleSelect} />\n      <TableColumn title=\"最喜欢的运动\" name=\"fav\" editor={FavSelect} />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={3} __code={'() => {\\n  function createSelectEditor(options, displayName) {\\n    const Selector = props => {\\n      const { error, name, value, onChange } = props\\n      return (\\n        <select\\n          style={{\\n            color: error ? \\'red\\' : \\'#333\\',\\n          }}\\n          name={name}\\n          value={value}\\n          onChange={onChange}\\n        >\\n          {options.map(optionItem => (\\n            <option key={optionItem.value} value={optionItem.value}>\\n              {optionItem.title}\\n            </option>\\n          ))}\\n        </select>\\n      )\\n    }\\n    if (displayName) {\\n      Selector.displayName = displayName\\n    }\\n\\n    return Selector\\n  }\\n\\n  const titles = [\\n    {\\n      value: \\'web developer\\',\\n      title: \\'web developer\\',\\n    },\\n    {\\n      value: \\'Java developer\\',\\n      title: \\'Java developer\\',\\n    },\\n  ]\\n  const TitleSelect = createSelectEditor(titles, \\'TitleSelect\\')\\n\\n  const favs = [\\n    {\\n      value: \\'篮球\\',\\n      title: \\'篮球\\',\\n    },\\n    {\\n      value: \\'足球\\',\\n      title: \\'足球\\',\\n    },\\n  ]\\n  const FavSelect = createSelectEditor(favs, \\'FavSelect\\')\\n\\n  function Demo() {\\n    const [items, setItems] = useState([\\n      { id: \\'1\\', title: \\'Java developer\\', name: \\'jacking\\' },\\n      { id: \\'2\\', title: \\'web developer\\', name: \\'zinuo\\' },\\n    ])\\n\\n    return (\\n      <EditableDataTable data={items} editingRows={[true, true]}>\\n        <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" />\\n        <TableColumn title=\\\"标题id\\\" name=\\\"titleId\\\" />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TitleSelect} />\\n        <TableColumn title=\\\"最喜欢的运动\\\" name=\\\"fav\\\" editor={FavSelect} />\\n      </EditableDataTable>\\n    )\\n  }\\n\\n  return <Demo />\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        function createSelectEditor(options, displayName) {\n          const Selector = props => {\n            const {\n              error,\n              name,\n              value,\n              onChange\n            } = props;\n            return <select style={{\n              color: error ? 'red' : '#333'\n            }} name={name} value={value} onChange={onChange}>\n            {options.map(optionItem => <option key={optionItem.value} value={optionItem.value}>\n                {optionItem.title}\n              </option>)}\n          </select>;\n          };\n\n          if (displayName) {\n            Selector.displayName = displayName;\n          }\n\n          return Selector;\n        }\n\n        const titles = [{\n          value: 'web developer',\n          title: 'web developer'\n        }, {\n          value: 'Java developer',\n          title: 'Java developer'\n        }];\n        const TitleSelect = createSelectEditor(titles, 'TitleSelect');\n        const favs = [{\n          value: '篮球',\n          title: '篮球'\n        }, {\n          value: '足球',\n          title: '足球'\n        }];\n        const FavSelect = createSelectEditor(favs, 'FavSelect');\n\n        function Demo() {\n          const [items, setItems] = useState([{\n            id: '1',\n            title: 'Java developer',\n            name: 'jacking'\n          }, {\n            id: '2',\n            title: 'web developer',\n            name: 'zinuo'\n          }]);\n          return <EditableDataTable data={items} editingRows={[true, true]} mdxType=\"EditableDataTable\">\n      <TableColumn title=\"姓名\" name=\"name\" mdxType=\"TableColumn\" />\n      <TableColumn title=\"标题id\" name=\"titleId\" mdxType=\"TableColumn\" />\n      <TableColumn title=\"标题\" name=\"title\" editor={TitleSelect} mdxType=\"TableColumn\" />\n      <TableColumn title=\"最喜欢的运动\" name=\"fav\" editor={FavSelect} mdxType=\"TableColumn\" />\n    </EditableDataTable>;\n        }\n\n        return <Demo mdxType=\"Demo\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"sinoui-components\"\n    }}>{`sinoui-components`}</h2>\n    <p>{`可以用 sinoui-components 提供的组件作为单元格编辑器，包括：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`TextInput`}</li>\n      <li parentName=\"ul\">{`Select`}</li>\n      <li parentName=\"ul\">{`RadioGroup`}</li>\n      <li parentName=\"ul\">{`CheckboxGroup`}</li>\n      <li parentName=\"ul\">{`Radio`}</li>\n      <li parentName=\"ul\">{`Checkbox`}</li>\n      <li parentName=\"ul\">{`DatePicker`}</li>\n    </ul>\n    <p>{`等。`}</p>\n    <p>{`这些组件都可以通过上述描述的方式方法与可编辑数据表格组合使用。`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import styled, { css } from 'sinoui-components/styles';\nimport Table from 'sinoui-components/Table';\n\nconst captionTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.fontWeightMedium};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst bodyTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.body1.fontWeight};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst dataTableCellStyle = css`\n  padding: 0;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-bottom: 1px solid\n    ${(props) =>\n      props.theme.palette.type === 'light'\n        ? 'rgba(224, 224, 224, 1)'\n        : 'rgba(80, 80, 80, 1)'};\n`;\n\nconst rowBgColor = {\n  light: {\n    tableRowSelected: 'rgba(0, 0, 0, 0.04)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(0, 0, 0, 0.07)', // 表格行hover时的背景色\n  },\n  dark: {\n    tableRowSelected: 'rgba(255, 255, 255, 0.08)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(255, 255, 255, 0.14)', // 表格行hover时的背景色\n  },\n};\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n  border-top: 1px solid rgba(224, 224, 224, 1);\n  & .sinoui-data-table-head {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    background-color: ${(props) =>\n      props.theme.palette.type === 'light'\n        ? props.theme.palette.primary[50]\n        : props.theme.palette.primary[200]};\n    text-align: left;\n    vertical-align: middle;\n  }\n\n  .sinoui-checkbox-button {\n    margin: 14px;\n  }\n\n  & .sinoui-data-table-head.numeric,\n  .sinoui-data-table-body-td.numeric {\n    text-align: right;\n    flex-direction: row-reverse;\n  }\n\n  & .sinoui-data-table-head.align_center,\n  .sinoui-data-table-body-td.align_center {\n    text-align: center;\n  }\n\n  & .sinoui-data-table-head.checkbox,\n  .sinoui-data-table-body-td.checkbox {\n    padding: 0;\n    width: 48px;\n  }\n\n  & .sinoui-data-table-head.extraInfo,\n  .sinoui-data-table-body-td.extraInfo {\n    padding: 0;\n    width: 60px;\n  }\n\n  & .sinoui-data-table-head:last-child,\n  .sinoui-data-table-body-td:last-child {\n    padding-right: 24px;\n  }\n\n  & .sinoui-data-table-footer {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    padding-left: 24px;\n    padding-right: 12px;\n  }\n\n  & .sinoui-data-table-body-cell-no-data {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    padding: 64px;\n    text-align: center;\n    color: ${(props) => props.theme.typography.caption.color};\n  }\n\n  & .sinoui-data-table-body-td {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    text-align: left;\n    vertical-align: middle;\n    word-wrap: break-word;\n    word-break: break-all;\n  }\n\n  & .sinoui-data-table-head-row {\n    height: 48px;\n  }\n\n  & .sinoui-data-table-footer-row,\n  .sinoui-data-table-body-row-no-data {\n    height: 56px;\n    background-color: transparent;\n  }\n\n  & .sinoui-data-table-body-row {\n    height: 48px;\n    background-color: transparent;\n\n    &:hover {\n      background-color: ${(props) =>\n        rowBgColor[props.theme.palette.type].tableRowHover};\n    }\n  }\n\n  & .sinoui-data-table-body-row.selected {\n    background-color: ${(props) =>\n      rowBgColor[props.theme.palette.type].tableRowSelected};\n  }\n`;\n\nexport default StyledTable;\n","import React from 'react';\nimport styled from 'sinoui-components/styles';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  padding: 32px 8px;\n`;\n\n/**\n * 表格空数据时显示的行\n */\nconst EmptyDataTableRow: React.SFC = (props) => {\n  const { children } = props;\n  return (\n    <Wrapper className=\"sinoui-data-table-info\" data-testid=\"emptyInfo\">\n      {children}\n    </Wrapper>\n  );\n};\n\nexport default EmptyDataTableRow;\n","import React from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext from './shared/DataTableRowContext';\n\nconst context: { type: RowType.ColGroup } = {\n  type: RowType.ColGroup,\n};\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nfunction DataTableColGroup(props: Props) {\n  const { children } = props;\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <colgroup data-testid=\"colgroup\">{children}</colgroup>\n    </DataTableRowContext.Provider>\n  );\n}\n\nexport default DataTableColGroup;\n","import React from 'react';\n\n/**\n * 数据表头\n */\nconst DataTableHead: React.SFC = function TableHead({ children }) {\n  return (\n    <thead>\n      <tr className=\"sinoui-data-table-head-row\" data-testid=\"tableHead\">\n        {children}\n      </tr>\n    </thead>\n  );\n};\n\nexport default DataTableHead;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props<T> {\n  /**\n   * 此行数据\n   */\n  data: T;\n  /**\n   * 数据序号\n   */\n  index: number;\n  /**\n   * 单元格子组件\n   */\n  children: React.ReactNode;\n\n  /**\n   * 是否处于编辑状态\n   */\n  editing?: boolean;\n\n  /**\n   * 行数据错误状态\n   */\n  error?: ErrorResult;\n\n  /**\n   * 单元格编辑器是否被点击过\n   */\n  touched?: TouchedState;\n}\n\ntype CompType<T = any> = React.SFC<Props<T>>;\n\n/**\n * 内容行\n */\nconst DataTableBodyRow: CompType = (props) => {\n  const { data, index, children, editing, error, touched } = props;\n  const context: BodyRowContextType<any> = useMemo(\n    () => ({\n      type: RowType.Body,\n      data,\n      index,\n      editing: !!editing,\n      error,\n      touched,\n    }),\n    [data, index, editing, error, touched],\n  );\n\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <EditingBodyRowContainer.Provider>\n        <tr className=\"sinoui-data-table-body-row\" data-testid=\"bodyRow\">\n          {children}\n        </tr>\n      </EditingBodyRowContainer.Provider>\n    </DataTableRowContext.Provider>\n  );\n};\n\nexport default React.memo(DataTableBodyRow);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport DataTableBodyRow from './DataTableBodyRow';\n\n/**\n * 数据表格内容组件\n */\nconst DataTableBody: React.SFC<{\n  data?: any[];\n  idPropertyName: string;\n  editingRows?: boolean[];\n  errors?: ErrorResult[];\n  touched?: TouchedState[];\n}> = function DataTableBody({\n  idPropertyName,\n  data,\n  children,\n  editingRows = [],\n  errors,\n  touched,\n}) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n  return (\n    <tbody>\n      {data.map((item, index) => (\n        <DataTableBodyRow\n          key={item[idPropertyName] || `index_${index}`}\n          data={item}\n          index={index}\n          data-testid=\"tableBody\"\n          editing={editingRows[index]}\n          error={errors ? errors[index] : undefined}\n          touched={touched ? touched[index] : undefined}\n        >\n          {children}\n        </DataTableBodyRow>\n      ))}\n    </tbody>\n  );\n};\n\nexport default DataTableBody;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo, useRef, useEffect } from 'react';\nimport Table from './Table';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EmptyDataTableRow from './EmptyDataTableRow';\nimport DataTableColGroup from './DataTableColGroup';\nimport DataTableHead from './DataTableHead';\nimport DataTableBody from './DataTableBody';\n\nexport interface Props<T> {\n  /**\n   * 列表数据\n   */\n  data?: T[];\n  /**\n   * 处于编辑状态的行。`editingRows`数组需要与`data`数组保持一一对应的关系，`editingRows`数组中每一个数据项代表的是`data`数组中对应数据项的编辑状态，`true`表示编辑状态，`false`表示非编辑状态。\n   */\n  editingRows?: boolean[];\n\n  /**\n   * 错误状态\n   */\n  errors?: ErrorResult[];\n\n  /**\n   * 单元格是否被点击的状态\n   */\n  touched?: TouchedState[];\n\n  /**\n   * 子节点，一组TableColumn。使用TableColumn指表格列信息。\n   */\n  children: React.ReactNode;\n  /**\n   * 数据的id属性名。默认为'id'。\n   */\n  idPropertyName?: string;\n  /**\n   * 无数据时的提示信息。默认为“暂无数据”。\n   */\n  emptyTitle?: React.ReactNode;\n\n  /**\n   * 监听行数据发生变化的事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onRowChange?: (index: number, rowData: T) => void;\n\n  /**\n   * 监听单元格值变化事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onFieldChange?: (index: number, fieldName: string, rowData: T) => void;\n\n  /**\n   * 给正在编辑的行添加校验规则。\n   * \n   * 返回错误提示：\n   * \n   * ```js\n     {\n       'title': '不能为空',\n       'name': '不能少于三个字'\n     }\n   * ```\n   *\n   * 上面的错误信息表示字段`title`和`name`校验失败。\n   * \n   * 如果数据行没有错误，则返回`{}`或者`undefined`。\n   */\n  validate?: (rowData: T) => { [x: string]: string } | undefined;\n}\n\nfunction useEditableDataTable<T>({\n  idPropertyName = 'id',\n  onRowChange,\n  validate,\n  onFieldChange,\n}: Props<T>) {\n  const options = useRef({\n    onRowChange,\n    validate,\n    onFieldChange,\n  });\n\n  useEffect(() => {\n    options.current.onRowChange = onRowChange;\n    options.current.validate = validate;\n    options.current.onFieldChange = onFieldChange;\n  }, [onRowChange, validate, onFieldChange]);\n\n  const context = useMemo(\n    () => ({ idPropertyName, options: options.current }),\n    [idPropertyName],\n  );\n\n  return context;\n}\n\n/**\n * 可编辑表格\n */\nfunction EditableDataTable<T>(props: Props<T>) {\n  const {\n    data = [],\n    idPropertyName = 'id',\n    children,\n    emptyTitle = '暂无数据',\n    editingRows,\n    errors,\n    touched,\n  } = props;\n  const context = useEditableDataTable(props);\n  return (\n    <>\n      <Table>\n        <EditableDataTableContext.Provider value={context}>\n          <DataTableColGroup>{children}</DataTableColGroup>\n          <DataTableHead>{children}</DataTableHead>\n          <DataTableBody\n            data={data}\n            idPropertyName={idPropertyName}\n            editingRows={editingRows}\n            errors={errors}\n            touched={touched}\n          >\n            {children}\n          </DataTableBody>\n        </EditableDataTableContext.Provider>\n      </Table>\n      {(!data || data.length === 0) && (\n        <EmptyDataTableRow>{emptyTitle}</EmptyDataTableRow>\n      )}\n    </>\n  );\n}\n\nexport default EditableDataTable;\n","import React, { useState, useContext, useCallback, useMemo } from 'react';\nimport FormHelpText from 'sinoui-components/Form/FormHelpText';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props {\n  editor: React.ReactType;\n  name: string;\n}\n\nfunction isChangeEvent(\n  event?: React.ChangeEvent<HTMLInputElement> | string,\n): event is React.ChangeEvent<HTMLInputElement> {\n  return !!(event && (event as React.ChangeEvent<HTMLInputElement>).target);\n}\n\n/**\n * 单元格编辑器\n */\nfunction DataTableCellEditor(props: Props) {\n  const { name, editor: Editor } = props;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { data, index } = useContext(DataTableRowContext) as BodyRowContextType<\n    any\n  >;\n  const valueFromContext = data[name] || '';\n  const [, setValue] = useState(valueFromContext);\n  const { options } = useContext(EditableDataTableContext);\n  const {\n    touched,\n    errors,\n    validateField,\n    errorControlled,\n  } = EditingBodyRowContainer.useContainer();\n\n  const handleChange = useCallback(\n    (event?: React.ChangeEvent<HTMLInputElement> | string) => {\n      const newValue = isChangeEvent(event) ? event.target.value : event;\n      setValue(newValue);\n\n      data[name] = newValue;\n\n      if (options.onRowChange) {\n        options.onRowChange(index, data);\n      }\n\n      if (options.onFieldChange) {\n        options.onFieldChange(index, name, data);\n      }\n\n      if (!errorControlled) {\n        validateField(name, data);\n      }\n    },\n    [data, name, options, index, errorControlled, validateField],\n  );\n\n  const isTouched = touched[name];\n  const error = isTouched ? errors[name] : undefined;\n\n  const element = useMemo(\n    () => (\n      <>\n        <Editor\n          name={name}\n          value={valueFromContext}\n          item={data}\n          onChange={handleChange}\n          error={!!error}\n        />\n        {error && <FormHelpText error>{error}</FormHelpText>}\n      </>\n    ),\n    [data, error, handleChange, name, valueFromContext],\n  );\n\n  return element;\n}\n\nexport default React.memo(DataTableCellEditor);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport DataTableCellEditor from './DataTableCellEditor';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface CellState<T> {\n  data: T;\n  index: number;\n  editing: boolean;\n  errors?: { [x: string]: any };\n  validate: (rowData?: T) => boolean;\n  idPropertyName: string;\n}\n\ninterface DataCellProps<T, CellDataType> {\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n  /**\n   * 数据列名称\n   */\n  name?: string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\nfunction useCellState<T>(): CellState<T> {\n  const { data, index, editing } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<any>;\n  const { validate } = EditingBodyRowContainer.useContainer();\n  const { idPropertyName } = useContext(EditableDataTableContext);\n\n  return {\n    data,\n    index,\n    editing,\n    idPropertyName,\n    validate,\n  };\n}\n\n/**\n * 数据单元格\n */\nfunction DataTableBodyCellInner(\n  props: DataCellProps<any, any> & CellState<any>,\n) {\n  const {\n    order,\n    render,\n    name,\n    editor,\n    index,\n    editing,\n    data,\n    idPropertyName,\n    validate,\n  } = props;\n\n  if (order) {\n    return (\n      <td className=\"sinoui-data-table-body-td align_center\">{index + 1}</td>\n    );\n  }\n\n  if (editing && editor) {\n    if (!name) {\n      throw new Error(`没有给TableColumn指定name属性`);\n    }\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        <DataTableCellEditor name={name} editor={editor} />\n      </td>\n    );\n  }\n\n  if (render) {\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        {render(\n          name ? data[name] : undefined,\n          data,\n          index,\n          data[idPropertyName],\n          {\n            editing,\n            validate,\n          },\n        )}\n      </td>\n    );\n  }\n\n  return name ? (\n    <td className=\"sinoui-data-table-body-td\">{data[name]}</td>\n  ) : null;\n}\n\nconst MemoDataTableBodyCellInner = React.memo(DataTableBodyCellInner);\n\nfunction DataTableBodyCell<T = any, CellDataType = string>(\n  props: DataCellProps<T, CellDataType>,\n) {\n  const state = useCellState<any>();\n\n  return <MemoDataTableBodyCellInner {...props} {...state} />;\n}\n\nexport default DataTableBodyCell;\n","import React from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  order?: boolean;\n  title?: React.ReactNode;\n}\n\n/**\n * 表格头单元格\n */\nfunction DataTableHeadCell(props: Props) {\n  const { order, title } = props;\n  return (\n    <th\n      className={classNames('sinoui-data-table-head', {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        align_center: order,\n      })}\n    >\n      {title}\n    </th>\n  );\n}\n\nexport default DataTableHeadCell;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport DataTableRowContext from './shared/DataTableRowContext';\nimport DataTableBodyCell from './DataTableBodyCell';\nimport DataTableHeadCell from './DataTableHeadCell';\nimport { RowType } from './shared/constants';\n\nexport interface Props<T, CellDataType> {\n  /**\n   * 数据列名称\n   */\n  name?: string;\n  /**\n   * 标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n\n  /**\n   * 列宽度\n   */\n  width?: number | string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\n/**\n * 表格列\n */\nconst TableColumn: React.SFC<Props<any, any>> = React.memo(function TableColumn<\n  T,\n  CellDataType\n>(props: Props<T, CellDataType>) {\n  const { title, order, width } = props;\n  const { type } = useContext(DataTableRowContext);\n\n  switch (type) {\n    case RowType.Head:\n      return <DataTableHeadCell title={title} order={order} />;\n    case RowType.ColGroup:\n      return <col width={order ? 50 : width} />;\n    default:\n      return <DataTableBodyCell {...props} />;\n  }\n});\n\nexport default TableColumn;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport { RowType } from './constants';\n\nexport interface BodyRowContextType<T> {\n  type: RowType.Body;\n  data: T;\n  index: number;\n  /**\n   * 是否处于编辑状态\n   */\n  editing: boolean;\n\n  /**\n   * 数据行的验证结果\n   */\n  error?: ErrorResult;\n\n  /**\n   * 单元格数据被点击状态\n   */\n  touched?: TouchedState;\n}\n\nexport interface HeadRowContextType {\n  type: RowType.Head;\n}\n\nexport interface ColGroupContextType {\n  type: RowType.ColGroup;\n}\n\nexport type RowContextType<T = any> =\n  | BodyRowContextType<T>\n  | HeadRowContextType\n  | ColGroupContextType;\n\nconst DataTableRowContext = React.createContext<RowContextType>({\n  type: RowType.Head,\n});\n\nexport default DataTableRowContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\n\ninterface ContextType {\n  idPropertyName: string;\n  options: {\n    onRowChange?: (index: number, rowData: any) => void;\n    onFieldChange?: (index: number, fieldName: string, rowData: any) => void;\n    validate?: (rowData: any) => { [x: string]: string } | undefined;\n  };\n}\n\nconst EditableDataTableContext = React.createContext<ContextType>({\n  idPropertyName: 'id',\n  options: {},\n});\n\nexport default EditableDataTableContext;\n","import { useState, useCallback, useRef, useEffect, useContext } from 'react';\nimport { createContainer } from 'unstated-next';\nimport shallowEqual from 'shallowequal';\nimport EditableDataTableContext from './EditableDataTableContext';\nimport DataTableRowContext, { BodyRowContextType } from './DataTableRowContext';\n\ninterface ContextType<T> {\n  /**\n   * 校验错误信息\n   */\n  errors: {\n    [x: string]: string;\n  };\n\n  /**\n   * 表单校验状态是否是受控于外部。（也就是使用者处理数据行校验）\n   */\n  errorControlled: boolean;\n\n  /**\n   * 点击状态\n   */\n  touched: {\n    [x: string]: boolean;\n  };\n\n  /**\n   * 校验数据行\n   *\n   * 如果通过校验，则返回`true`，否则返回`false`。\n   */\n  validate: (newItem?: T) => boolean;\n\n  /**\n   * 校验表单域\n   */\n  validateField: (fieldName: string, newRowData: T) => void;\n}\n\n/**\n * 用于正在编辑的行数据的状态管理hook\n *\n * 主要维护的状态：\n *\n * * 表单校验\n * * 是否点击过的状态\n *\n */\nfunction useEditingBodyRow<T>(): ContextType<T> {\n  const { data: rowData, error: outerError, touched: outTouched } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<T>;\n  const [touched, setTouched] = useState<{ [x: string]: boolean }>({});\n  const [errors, setErrors] = useState({});\n  const rowDataRef = useRef(rowData);\n  const { options, idPropertyName } = useContext(EditableDataTableContext);\n\n  useEffect(() => {\n    rowDataRef.current = rowData;\n  }, [rowData]);\n\n  const updateErrors = useCallback((newErrors: any) => {\n    setErrors((prev) => {\n      if (!shallowEqual(newErrors, prev)) {\n        return newErrors;\n      }\n      return prev;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!(rowData as any)[idPropertyName] && options.validate) {\n      const newErrors = options.validate(rowData) || {};\n      updateErrors(newErrors);\n    }\n  }, [rowData, options, idPropertyName, updateErrors]);\n\n  const validate = useCallback(\n    (newRowData: T = rowDataRef.current, updateTouched: boolean = true) => {\n      if (options.validate) {\n        const result = options.validate(newRowData);\n        if (result) {\n          if (updateTouched) {\n            const newTouched: { [x: string]: boolean } = {};\n            Object.keys(result).forEach((key) => {\n              newTouched[key] = true;\n            });\n\n            setTouched(newTouched);\n          }\n\n          updateErrors(result || {});\n\n          return (\n            Object.keys(result).filter((key) => !!result[key]).length === 0\n          );\n        }\n      }\n\n      return true;\n    },\n    [options, updateErrors],\n  );\n\n  const validateField = useCallback(\n    (fieldName: string, newRowData: T) => {\n      setTouched((prev) => {\n        if (!prev[fieldName]) {\n          return { ...prev, [fieldName]: true };\n        }\n        return prev;\n      });\n      validate(newRowData, false);\n    },\n    [validate],\n  );\n\n  return {\n    errors: outerError || errors,\n    errorControlled: !!outerError,\n    touched: outTouched || touched,\n    validate,\n    validateField,\n  };\n}\n\nconst EditingBodyRowContainer = createContainer(useEditingBodyRow);\n\nexport default EditingBodyRowContainer;\n","export enum RowType {\n  Body,\n  Head,\n  ColGroup,\n}\n\nexport const EMPTY_ROW_INFO = '暂无数据';\n"],"sourceRoot":""}
{"version":3,"sources":["D:/workspaces/editable-data-table/src/useEditingList.ts","D:/workspaces/editable-data-table/docs/index.mdx","D:/workspaces/editable-data-table/src/Table.tsx","D:/workspaces/editable-data-table/src/EmptyDataTableRow.tsx","D:/workspaces/editable-data-table/src/DataTableColGroup.tsx","D:/workspaces/editable-data-table/src/DataTableHead.tsx","D:/workspaces/editable-data-table/src/DataTableBodyRow.tsx","D:/workspaces/editable-data-table/src/DataTableBody.tsx","D:/workspaces/editable-data-table/src/EditableDataTable.tsx","D:/workspaces/editable-data-table/src/DataTableCellEditor.tsx","D:/workspaces/editable-data-table/src/DataTableBodyCell.tsx","D:/workspaces/editable-data-table/src/DataTableHeadCell.tsx","D:/workspaces/editable-data-table/src/TableColumn.tsx","D:/workspaces/editable-data-table/src/shared/DataTableRowContext.ts","D:/workspaces/editable-data-table/src/shared/EditableDataTableContext.ts","D:/workspaces/editable-data-table/src/shared/EditingBodyRowContainer.ts","D:/workspaces/editable-data-table/src/shared/constants.ts"],"names":["useEditingList","url","defaultValue","arguments","length","undefined","_ref$idPropertyName","idPropertyName","_useRestListApi","useRestListApi","items","setItems","remove","removeItemAt","update","save","isLoading","addItem","_useState","useState","map","_useState2","Object","slicedToArray","editingRows","setEditingRows","itemsCount","useEffect","prev","Array","fill","asyncRemove","useCallback","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","row","index","wrap","_context","next","produce","draft","splice","t0","stop","_x","_x2","apply","this","asyncUpdate","_ref3","_callee2","result","_context2","sent","_x3","_x4","edit","add","concat","toConsumableArray","layoutProps","MDXLayout","MDXContent","_ref","components","props","objectWithoutProperties","index_es","assign","mdxType","id","parentName","className","href","index_esm","__position","__code","__scope","useMemo","Playground","Props","TableColumn","EditableDataTable","Button","TextInput","data","firstName","lastName","title","name","render","value","editor","validate","rowData","errors","startsWith","_useState3","_useState4","react_default","Fragment","onClick","order","context","editing","autoWidth","alert","handleSave","handleEdit","removeByIndex","handleRemove","_useEditingList","then","_useState5","_useState6","setData","filter","_item","i","renderButtons","columns","isMDXComponent","captionTypeStyle","css","_templateObject","theme","typography","body1","fontSize","fontFamily","fontWeightMedium","color","bodyTypeStyle","_templateObject2","fontWeight","dataTableCellStyle","_templateObject3","palette","type","rowBgColor","light","tableRowSelected","tableRowHover","dark","StyledTable","styled","Table","_templateObject4","primary","caption","Wrapper","div","EmptyDataTableRow_templateObject","EmptyDataTableRow","children","createElement","data-testid","RowType","ColGroup","DataTableColGroup","DataTableRowContext","Provider","DataTableHead","React","memo","Body","EditingBodyRowContainer","DataTableBody","_ref$editingRows","item","src_DataTableBodyRow","key","_props$data","_props$idPropertyName","_props$emptyTitle","emptyTitle","onRowChange","options","useRef","current","useEditableDataTable","src_Table","EditableDataTableContext","src_DataTableColGroup","src_DataTableHead","src_DataTableBody","src_EmptyDataTableRow","Editor","useContext","valueFromContext","setValue","_EditingBodyRowContai","useContainer","touched","validateField","handleChange","event","newValue","target","isChangeEvent","error","onChange","FormHelpText","MemoDataTableBodyCellInner","Error","src_DataTableCellEditor","DataTableBodyCell","state","DataTableHeadCell","classNames","align_center","width","Head","src_DataTableHeadCell","src_DataTableBodyCell","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_constants__WEBPACK_IMPORTED_MODULE_1__","createContext","createContainer","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","setTouched","setErrors","rowDataRef","newRowData","updateTouched","newTouched","keys","forEach","fieldName","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","d","__webpack_exports__"],"mappings":"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","file":"static/js/docs-index.2a0d0bbc.js","sourcesContent":["import useRestListApi from '@sinoui/use-rest-list-api';\nimport { useState, useEffect, useCallback } from 'react';\nimport { produce } from 'immer';\n\ninterface Options {\n  idPropertyName?: string;\n}\n\n/**\n * 维护可编辑列表的hook\n */\nexport default function useEditingList<T>(\n  url: string,\n  defaultValue: T[] = [],\n  options?: Options,\n) {\n  const { idPropertyName = 'id' } = options || {};\n  const {\n    items,\n    setItems,\n    remove,\n    removeItemAt,\n    update,\n    save,\n    isLoading,\n    addItem,\n  } = useRestListApi<T>(url, defaultValue);\n  const [editingRows, setEditingRows] = useState(() =>\n    defaultValue.map(() => false),\n  );\n\n  const itemsCount = items.length;\n  useEffect(() => {\n    setEditingRows((prev) => {\n      if (itemsCount !== prev.length) {\n        return new Array(itemsCount).fill(false);\n      }\n      return prev;\n    });\n  }, [isLoading, itemsCount]);\n\n  const add = () => {\n    setItems([...items, {}]);\n    setEditingRows([...editingRows, true]);\n  };\n\n  const asyncRemove = useCallback(\n    async (row: T, index: number) => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((row as any)[idPropertyName]) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          await remove((row as any)[idPropertyName]);\n          setEditingRows(\n            produce(editingRows, (draft) => {\n              draft.splice(index, 1);\n            }),\n          );\n        } else {\n          removeItemAt(index);\n          setEditingRows(\n            produce((draft) => {\n              draft.splice(index, 1);\n            }),\n          );\n        }\n      } catch (error) {\n        throw error;\n      }\n    },\n    [editingRows, idPropertyName, remove, removeItemAt],\n  );\n\n  const asyncUpdate = useCallback(\n    async (row: T, index: number) => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((row as any)[idPropertyName]) {\n          await update(row);\n        } else {\n          const result = await save(row, false);\n          removeItemAt(index);\n          addItem(result);\n        }\n\n        setEditingRows(\n          produce(editingRows, (draft) => {\n            draft[index] = false;\n          }),\n        );\n      } catch (error) {\n        throw error;\n      }\n    },\n    [addItem, editingRows, idPropertyName, removeItemAt, save, update],\n  );\n\n  const edit = useCallback((index: number) => {\n    setEditingRows(\n      produce(editingRows, (draft) => {\n        draft[index] = true;\n      }),\n    );\n  }, [editingRows]);\n\n  return {\n    items,\n    editingRows,\n    add,\n    remove: asyncRemove,\n    edit,\n    save: asyncUpdate,\n    idPropertyName,\n  };\n}\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { useState, useCallback, useMemo } from 'react';\nimport { Playground, Props } from 'docz';\nimport TableColumn from '../src/TableColumn';\nimport EditableDataTable from '../src/EditableDataTable';\nimport useEditingList from '../src/useEditingList';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport produce from 'immer';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"可编辑表格\"\n    }}>{`可编辑表格`}</h1>\n    <p>{`安装：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinouiincubator/editable-data-table\n`}</code></pre>\n    <p>{`引用：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n`}</code></pre>\n    <p>{`源码路径：`}<a parentName=\"p\" {...{\n        \"href\": \"https://sinouiincubator.github.io/editable-data-table\"\n      }}>{`https://sinouiincubator.github.io/editable-data-table`}</a>{`。`}</p>\n    <p>{`可编辑列表（`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`）提供以下功能：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`展现列表数据（不支持分页，但是可以与分页功能组合使用）`}</li>\n      <li parentName=\"ul\">{`编辑数据行`}</li>\n      <li parentName=\"ul\">{`校验数据行`}</li>\n    </ul>\n    <p>{`我们可以基于可编辑表格做列表数据的增删改查。下面我们通过例子来了解基本用法。`}</p>\n    <h2 {...{\n      \"id\": \"展现列表数据\"\n    }}>{`展现列表数据`}</h2>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`可以用来展现列表数据，可以通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`定义列表的列信息：列标题、列单元格数据渲染逻辑、宽度等。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const users = [\n    {\n      id: '1',\n      firstName: 'Jacking',\n      lastName: 'Liu',\n      title: 'developer',\n    },\n    {\n      id: '2',\n      firstName: 'Zinuo',\n      lastName: 'Tian',\n      title: 'developer',\n    },\n  ];\n\n  return (\n    <EditableDataTable data={users}>\n      <TableColumn title=\"id\" name=\"id\" />\n      <TableColumn\n        title=\"姓名\"\n        render={(value, row) => \\`\\${row.firstName} \\${row.lastName}\\`}\n      />\n      <TableColumn title=\"标题\" name=\"title\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      firstName: \\'Jacking\\',\\n      lastName: \\'Liu\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      firstName: \\'Zinuo\\',\\n      lastName: \\'Tian\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n  return (\\n    <EditableDataTable data={users}>\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n      <TableColumn\\n        title=\\\"姓名\\\"\\n        render={(value, row) => `${row.firstName} ${row.lastName}`}\\n      />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const users = [{\n          id: '1',\n          firstName: 'Jacking',\n          lastName: 'Liu',\n          title: 'developer'\n        }, {\n          id: '2',\n          firstName: 'Zinuo',\n          lastName: 'Tian',\n          title: 'developer'\n        }];\n        return <EditableDataTable data={users} mdxType=\"EditableDataTable\">\n        <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"姓名\" render={(value, row) => `${row.firstName} ${row.lastName}`} mdxType=\"TableColumn\" />\n        <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n      </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"编辑数据行\"\n    }}>{`编辑数据行`}</h2>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`组件通过`}<inlineCode parentName=\"p\">{`editingRows`}</inlineCode>{`接收数据行是否处于编辑状态的数据。这是一个与`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`数组等长的布尔数组，`}<inlineCode parentName=\"p\">{`editingRows`}</inlineCode>{`数组的每一项与`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`数组一一对应，`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`表示编辑状态、`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`表示非编辑状态。`}</p>\n    <p>{`可以通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`组件的`}<inlineCode parentName=\"p\">{`editor`}</inlineCode>{`属性指定单元格的编辑器。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const users = [\n    {\n      id: '1',\n      name: 'Jacking',\n      title: 'developer',\n    },\n    {\n      id: '2',\n      name: 'zinuo',\n      title: 'developer',\n    },\n  ];\n\n  const editingRows = [false, true]; // 第二行数据是编辑状态\n\n  return (\n    <EditableDataTable data={users} editingRows={editingRows}>\n      <TableColumn title=\"id\" name=\"id\" editor=\"input\" />\n      <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" />\n      <TableColumn title=\"标题\" name=\"title\" editor=\"input\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable data={users} editingRows={editingRows}>\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor=\\\"input\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor=\"input\" mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"校验数据行\"\n    }}>{`校验数据行`}</h2>\n    <p>{`可以通过`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`属性指定行数据的校验，这是一个方法，方法返回验证错误的结果。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function validate(rowData) {\n  const errors = {};\n\n  if (!rowData.id) {\n    errors.id = '必填';\n  }\n\n  if (!rowData.name) {\n    errors.name = '必填';\n  }\n\n  if (rowData.title && rowData.title.startsWith('1')) {\n    errors.title = '不能以1开头';\n  }\n\n  return errors;\n}\n`}</code></pre>\n    <p>{`这个方法运行的结果类似如下面：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  id: '必填',\n  title: '不能以1开头'\n}\n`}</code></pre>\n    <p>{`这个键值对数据，键表示有验证错误的字段名（表单域名称），值表示字段名对应的验证错误。`}</p>\n    <p>{`看看效果：`}</p>\n    <Playground __position={2} __code={'() => {\\n  function validate(rowData) {\\n    const errors = {}\\n    if (!rowData.id) {\\n      errors.id = \\'必填\\'\\n    }\\n\\n    if (!rowData.name) {\\n      errors.name = \\'必填\\'\\n    }\\n\\n    if (rowData.title && rowData.title.startsWith(\\'1\\')) {\\n      errors.title = \\'不能以1开头\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable\\n      data={users}\\n      editingRows={editingRows}\\n      validate={validate}\\n    >\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor=\\\"input\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(rowData) {\n          const errors = {};\n\n          if (!rowData.id) {\n            errors.id = '必填';\n          }\n\n          if (!rowData.name) {\n            errors.name = '必填';\n          }\n\n          if (rowData.title && rowData.title.startsWith('1')) {\n            errors.title = '不能以1开头';\n          }\n\n          return errors;\n        }\n\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor=\"input\" mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"增删改查\"\n    }}>{`增删改查`}</h2>\n    <p>{`可以基于`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`实现增删改查。看看下面一个与后端 API 无法的增删改查示例：`}</p>\n    <Playground __position={3} __code={'() => {\\n  const validate = data => {\\n    const result = {}\\n    if (!data.id) {\\n      result.id = \\'必填\\'\\n    }\\n    if (data.title && data.title.startsWith(\\'1\\')) {\\n      result.title = \\'标题不能以1开头\\'\\n    }\\n    return result\\n  }\\n  const [editingRows, setEditingRows] = useState([true, false])\\n  const [items, setItems] = useState([\\n    { id: \\'1\\', title: \\'123\\' },\\n    { id: \\'2\\', title: \\'1234\\' },\\n  ])\\n\\n  const handleSave = (row, index, context) => {\\n    if (!context.validate()) {\\n      alert(\\'数据填写不完整\\')\\n    } else {\\n      setEditingRows(\\n        produce(editingRows, draft => {\\n          draft[index] = false\\n        }),\\n      )\\n      alert(\\'保存成功\\')\\n    }\\n  }\\n\\n  const handleEdit = index => {\\n    setEditingRows(\\n      produce(editingRows, draft => {\\n        draft[index] = true\\n      }),\\n    )\\n  }\\n\\n  const handleRemove = index => {\\n    const removeByIndex = produce(draft => {\\n      draft.splice(index, 1)\\n    })\\n    setEditingRows(removeByIndex)\\n    setItems(removeByIndex)\\n  }\\n\\n  const handleAdd = () => {\\n    setEditingRows([...editingRows, true])\\n    setItems([...items, {}])\\n  }\\n\\n  return (\\n    <>\\n      <Button onClick={handleAdd}>新增</Button>\\n      <EditableDataTable\\n        data={items}\\n        editingRows={editingRows}\\n        validate={validate}\\n      >\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor={TextInput} />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(value, row, index, id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button\\n                  autoWidth\\n                  onClick={() => handleSave(row, index, context)}\\n                >\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => handleEdit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => handleRemove(index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = data => {\n          const result = {};\n\n          if (!data.id) {\n            result.id = '必填';\n          }\n\n          if (data.title && data.title.startsWith('1')) {\n            result.title = '标题不能以1开头';\n          }\n\n          return result;\n        };\n\n        const [editingRows, setEditingRows] = useState([true, false]);\n        const [items, setItems] = useState([{\n          id: '1',\n          title: '123'\n        }, {\n          id: '2',\n          title: '1234'\n        }]);\n\n        const handleSave = (row, index, context) => {\n          if (!context.validate()) {\n            alert('数据填写不完整');\n          } else {\n            setEditingRows(produce(editingRows, draft => {\n              draft[index] = false;\n            }));\n            alert('保存成功');\n          }\n        };\n\n        const handleEdit = index => {\n          setEditingRows(produce(editingRows, draft => {\n            draft[index] = true;\n          }));\n        };\n\n        const handleRemove = index => {\n          const removeByIndex = produce(draft => {\n            draft.splice(index, 1);\n          });\n          setEditingRows(removeByIndex);\n          setItems(removeByIndex);\n        };\n\n        const handleAdd = () => {\n          setEditingRows([...editingRows, true]);\n          setItems([...items, {}]);\n        };\n\n        return <>\n  <Button onClick={handleAdd} mdxType=\"Button\">新增</Button>\n  <EditableDataTable data={items} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n    <TableColumn title=\"id\" name=\"id\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"操作\" name=\"id\" render={(value, row, index, id, context) => <>\n        {context.editing ? <Button autoWidth onClick={() => handleSave(row, index, context)} mdxType=\"Button\">保存</Button> : <Button autoWidth onClick={() => handleEdit(index)} mdxType=\"Button\">编辑</Button>}\n        <Button autoWidth onClick={() => handleRemove(index)} mdxType=\"Button\">删除</Button>\n      </>} mdxType=\"TableColumn\" />\n  </EditableDataTable>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"使用-useeditinglist\"\n    }}>{`使用 useEditingList`}</h2>\n    <p>{`可以使用 useEditingList 简化增删改查场景的开发：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`内置`}<inlineCode parentName=\"li\">{`editingRows`}</inlineCode>{`和`}<inlineCode parentName=\"li\">{`items`}</inlineCode>{`两个状态和变更方法。`}</li>\n      <li parentName=\"ul\">{`集成了`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/sinoui/use-rest-list-api\"\n        }}>{`@sinoui/use-rest-list-api`}</a>{`，与后端 API 做增删改查交互。`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  useEiditingList,\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\n\nfunction validate(data) {\n  const result = {};\n  if (!data.id) {\n    result.id = '必填';\n  }\n  if (data.title && data.title.startsWith('1')) {\n    result.title = '标题不能以1开头';\n  }\n  return result;\n}\n\nfunction Demo() {\n  const {\n    items,\n    add,\n    edit,\n    save,\n    remove,\n    idPropertyName,\n    editingRows,\n  } = useEditingList('/api/tests', []);\n\n  const handleSave = (row, index, context) => {\n    if (!context.validate()) {\n      alert('数据填写不完整');\n    } else {\n      save(row, index);\n      alert('保存成功');\n    }\n  };\n\n  return (\n    <>\n      <Button onClick={add}>新增</Button>\n      <EditableDataTable\n        data={items}\n        editingRows={editingRows}\n        validate={validate}\n        idPropertyName={idPropertyName}\n      >\n        <TableColumn title=\"序号\" order />\n        <TableColumn title=\"标题\" name=\"title\" editor={TextInput} />\n        <TableColumn title=\"备注\" name=\"note\" editor={TextInput} />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(value, row, index, id, context) => (\n            <>\n              {context.editing ? (\n                <Button\n                  autoWidth\n                  onClick={() => handleSave(row, index, context)}\n                >\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button autoWidth onClick={() => remove(row, index)}>\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`示例：`}</p>\n    <Playground __position={4} __code={'() => {\\n  const validate = data => {\\n    const result = {}\\n\\n    if (data.title && data.title.startsWith(\\'1\\')) {\\n      result.title = \\'标题不能以1开头\\'\\n    }\\n    return result\\n  }\\n  const {\\n    items,\\n    add,\\n    edit,\\n    save,\\n    remove,\\n    idPropertyName,\\n    editingRows,\\n  } = useEditingList(\\'/api/tests\\', [])\\n\\n  const handleSave = (row, index, context) => {\\n    if (!context.validate()) {\\n      alert(\\'数据填写不完整\\')\\n    } else {\\n      save(row, index).then(\\n        () => {\\n          alert(\\'保存成功\\')\\n        },\\n        () => {\\n          alert(\\'保存失败\\')\\n        },\\n      )\\n    }\\n  }\\n\\n  return (\\n    <>\\n      <Button onClick={add}>新增</Button>\\n      <EditableDataTable\\n        data={items}\\n        editingRows={editingRows}\\n        validate={validate}\\n        idPropertyName={idPropertyName}\\n      >\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn title=\\\"备注\\\" name=\\\"note\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(value, row, index, id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button\\n                  autoWidth\\n                  onClick={() => handleSave(row, index, context)}\\n                >\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => edit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => remove(row, index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = data => {\n          const result = {};\n\n          if (data.title && data.title.startsWith('1')) {\n            result.title = '标题不能以1开头';\n          }\n\n          return result;\n        };\n\n        const {\n          items,\n          add,\n          edit,\n          save,\n          remove,\n          idPropertyName,\n          editingRows\n        } = useEditingList('/api/tests', []);\n\n        const handleSave = (row, index, context) => {\n          if (!context.validate()) {\n            alert('数据填写不完整');\n          } else {\n            save(row, index).then(() => {\n              alert('保存成功');\n            }, () => {\n              alert('保存失败');\n            });\n          }\n        };\n\n        return <>\n  <Button onClick={add} mdxType=\"Button\">新增</Button>\n  <EditableDataTable data={items} editingRows={editingRows} validate={validate} idPropertyName={idPropertyName} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"备注\" name=\"note\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"操作\" name=\"id\" render={(value, row, index, id, context) => <>\n          {context.editing ? <Button autoWidth onClick={() => handleSave(row, index, context)} mdxType=\"Button\">\n              保存\n            </Button> : <Button autoWidth onClick={() => edit(index)} mdxType=\"Button\">\n              编辑\n            </Button>}\n          <Button autoWidth onClick={() => remove(row, index)} mdxType=\"Button\">\n            删除\n          </Button>\n        </>} mdxType=\"TableColumn\" />\n  </EditableDataTable>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"优化版本\"\n    }}>{`优化版本`}</h2>\n    <Playground __position={5} __code={'() => {\\n  const [data, setData] = useState([\\n    { id: \\'1\\', title: \\'123\\' },\\n    { id: \\'2\\', title: \\'1234\\' },\\n  ])\\n  const handleAdd = () => {\\n    setData([\\n      ...data,\\n      { id: data.length + 1, title: `标题${data.length + 1}` },\\n    ])\\n  }\\n  const handleRemove = useCallback(index => {\\n    setData(prev => prev.filter((_item, i) => i !== index))\\n  }, [])\\n\\n  const renderButtons = useCallback(\\n    (id, row, index) => (\\n      <Button onClick={() => handleRemove(index)}>删除</Button>\\n    ),\\n    [handleRemove],\\n  )\\n\\n  const columns = useMemo(\\n    () => (\\n      <>\\n        <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n        <TableColumn title=\\\"操作列\\\" name=\\\"id\\\" />\\n        <TableColumn title=\\\"操作\\\" name=\\\"id\\\" render={renderButtons} />\\n      </>\\n    ),\\n    [handleRemove],\\n  )\\n\\n  return (\\n    <div>\\n      <Button onClick={handleAdd}>添加</Button>\\n      <EditableDataTable data={data}>{columns}</EditableDataTable>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const [data, setData] = useState([{\n          id: '1',\n          title: '123'\n        }, {\n          id: '2',\n          title: '1234'\n        }]);\n\n        const handleAdd = () => {\n          setData([...data, {\n            id: data.length + 1,\n            title: `标题${data.length + 1}`\n          }]);\n        };\n\n        const handleRemove = useCallback(index => {\n          setData(prev => prev.filter((_item, i) => i !== index));\n        }, []);\n        const renderButtons = useCallback((id, row, index) => <Button onClick={() => handleRemove(index)} mdxType=\"Button\">删除</Button>, [handleRemove]);\n        const columns = useMemo(() => <>\n  <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n  <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n  <TableColumn title=\"操作列\" name=\"id\" mdxType=\"TableColumn\" />\n  <TableColumn title=\"操作\" name=\"id\" render={renderButtons} mdxType=\"TableColumn\" />\n        </>, [handleRemove]);\n        return <div>\n      <Button onClick={handleAdd} mdxType=\"Button\">添加</Button>\n      <EditableDataTable data={data} mdxType=\"EditableDataTable\">\n      {columns}\n      </EditableDataTable>\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"无数据\"\n    }}>{`无数据`}</h2>\n    <Playground __position={6} __code={'<EditableDataTable data={[]}>\\n  <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n  <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n</EditableDataTable>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  <EditableDataTable data={[]} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n  </EditableDataTable>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import styled, { css } from 'sinoui-components/styles';\nimport Table from 'sinoui-components/Table';\n\nconst captionTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.fontWeightMedium};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst bodyTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.body1.fontWeight};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst dataTableCellStyle = css`\n  padding: 0;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-bottom: 1px solid\n    ${(props) =>\n      props.theme.palette.type === 'light'\n        ? 'rgba(224, 224, 224, 1)'\n        : 'rgba(80, 80, 80, 1)'};\n`;\n\nconst rowBgColor = {\n  light: {\n    tableRowSelected: 'rgba(0, 0, 0, 0.04)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(0, 0, 0, 0.07)', // 表格行hover时的背景色\n  },\n  dark: {\n    tableRowSelected: 'rgba(255, 255, 255, 0.08)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(255, 255, 255, 0.14)', // 表格行hover时的背景色\n  },\n};\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n  border-top: 1px solid rgba(224, 224, 224, 1);\n  & .sinoui-data-table-head {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    background-color: ${(props) =>\n      props.theme.palette.type === 'light'\n        ? props.theme.palette.primary[50]\n        : props.theme.palette.primary[200]};\n    text-align: left;\n    vertical-align: middle;\n  }\n\n  .sinoui-checkbox-button {\n    margin: 14px;\n  }\n\n  & .sinoui-data-table-head.numeric,\n  .sinoui-data-table-body-td.numeric {\n    text-align: right;\n    flex-direction: row-reverse;\n  }\n\n  & .sinoui-data-table-head.align_center,\n  .sinoui-data-table-body-td.align_center {\n    text-align: center;\n  }\n\n  & .sinoui-data-table-head.checkbox,\n  .sinoui-data-table-body-td.checkbox {\n    padding: 0;\n    width: 48px;\n  }\n\n  & .sinoui-data-table-head.extraInfo,\n  .sinoui-data-table-body-td.extraInfo {\n    padding: 0;\n    width: 60px;\n  }\n\n  & .sinoui-data-table-head:last-child,\n  .sinoui-data-table-body-td:last-child {\n    padding-right: 24px;\n  }\n\n  & .sinoui-data-table-footer {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    padding-left: 24px;\n    padding-right: 12px;\n  }\n\n  & .sinoui-data-table-body-cell-no-data {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    padding: 64px;\n    text-align: center;\n    color: ${(props) => props.theme.typography.caption.color};\n  }\n\n  & .sinoui-data-table-body-td {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    text-align: left;\n    vertical-align: middle;\n    word-wrap: break-word;\n    word-break: break-all;\n  }\n\n  & .sinoui-data-table-head-row {\n    height: 48px;\n  }\n\n  & .sinoui-data-table-footer-row,\n  .sinoui-data-table-body-row-no-data {\n    height: 56px;\n    background-color: transparent;\n  }\n\n  & .sinoui-data-table-body-row {\n    height: 48px;\n    background-color: transparent;\n\n    &:hover {\n      background-color: ${(props) =>\n        rowBgColor[props.theme.palette.type].tableRowHover};\n    }\n  }\n\n  & .sinoui-data-table-body-row.selected {\n    background-color: ${(props) =>\n      rowBgColor[props.theme.palette.type].tableRowSelected};\n  }\n`;\n\nexport default StyledTable;\n","import React from 'react';\nimport styled from 'sinoui-components/styles';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  padding: 32px 8px;\n`;\n\n/**\n * 表格空数据时显示的行\n */\nconst EmptyDataTableRow: React.SFC = (props) => {\n  const { children } = props;\n  return (\n    <Wrapper className=\"sinoui-data-table-info\" data-testid=\"emptyInfo\">\n      {children}\n    </Wrapper>\n  );\n};\n\nexport default EmptyDataTableRow;\n","import React from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext from './shared/DataTableRowContext';\n\nconst context: { type: RowType.ColGroup } = {\n  type: RowType.ColGroup,\n};\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nfunction DataTableColGroup(props: Props) {\n  const { children } = props;\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <colgroup data-testid=\"colgroup\">{children}</colgroup>\n    </DataTableRowContext.Provider>\n  );\n}\n\nexport default DataTableColGroup;\n","import React from 'react';\n\n/**\n * 数据表头\n */\nconst DataTableHead: React.SFC = function TableHead({ children }) {\n  return (\n    <thead>\n      <tr className=\"sinoui-data-table-head-row\" data-testid=\"tableHead\">\n        {children}\n      </tr>\n    </thead>\n  );\n};\n\nexport default DataTableHead;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props<T> {\n  /**\n   * 此行数据\n   */\n  data: T;\n  /**\n   * 数据序号\n   */\n  index: number;\n  /**\n   * 单元格子组件\n   */\n  children: React.ReactNode;\n\n  /**\n   * 是否处于编辑状态\n   */\n  editing?: boolean;\n}\n\ntype CompType<T = any> = React.SFC<Props<T>>;\n\n/**\n * 内容行\n */\nconst DataTableBodyRow: CompType = (props) => {\n  const { data, index, children, editing } = props;\n  const context: BodyRowContextType<any> = useMemo(\n    () => ({ type: RowType.Body, data, index, editing: !!editing }),\n    [data, index, editing],\n  );\n\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <EditingBodyRowContainer.Provider>\n        <tr className=\"sinoui-data-table-body-row\" data-testid=\"bodyRow\">\n          {children}\n        </tr>\n      </EditingBodyRowContainer.Provider>\n    </DataTableRowContext.Provider>\n  );\n};\n\nexport default React.memo(DataTableBodyRow);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport DataTableBodyRow from './DataTableBodyRow';\n\n/**\n * 数据表格内容组件\n */\nconst DataTableBody: React.SFC<{\n  data?: any[];\n  idPropertyName: string;\n  editingRows?: boolean[];\n}> = function DataTableBody({\n  idPropertyName,\n  data,\n  children,\n  editingRows = [],\n}) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n  return (\n    <tbody>\n      {data.map((item, index) => (\n        <DataTableBodyRow\n          key={item[idPropertyName] || `index_${index}`}\n          data={item}\n          index={index}\n          data-testid=\"tableBody\"\n          editing={editingRows[index]}\n        >\n          {children}\n        </DataTableBodyRow>\n      ))}\n    </tbody>\n  );\n};\n\nexport default DataTableBody;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo, useRef, useEffect } from 'react';\nimport Table from './Table';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EmptyDataTableRow from './EmptyDataTableRow';\nimport DataTableColGroup from './DataTableColGroup';\nimport DataTableHead from './DataTableHead';\nimport DataTableBody from './DataTableBody';\n\nexport interface Props<T> {\n  /**\n   * 列表数据\n   */\n  data?: T[];\n  /**\n   * 处于编辑状态的行。`editingRows`数组需要与`data`数组保持一一对应的关系，`editingRows`数组中每一个数据项代表的是`data`数组中对应数据项的编辑状态，`true`表示编辑状态，`false`表示非编辑状态。\n   */\n  editingRows?: boolean[];\n\n  /**\n   * 子节点，一组TableColumn。使用TableColumn指表格列信息。\n   */\n  children: React.ReactNode;\n  /**\n   * 数据的id属性名。默认为'id'。\n   */\n  idPropertyName?: string;\n  /**\n   * 无数据时的提示信息。默认为“暂无数据”。\n   */\n  emptyTitle?: React.ReactNode;\n\n  /**\n   * 监听行数据发生变化的事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onRowChange?: (index: number, rowData: T) => void;\n\n  /**\n   * 给正在编辑的行添加校验规则。\n   * \n   * 返回错误提示：\n   * \n   * ```js\n     {\n       'title': '不能为空',\n       'name': '不能少于三个字'\n     }\n   * ```\n   *\n   * 上面的错误信息表示字段`title`和`name`校验失败。\n   * \n   * 如果数据行没有错误，则返回`{}`或者`undefined`。\n   */\n  validate?: (rowData: T) => { [x: string]: string } | undefined;\n}\n\nfunction useEditableDataTable<T>({\n  idPropertyName = 'id',\n  onRowChange,\n  validate,\n}: Props<T>) {\n  const options = useRef({\n    onRowChange,\n    validate,\n  });\n\n  useEffect(() => {\n    options.current.onRowChange = onRowChange;\n    options.current.validate = validate;\n  }, [onRowChange, validate]);\n\n  const context = useMemo(\n    () => ({ idPropertyName, options: options.current }),\n    [idPropertyName],\n  );\n\n  return context;\n}\n\n/**\n * 可编辑表格\n */\nfunction EditableDataTable<T>(props: Props<T>) {\n  const {\n    data = [],\n    idPropertyName = 'id',\n    children,\n    emptyTitle = '暂无数据',\n    editingRows,\n  } = props;\n  const context = useEditableDataTable(props);\n  return (\n    <>\n      <Table>\n        <EditableDataTableContext.Provider value={context}>\n          <DataTableColGroup>{children}</DataTableColGroup>\n          <DataTableHead>{children}</DataTableHead>\n          <DataTableBody\n            data={data}\n            idPropertyName={idPropertyName}\n            editingRows={editingRows}\n          >\n            {children}\n          </DataTableBody>\n        </EditableDataTableContext.Provider>\n      </Table>\n      {(!data || data.length === 0) && (\n        <EmptyDataTableRow>{emptyTitle}</EmptyDataTableRow>\n      )}\n    </>\n  );\n}\n\nexport default EditableDataTable;\n","import React, { useState, useContext, useCallback, useMemo } from 'react';\nimport FormHelpText from 'sinoui-components/Form/FormHelpText';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props {\n  editor: React.ReactType;\n  name: string;\n}\n\nfunction isChangeEvent(\n  event?: React.ChangeEvent<HTMLInputElement> | string,\n): event is React.ChangeEvent<HTMLInputElement> {\n  return !!(event && (event as React.ChangeEvent<HTMLInputElement>).target);\n}\n\n/**\n * 单元格编辑器\n */\nfunction DataTableCellEditor(props: Props) {\n  const { name, editor: Editor } = props;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { data, index } = useContext(DataTableRowContext) as BodyRowContextType<\n    any\n  >;\n  const valueFromContext = data[name];\n  const [, setValue] = useState(valueFromContext);\n  const { options } = useContext(EditableDataTableContext);\n  const {\n    touched,\n    errors,\n    validateField,\n  } = EditingBodyRowContainer.useContainer();\n\n  const handleChange = useCallback(\n    (event?: React.ChangeEvent<HTMLInputElement> | string) => {\n      const newValue = isChangeEvent(event) ? event.target.value : event;\n      setValue(newValue);\n\n      data[name] = newValue;\n\n      if (options.onRowChange) {\n        options.onRowChange(index, data);\n      }\n      validateField(name, data);\n    },\n    [data, name, options, index, validateField],\n  );\n\n  const isTouched = touched[name];\n  const error = isTouched ? errors[name] : undefined;\n\n  const element = useMemo(\n    () => (\n      <>\n        <Editor\n          name={name}\n          value={valueFromContext}\n          item={data}\n          onChange={handleChange}\n          error={!!error}\n        />\n        {error && <FormHelpText error>{error}</FormHelpText>}\n      </>\n    ),\n    [data, error, handleChange, name, valueFromContext],\n  );\n\n  return element;\n}\n\nexport default React.memo(DataTableCellEditor);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport DataTableCellEditor from './DataTableCellEditor';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface CellState<T> {\n  data: T;\n  index: number;\n  editing: boolean;\n  errors?: { [x: string]: any };\n  validate: (rowData?: T) => boolean;\n  idPropertyName: string;\n}\n\ninterface DataCellProps<T, CellDataType> {\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n  /**\n   * 数据列名称\n   */\n  name?: string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\nfunction useCellState<T>(): CellState<T> {\n  const { data, index, editing } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<any>;\n  const { validate } = EditingBodyRowContainer.useContainer();\n  const { idPropertyName } = useContext(EditableDataTableContext);\n\n  return {\n    data,\n    index,\n    editing,\n    idPropertyName,\n    validate,\n  };\n}\n\n/**\n * 数据单元格\n */\nfunction DataTableBodyCellInner(\n  props: DataCellProps<any, any> & CellState<any>,\n) {\n  const {\n    order,\n    render,\n    name,\n    editor,\n    index,\n    editing,\n    data,\n    idPropertyName,\n    validate,\n  } = props;\n\n  if (order) {\n    return (\n      <td className=\"sinoui-data-table-body-td align_center\">{index + 1}</td>\n    );\n  }\n\n  if (editing && editor) {\n    if (!name) {\n      throw new Error(`没有给TableColumn指定name属性`);\n    }\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        <DataTableCellEditor name={name} editor={editor} />\n      </td>\n    );\n  }\n\n  if (render) {\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        {render(\n          name ? data[name] : undefined,\n          data,\n          index,\n          data[idPropertyName],\n          {\n            editing,\n            validate,\n          },\n        )}\n      </td>\n    );\n  }\n\n  return name ? (\n    <td className=\"sinoui-data-table-body-td\">{data[name]}</td>\n  ) : null;\n}\n\nconst MemoDataTableBodyCellInner = React.memo(DataTableBodyCellInner);\n\nfunction DataTableBodyCell<T = any, CellDataType = string>(\n  props: DataCellProps<T, CellDataType>,\n) {\n  const state = useCellState<any>();\n\n  return <MemoDataTableBodyCellInner {...props} {...state} />;\n}\n\nexport default DataTableBodyCell;\n","import React from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  order?: boolean;\n  title?: React.ReactNode;\n}\n\n/**\n * 表格头单元格\n */\nfunction DataTableHeadCell(props: Props) {\n  const { order, title } = props;\n  return (\n    <th\n      className={classNames('sinoui-data-table-head', {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        align_center: order,\n      })}\n    >\n      {title}\n    </th>\n  );\n}\n\nexport default DataTableHeadCell;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport DataTableRowContext from './shared/DataTableRowContext';\nimport DataTableBodyCell from './DataTableBodyCell';\nimport DataTableHeadCell from './DataTableHeadCell';\nimport { RowType } from './shared/constants';\n\nexport interface Props<T, CellDataType> {\n  /**\n   * 数据列名称\n   */\n  name?: string;\n  /**\n   * 标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n\n  /**\n   * 列宽度\n   */\n  width?: number | string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\n/**\n * 表格列\n */\nconst TableColumn: React.SFC<Props<any, any>> = React.memo(function TableColumn<\n  T,\n  CellDataType\n>(props: Props<T, CellDataType>) {\n  const { title, order, width } = props;\n  const { type } = useContext(DataTableRowContext);\n\n  switch (type) {\n    case RowType.Head:\n      return <DataTableHeadCell title={title} order={order} />;\n    case RowType.ColGroup:\n      return <col width={order ? 50 : width} />;\n    default:\n      return <DataTableBodyCell {...props} />;\n  }\n});\n\nexport default TableColumn;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport { RowType } from './constants';\n\nexport interface BodyRowContextType<T> {\n  type: RowType.Body;\n  data: T;\n  index: number;\n  /**\n   * 是否处于编辑状态\n   */\n  editing: boolean;\n}\n\nexport interface HeadRowContextType {\n  type: RowType.Head;\n}\n\nexport interface ColGroupContextType {\n  type: RowType.ColGroup;\n}\n\nexport type RowContextType<T = any> =\n  | BodyRowContextType<T>\n  | HeadRowContextType\n  | ColGroupContextType;\n\nconst DataTableRowContext = React.createContext<RowContextType>({\n  type: RowType.Head,\n});\n\nexport default DataTableRowContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\n\ninterface ContextType {\n  idPropertyName: string;\n  options: {\n    onRowChange?: (index: number, rowData: any) => void;\n    validate?: (rowData: any) => { [x: string]: string } | undefined;\n  };\n}\n\nconst EditableDataTableContext = React.createContext<ContextType>({\n  idPropertyName: 'id',\n  options: {},\n});\n\nexport default EditableDataTableContext;\n","import { useState, useCallback, useRef, useEffect, useContext } from 'react';\nimport { createContainer } from 'unstated-next';\nimport EditableDataTableContext from './EditableDataTableContext';\nimport DataTableRowContext, { BodyRowContextType } from './DataTableRowContext';\n\ninterface ContextType<T> {\n  /**\n   * 校验错误信息\n   */\n  errors: {\n    [x: string]: string;\n  };\n\n  /**\n   * 点击状态\n   */\n  touched: {\n    [x: string]: boolean;\n  };\n\n  /**\n   * 校验数据行\n   *\n   * 如果通过校验，则返回`true`，否则返回`false`。\n   */\n  validate: (newItem?: T) => boolean;\n\n  /**\n   * 校验表单域\n   */\n  validateField: (fieldName: string, newRowData: T) => void;\n}\n\n/**\n * 用于正在编辑的行数据的状态管理hook\n *\n * 主要维护的状态：\n *\n * * 表单校验\n * * 是否点击过的状态\n *\n */\nfunction useEditingBodyRow<T>(): ContextType<T> {\n  const { data: rowData } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<T>;\n  const [touched, setTouched] = useState<{ [x: string]: boolean }>({});\n  const [errors, setErrors] = useState({});\n  const rowDataRef = useRef(rowData);\n  const { options } = useContext(EditableDataTableContext);\n\n  useEffect(() => {\n    rowDataRef.current = rowData;\n  }, [rowData]);\n\n  const validate = useCallback(\n    (newRowData: T = rowDataRef.current, updateTouched: boolean = true) => {\n      if (options.validate) {\n        const result = options.validate(newRowData);\n        if (result) {\n          if (updateTouched) {\n            const newTouched: { [x: string]: boolean } = {};\n            Object.keys(result).forEach((key) => {\n              newTouched[key] = true;\n            });\n\n            setTouched(newTouched);\n          }\n\n          setErrors(result || {});\n\n          return (\n            Object.keys(result).filter((key) => !!result[key]).length === 0\n          );\n        }\n      }\n\n      return true;\n    },\n    [options],\n  );\n\n  const validateField = useCallback(\n    (fieldName: string, newRowData: T) => {\n      setTouched((prev) => {\n        if (!prev[fieldName]) {\n          return { ...prev, [fieldName]: true };\n        }\n        return prev;\n      });\n      validate(newRowData, false);\n    },\n    [validate],\n  );\n\n  return {\n    errors,\n    touched,\n    validate,\n    validateField,\n  };\n}\n\nconst EditingBodyRowContainer = createContainer(useEditingBodyRow);\n\nexport default EditingBodyRowContainer;\n","export enum RowType {\n  Body,\n  Head,\n  ColGroup,\n}\n\nexport const EMPTY_ROW_INFO = '暂无数据';\n"],"sourceRoot":""}
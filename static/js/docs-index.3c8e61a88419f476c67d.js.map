{"version":3,"sources":["webpack:///./docs/SelectRow.css?dcab","/Users/sinosoft/Documents/GitHub/editable-data-table/docs/index.mdx","/Users/sinosoft/Documents/GitHub/editable-data-table/docs/SelectRow.css","/Users/sinosoft/Documents/GitHub/editable-data-table/src/RowSelectColumn.tsx","/Users/sinosoft/Documents/GitHub/editable-data-table/src/useEditingList.ts"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__","assign","mdxType","id","parentName","className","href","docz__WEBPACK_IMPORTED_MODULE_5__","__position","__code","__scope","this","useState","useCallback","useMemo","Playground","Props","TableColumn","EditableDataTable","useEditingList","Button","TextInput","Confirm","produce","useSimpleEditingList","RowSelectColumn","_src_EditableDataTable__WEBPACK_IMPORTED_MODULE_7__","data","firstName","lastName","title","_src_TableColumn__WEBPACK_IMPORTED_MODULE_6__","name","render","value","row","concat","editingRows","editor","validate","rowData","errors","startsWith","_useState","_useState2","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","setEditingRows","_useState3","_useState4","items","setItems","react__WEBPACK_IMPORTED_MODULE_3___default","Fragment","sinoui_components_Button__WEBPACK_IMPORTED_MODULE_9__","onClick","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","result","order","index","context","editing","autoWidth","draft","alert","handleSave","handleEdit","removeByIndex","splice","handleRemove","_useSimpleEditingList","add","remove","edit","setReadonly","_value","_row","_id","_useEditingList","save","idPropertyName","then","_useSimpleEditingList2","note","alwaysEditing","selectedRows","isAllSelected","isContainsSelected","toggleAllSelected","toggleRowSelected","sinoui_components_Confirm__WEBPACK_IMPORTED_MODULE_11__","message","map","join","onOk","rowClassName","indexOf","_src_RowSelectColumn__WEBPACK_IMPORTED_MODULE_14__","isMDXComponent","push","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","sinoui_components_Checkbox__WEBPACK_IMPORTED_MODULE_1__","_TableColumn__WEBPACK_IMPORTED_MODULE_2__","_props$startIndex","startIndex","createElement","width","checked","indeterminate","onChange","url","defaultValue","arguments","length","_ref$keyName","keyName","_ref$alwaysEditing","_useRestListApi","useRestListApi","originItems","isLoading","isError","query","fetch","sortWith","reload","reset","searchParams","sorts","removeEditingItems","updateItem","rest","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_4__","useEffect","getItemId","item","asyncRemove","_ref2","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","mark","_callee","savedRowIds","wrap","_context","prev","next","Array","isArray","_ref3","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","filter","Boolean","_ref5","stop","_x","_x2","apply","asyncUpdate","_ref7","_callee2","newRow","_context2","sent","_x3","_x4","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"static/js/docs-index.c0e67a3d.js","sourcesContent":["\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./SelectRow.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./SelectRow.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./SelectRow.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { useState, useCallback, useMemo } from 'react';\nimport { Playground, Props } from 'docz';\nimport TableColumn from '../src/TableColumn';\nimport EditableDataTable from '../src/EditableDataTable';\nimport useEditingList from '../src/useEditingList';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport Confirm from 'sinoui-components/Confirm';\nimport produce from 'immer';\nimport useSimpleEditingList from '../src/useSimpleEditingList';\nimport RowSelectColumn from '../src/RowSelectColumn';\nimport './SelectRow.css';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"可编辑表格\"\n    }}>{`可编辑表格`}</h1>\n    <p>{`安装：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinouiincubator/editable-data-table\n`}</code></pre>\n    <p>{`引用：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n`}</code></pre>\n    <p>{`源码路径：`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sinouiincubator/editable-data-table\"\n      }}>{`https://github.com/sinouiincubator/editable-data-table`}</a>{`。`}</p>\n    <p>{`可编辑列表（`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`）提供以下功能：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`展现列表数据（不支持分页，但是可以与分页功能组合使用）`}</li>\n      <li parentName=\"ul\">{`编辑数据行`}</li>\n      <li parentName=\"ul\">{`校验数据行`}</li>\n    </ul>\n    <p>{`我们可以基于可编辑表格做列表数据的增删改查。下面我们通过例子来了解基本用法。`}</p>\n    <h2 {...{\n      \"id\": \"展现列表数据\"\n    }}>{`展现列表数据`}</h2>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`可以用来展现列表数据，可以通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`定义列表的列信息：列标题、列单元格数据渲染逻辑、宽度等。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const users = [\n    {\n      id: '1',\n      firstName: 'Jacking',\n      lastName: 'Liu',\n      title: 'developer',\n    },\n    {\n      id: '2',\n      firstName: 'Zinuo',\n      lastName: 'Tian',\n      title: 'developer',\n    },\n  ];\n\n  return (\n    <EditableDataTable data={users}>\n      <TableColumn title=\"id\" name=\"id\" />\n      <TableColumn\n        title=\"姓名\"\n        render={(value, row) => \\`\\${row.firstName} \\${row.lastName}\\`}\n      />\n      <TableColumn title=\"标题\" name=\"title\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      firstName: \\'Jacking\\',\\n      lastName: \\'Liu\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      firstName: \\'Zinuo\\',\\n      lastName: \\'Tian\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n  return (\\n    <EditableDataTable data={users}>\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n      <TableColumn\\n        title=\\\"姓名\\\"\\n        render={(value, row) => `${row.firstName} ${row.lastName}`}\\n      />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      Confirm,\n      produce,\n      useSimpleEditingList,\n      RowSelectColumn\n    }} mdxType=\"Playground\">\n  {() => {\n        const users = [{\n          id: '1',\n          firstName: 'Jacking',\n          lastName: 'Liu',\n          title: 'developer'\n        }, {\n          id: '2',\n          firstName: 'Zinuo',\n          lastName: 'Tian',\n          title: 'developer'\n        }];\n        return <EditableDataTable data={users} mdxType=\"EditableDataTable\">\n        <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"姓名\" render={(value, row) => `${row.firstName} ${row.lastName}`} mdxType=\"TableColumn\" />\n        <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n      </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"编辑数据行\"\n    }}>{`编辑数据行`}</h2>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`组件通过`}<inlineCode parentName=\"p\">{`editingRows`}</inlineCode>{`接收数据行是否处于编辑状态的数据。这是一个与`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`数组等长的布尔数组，`}<inlineCode parentName=\"p\">{`editingRows`}</inlineCode>{`数组的每一项与`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`数组一一对应，`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`表示编辑状态、`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`表示非编辑状态。`}</p>\n    <p>{`可以通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`组件的`}<inlineCode parentName=\"p\">{`editor`}</inlineCode>{`属性指定单元格的编辑器。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const users = [\n    {\n      id: '1',\n      name: 'Jacking',\n      title: 'developer',\n    },\n    {\n      id: '2',\n      name: 'zinuo',\n      title: 'developer',\n    },\n  ];\n\n  const editingRows = [false, true]; // 第二行数据是编辑状态\n\n  return (\n    <EditableDataTable data={users} editingRows={editingRows}>\n      <TableColumn title=\"id\" name=\"id\" editor=\"input\" />\n      <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" />\n      <TableColumn title=\"标题\" name=\"title\" editor=\"input\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable data={users} editingRows={editingRows}>\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor=\\\"input\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      Confirm,\n      produce,\n      useSimpleEditingList,\n      RowSelectColumn\n    }} mdxType=\"Playground\">\n  {() => {\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor=\"input\" mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"校验数据行\"\n    }}>{`校验数据行`}</h2>\n    <p>{`可以通过`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`属性指定行数据的校验，这是一个方法，方法返回验证错误的结果。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function validate(rowData) {\n  const errors = {};\n\n  if (!rowData.id) {\n    errors.id = '必填';\n  }\n\n  if (!rowData.name) {\n    errors.name = '必填';\n  }\n\n  if (rowData.title && rowData.title.startsWith('1')) {\n    errors.title = '不能以1开头';\n  }\n\n  return errors;\n}\n`}</code></pre>\n    <p>{`这个方法运行的结果类似如下面：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  id: '必填',\n  title: '不能以1开头'\n}\n`}</code></pre>\n    <p>{`这个键值对数据，键表示有验证错误的字段名（表单域名称），值表示字段名对应的验证错误。`}</p>\n    <p>{`看看效果：`}</p>\n    <Playground __position={2} __code={'() => {\\n  function validate(rowData) {\\n    const errors = {}\\n    if (!rowData.id) {\\n      errors.id = \\'必填\\'\\n    }\\n\\n    if (!rowData.name) {\\n      errors.name = \\'必填\\'\\n    }\\n\\n    if (rowData.title && rowData.title.startsWith(\\'1\\')) {\\n      errors.title = \\'不能以1开头\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable\\n      data={users}\\n      editingRows={editingRows}\\n      validate={validate}\\n    >\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor=\\\"input\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      Confirm,\n      produce,\n      useSimpleEditingList,\n      RowSelectColumn\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(rowData) {\n          const errors = {};\n\n          if (!rowData.id) {\n            errors.id = '必填';\n          }\n\n          if (!rowData.name) {\n            errors.name = '必填';\n          }\n\n          if (rowData.title && rowData.title.startsWith('1')) {\n            errors.title = '不能以1开头';\n          }\n\n          return errors;\n        }\n\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor=\"input\" mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"增删改查\"\n    }}>{`增删改查`}</h2>\n    <p>{`可以基于`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`实现增删改查。看看下面一个与后端 API 无法的增删改查示例：`}</p>\n    <Playground __position={3} __code={'() => {\\n  const validate = data => {\\n    const result = {}\\n    if (!data.id) {\\n      result.id = \\'必填\\'\\n    }\\n    if (data.title && data.title.startsWith(\\'1\\')) {\\n      result.title = \\'标题不能以1开头\\'\\n    }\\n    return result\\n  }\\n  const [editingRows, setEditingRows] = useState([true, false])\\n  const [items, setItems] = useState([\\n    { id: \\'1\\', title: \\'123\\' },\\n    { id: \\'2\\', title: \\'1234\\' },\\n  ])\\n\\n  const handleSave = (row, index, context) => {\\n    if (!context.validate()) {\\n      alert(\\'数据填写不完整\\')\\n    } else {\\n      setEditingRows(\\n        produce(editingRows, draft => {\\n          draft[index] = false\\n        }),\\n      )\\n      alert(\\'保存成功\\')\\n    }\\n  }\\n\\n  const handleEdit = index => {\\n    setEditingRows(\\n      produce(editingRows, draft => {\\n        draft[index] = true\\n      }),\\n    )\\n  }\\n\\n  const handleRemove = index => {\\n    const removeByIndex = produce(draft => {\\n      draft.splice(index, 1)\\n    })\\n    setEditingRows(removeByIndex)\\n    setItems(removeByIndex)\\n  }\\n\\n  const handleAdd = () => {\\n    setEditingRows([...editingRows, true])\\n    setItems([...items, {}])\\n  }\\n\\n  return (\\n    <>\\n      <Button onClick={handleAdd}>新增</Button>\\n      <EditableDataTable\\n        data={items}\\n        editingRows={editingRows}\\n        validate={validate}\\n      >\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor={TextInput} />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(value, row, index, id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button\\n                  autoWidth\\n                  onClick={() => handleSave(row, index, context)}\\n                >\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => handleEdit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => handleRemove(index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      Confirm,\n      produce,\n      useSimpleEditingList,\n      RowSelectColumn\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = data => {\n          const result = {};\n\n          if (!data.id) {\n            result.id = '必填';\n          }\n\n          if (data.title && data.title.startsWith('1')) {\n            result.title = '标题不能以1开头';\n          }\n\n          return result;\n        };\n\n        const [editingRows, setEditingRows] = useState([true, false]);\n        const [items, setItems] = useState([{\n          id: '1',\n          title: '123'\n        }, {\n          id: '2',\n          title: '1234'\n        }]);\n\n        const handleSave = (row, index, context) => {\n          if (!context.validate()) {\n            alert('数据填写不完整');\n          } else {\n            setEditingRows(produce(editingRows, draft => {\n              draft[index] = false;\n            }));\n            alert('保存成功');\n          }\n        };\n\n        const handleEdit = index => {\n          setEditingRows(produce(editingRows, draft => {\n            draft[index] = true;\n          }));\n        };\n\n        const handleRemove = index => {\n          const removeByIndex = produce(draft => {\n            draft.splice(index, 1);\n          });\n          setEditingRows(removeByIndex);\n          setItems(removeByIndex);\n        };\n\n        const handleAdd = () => {\n          setEditingRows([...editingRows, true]);\n          setItems([...items, {}]);\n        };\n\n        return <>\n  <Button onClick={handleAdd} mdxType=\"Button\">新增</Button>\n  <EditableDataTable data={items} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n    <TableColumn title=\"id\" name=\"id\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"操作\" name=\"id\" render={(value, row, index, id, context) => <>\n        {context.editing ? <Button autoWidth onClick={() => handleSave(row, index, context)} mdxType=\"Button\">保存</Button> : <Button autoWidth onClick={() => handleEdit(index)} mdxType=\"Button\">编辑</Button>}\n        <Button autoWidth onClick={() => handleRemove(index)} mdxType=\"Button\">删除</Button>\n      </>} mdxType=\"TableColumn\" />\n  </EditableDataTable>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"使用-usesimpleeditinglist\"\n    }}>{`使用 useSimpleEditingList`}</h2>\n    <p>{`使用其简化可编辑列表的开发，不与后端交互，但包含校验。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`只有使用`}<inlineCode parentName=\"li\">{`setItems`}</inlineCode>{`才能更换列表数据`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useSimpleEditingList(defaultItems)`}</inlineCode>{`只是指定默认数据`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  useEiditingList,\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\n\nfunction Demo() {\n  const {\n    items,\n    add,\n    remove,\n    edit,\n    editingRows,\n    setItems,\n    setReadonly,\n  } = useSimpleEditingList([]);\n\n  return (\n    <>\n      <Button onClick={() => add({})}>新增</Button>\n      <EditableDataTable data={items} editingRows={editingRows}>\n        <TableColumn title=\"序号\" order />\n        <TableColumn title=\"标题\" name=\"title\" editor={TextInput} />\n        <TableColumn title=\"备注\" name=\"note\" editor={TextInput} />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(value, row, index, id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => setReadonly(index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button autoWidth onClick={() => remove(index)}>\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`示例：`}</p>\n    <Playground __position={4} __code={'() => {\\n  const {\\n    items,\\n    add,\\n    remove,\\n    edit,\\n    editingRows,\\n    setReadonly,\\n  } = useSimpleEditingList([])\\n  return (\\n    <>\\n      <Button onClick={() => add({})}>新增</Button>\\n      <EditableDataTable data={items} editingRows={editingRows}>\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn title=\\\"备注\\\" name=\\\"note\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(_value, _row, index, _id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button autoWidth onClick={() => setReadonly(index)}>\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => edit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => remove(index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      Confirm,\n      produce,\n      useSimpleEditingList,\n      RowSelectColumn\n    }} mdxType=\"Playground\">\n  {() => {\n        const {\n          items,\n          add,\n          remove,\n          edit,\n          editingRows,\n          setReadonly\n        } = useSimpleEditingList([]);\n        return <>\n    <Button onClick={() => add({})} mdxType=\"Button\">新增</Button>\n    <EditableDataTable data={items} editingRows={editingRows} mdxType=\"EditableDataTable\">\n      <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n      <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n      <TableColumn title=\"备注\" name=\"note\" editor={TextInput} mdxType=\"TableColumn\" />\n      <TableColumn title=\"操作\" name=\"id\" render={(_value, _row, index, _id, context) => <>\n            {context.editing ? <Button autoWidth onClick={() => setReadonly(index)} mdxType=\"Button\">\n                保存\n              </Button> : <Button autoWidth onClick={() => edit(index)} mdxType=\"Button\">\n                编辑\n              </Button>}\n            <Button autoWidth onClick={() => remove(index)} mdxType=\"Button\">\n              删除\n            </Button>\n          </>} mdxType=\"TableColumn\" />\n    </EditableDataTable>\n  </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"使用-useeditinglist\"\n    }}>{`使用 useEditingList`}</h2>\n    <p>{`可以使用 useEditingList 简化增删改查场景的开发：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`内置`}<inlineCode parentName=\"li\">{`editingRows`}</inlineCode>{`和`}<inlineCode parentName=\"li\">{`items`}</inlineCode>{`两个状态和变更方法。`}</li>\n      <li parentName=\"ul\">{`集成了`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/sinoui/use-rest-list-api\"\n        }}>{`@sinoui/use-rest-list-api`}</a>{`，与后端 API 做增删改查交互。`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  useEiditingList,\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\n\nfunction validate(data) {\n  const result = {};\n  if (!data.id) {\n    result.id = '必填';\n  }\n  if (data.title && data.title.startsWith('1')) {\n    result.title = '标题不能以1开头';\n  }\n  return result;\n}\n\nfunction Demo() {\n  const {\n    items,\n    add,\n    edit,\n    save,\n    remove,\n    idPropertyName,\n    editingRows,\n  } = useEditingList('/api/tests', []);\n\n  const handleSave = (row, index, context) => {\n    if (!context.validate()) {\n      alert('数据填写不完整');\n    } else {\n      save(row, index);\n      alert('保存成功');\n    }\n  };\n\n  return (\n    <>\n      <Button onClick={add}>新增</Button>\n      <EditableDataTable\n        data={items}\n        editingRows={editingRows}\n        validate={validate}\n        idPropertyName={idPropertyName}\n      >\n        <TableColumn title=\"序号\" order />\n        <TableColumn title=\"标题\" name=\"title\" editor={TextInput} />\n        <TableColumn title=\"备注\" name=\"note\" editor={TextInput} />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(value, row, index, id, context) => (\n            <>\n              {context.editing ? (\n                <Button\n                  autoWidth\n                  onClick={() => handleSave(row, index, context)}\n                >\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button autoWidth onClick={() => remove(row, index)}>\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`useEditingList.add()`}</inlineCode>{`方法可以指定添加数据的位置，默认在末尾添加数据，如果需要在开始位置添加数据，则可以指定`}<inlineCode parentName=\"p\">{`index`}</inlineCode>{`参数为 0 即可：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const { add } = useEditingList('url');\n\n// 在开始位置添加数据\nadd({}, 0);\n`}</code></pre>\n    <p>{`示例：`}</p>\n    <Playground __position={5} __code={'() => {\\n  const validate = data => {\\n    const result = {}\\n\\n    if (data.title && data.title.startsWith(\\'1\\')) {\\n      result.title = \\'标题不能以1开头\\'\\n    }\\n    return result\\n  }\\n\\n  const {\\n    items,\\n    add,\\n    edit,\\n    save,\\n    remove,\\n    idPropertyName,\\n    editingRows,\\n  } = useEditingList(\\'/api/tests\\', [])\\n\\n  const handleSave = (row, index, context) => {\\n    if (!context.validate()) {\\n      alert(\\'数据填写不完整\\')\\n    } else {\\n      save(row, index).then(\\n        () => {\\n          alert(\\'保存成功\\')\\n        },\\n        () => {\\n          alert(\\'保存失败\\')\\n        },\\n      )\\n    }\\n  }\\n\\n  return (\\n    <>\\n      <Button onClick={add}>新增</Button>\\n      <EditableDataTable\\n        data={items}\\n        editingRows={editingRows}\\n        validate={validate}\\n        idPropertyName={idPropertyName}\\n      >\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn title=\\\"备注\\\" name=\\\"note\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(value, row, index, id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button\\n                  autoWidth\\n                  onClick={() => handleSave(row, index, context)}\\n                >\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => edit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => remove(row, index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      Confirm,\n      produce,\n      useSimpleEditingList,\n      RowSelectColumn\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = data => {\n          const result = {};\n\n          if (data.title && data.title.startsWith('1')) {\n            result.title = '标题不能以1开头';\n          }\n\n          return result;\n        };\n\n        const {\n          items,\n          add,\n          edit,\n          save,\n          remove,\n          idPropertyName,\n          editingRows\n        } = useEditingList('/api/tests', []);\n\n        const handleSave = (row, index, context) => {\n          if (!context.validate()) {\n            alert('数据填写不完整');\n          } else {\n            save(row, index).then(() => {\n              alert('保存成功');\n            }, () => {\n              alert('保存失败');\n            });\n          }\n        };\n\n        return <>\n      <Button onClick={add} mdxType=\"Button\">新增</Button>\n      <EditableDataTable data={items} editingRows={editingRows} validate={validate} idPropertyName={idPropertyName} mdxType=\"EditableDataTable\">\n        <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n        <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n        <TableColumn title=\"备注\" name=\"note\" editor={TextInput} mdxType=\"TableColumn\" />\n        <TableColumn title=\"操作\" name=\"id\" render={(value, row, index, id, context) => <>\n              {context.editing ? <Button autoWidth onClick={() => handleSave(row, index, context)} mdxType=\"Button\">\n                  保存\n                </Button> : <Button autoWidth onClick={() => edit(index)} mdxType=\"Button\">\n                  编辑\n                </Button>}\n              <Button autoWidth onClick={() => remove(row, index)} mdxType=\"Button\">\n                删除\n              </Button>\n            </>} mdxType=\"TableColumn\" />\n      </EditableDataTable>\n    </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"选择数据行\"\n    }}>{`选择数据行`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`可以使用`}<inlineCode parentName=\"li\">{`useSimpleEditingList`}</inlineCode>{`和`}<inlineCode parentName=\"li\">{`RowSelectColumn`}</inlineCode>{`组合实现选择数据行的功能`}</li>\n      <li parentName=\"ul\">{`可以使用`}<inlineCode parentName=\"li\">{`EditableDataTable`}</inlineCode>{`的`}<inlineCode parentName=\"li\">{`rowClassName`}</inlineCode>{`属性定制选中行的样式`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`SelectDemo.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport TextInput from 'sinoui-components/TextInput';\nimport Button from 'sinoui-components/Button';\nimport Confirm from 'sinoui-components/Confirm';\nimport EditableDataTable, {\n  TableColumn,\n  useSimpleEditingList,\n  RowSelectColumn,\n} from '../src';\nimport './SelectRow.css';\n\ninterface Data {\n  id?: string;\n  title?: string;\n  note?: string;\n}\n\nconst data = [\n  { id: '1', title: '标题1', note: '备注1' },\n  { id: '2', title: '标题2', note: '备注2' },\n  { id: '3', title: '标题3', note: '备注3' },\n  { id: '4', title: '标题4', note: '备注4' },\n];\n\nfunction SelectDemo() {\n  const {\n    editingRows,\n    items,\n    remove,\n    selectedRows,\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    toggleRowSelected,\n  } = useSimpleEditingList<Data>(data, {\n    alwaysEditing: true,\n  });\n\n  /**\n   * 自定义数据行的样式，如果是选中行，设置一个class名称\n   * @param index 数据行的索引\n   */\n  const handleRowClassName = (index: number) => {\n    if (selectedRows.indexOf(index) !== -1) {\n      return 'sinoui-data-table-body-row_selected';\n    }\n    return '';\n  };\n\n  return (\n    <>\n      <Confirm\n        message={\\`是否确定删除第\\${selectedRows\n          .map((row) => row + 1)\n          .join('、')}条数据？\\`}\n        onOk={() => remove(selectedRows)}\n      >\n        <Button>删除</Button>\n      </Confirm>\n\n      <EditableDataTable\n        data={items}\n        editingRows={editingRows}\n        rowClassName={handleRowClassName}\n      >\n        <RowSelectColumn\n          selectedRows={selectedRows}\n          isAllSelected={isAllSelected}\n          isContainsSelected={isContainsSelected}\n          toggleAllSelected={toggleAllSelected}\n          toggleRowSelected={toggleRowSelected}\n        />\n        <TableColumn title=\"序号\" order />\n        <TableColumn title=\"标题\" name=\"title\" editor={TextInput} />\n        <TableColumn title=\"备注\" name=\"note\" editor={TextInput} />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`SelectRow.css`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.sinoui-editable-data-table .sinoui-data-table-body-row_selected {\n  background-color: rgba(0, 0, 0, 0.12);\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={6} __code={'() => {\\n  const data = [\\n    { id: \\'1\\', title: \\'标题 1\\', note: \\'备注 1\\' },\\n    { id: \\'2\\', title: \\'标题 2\\', note: \\'备注 2\\' },\\n    { id: \\'3\\', title: \\'标题 3\\', note: \\'备注 3\\' },\\n    { id: \\'4\\', title: \\'标题 4\\', note: \\'备注 4\\' },\\n  ]\\n  const {\\n    editingRows,\\n    items,\\n    remove,\\n    selectedRows,\\n    isAllSelected,\\n    isContainsSelected,\\n    toggleAllSelected,\\n    toggleRowSelected,\\n  } = useSimpleEditingList(data, { alwaysEditing: true })\\n\\n  const handleRowClassName = index => {\\n    if (selectedRows.indexOf(index) !== -1) {\\n      return \\'sinoui-data-table-body-row_selected\\'\\n    }\\n    return \\'\\'\\n  }\\n\\n  return (\\n    <>\\n      <Confirm\\n        message={`是否确定删除第${selectedRows\\n          .map(row => row + 1)\\n          .join(\\'、\\')}条数据？`}\\n        onOk={() => remove(selectedRows)}\\n      >\\n        <Button>删除</Button>\\n      </Confirm>\\n\\n      <EditableDataTable\\n        data={items}\\n        editingRows={editingRows}\\n        rowClassName={handleRowClassName}\\n      >\\n        <RowSelectColumn\\n          selectedRows={selectedRows}\\n          isAllSelected={isAllSelected}\\n          isContainsSelected={isContainsSelected}\\n          toggleAllSelected={toggleAllSelected}\\n          toggleRowSelected={toggleRowSelected}\\n        />\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn title=\\\"备注\\\" name=\\\"note\\\" editor={TextInput} />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      Confirm,\n      produce,\n      useSimpleEditingList,\n      RowSelectColumn\n    }} mdxType=\"Playground\">\n  {() => {\n        const data = [{\n          id: '1',\n          title: '标题 1',\n          note: '备注 1'\n        }, {\n          id: '2',\n          title: '标题 2',\n          note: '备注 2'\n        }, {\n          id: '3',\n          title: '标题 3',\n          note: '备注 3'\n        }, {\n          id: '4',\n          title: '标题 4',\n          note: '备注 4'\n        }];\n        const {\n          editingRows,\n          items,\n          remove,\n          selectedRows,\n          isAllSelected,\n          isContainsSelected,\n          toggleAllSelected,\n          toggleRowSelected\n        } = useSimpleEditingList(data, {\n          alwaysEditing: true\n        });\n\n        const handleRowClassName = index => {\n          if (selectedRows.indexOf(index) !== -1) {\n            return 'sinoui-data-table-body-row_selected';\n          }\n\n          return '';\n        };\n\n        return <>\n    <Confirm message={`是否确定删除第${selectedRows.map(row => row + 1).join('、')}条数据？`} onOk={() => remove(selectedRows)} mdxType=\"Confirm\">\n      <Button mdxType=\"Button\">删除</Button>\n    </Confirm>\n\n    <EditableDataTable data={items} editingRows={editingRows} rowClassName={handleRowClassName} mdxType=\"EditableDataTable\">\n    <RowSelectColumn selectedRows={selectedRows} isAllSelected={isAllSelected} isContainsSelected={isContainsSelected} toggleAllSelected={toggleAllSelected} toggleRowSelected={toggleRowSelected} mdxType=\"RowSelectColumn\" />\n    <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"备注\" name=\"note\" editor={TextInput} mdxType=\"TableColumn\" />\n  </EditableDataTable>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"无数据\"\n    }}>{`无数据`}</h2>\n    <Playground __position={7} __code={'<EditableDataTable data={[]}>\\n  <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n  <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n</EditableDataTable>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      Confirm,\n      produce,\n      useSimpleEditingList,\n      RowSelectColumn\n    }} mdxType=\"Playground\">\n  <EditableDataTable data={[]} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n  </EditableDataTable>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  ","exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".sinoui-editable-data-table .sinoui-data-table-body-row_selected {\\n  background-color: rgba(0, 0, 0, 0.12);\\n}\\n\", \"\"]);\n","import React from 'react';\nimport Checkbox from 'sinoui-components/Checkbox';\nimport TableColumn from './TableColumn';\n\ninterface Props {\n  /**\n   * 选中行\n   */\n  selectedRows: number[];\n  /**\n   * 是否全选\n   */\n  isAllSelected: boolean;\n  /**\n   * 是否选中部分\n   */\n  isContainsSelected: boolean;\n  /**\n   * 全选时的回调函数\n   */\n  toggleAllSelected: () => void;\n  /**\n   * 选中一行时的回调函数\n   */\n  toggleRowSelected: (index: number) => void;\n  startIndex?: number;\n}\n\nfunction RowSelectColumn(props: Props) {\n  const {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    selectedRows,\n    toggleRowSelected,\n    startIndex = 0,\n  } = props;\n\n  return (\n    <TableColumn\n      width={50}\n      title={\n        <Checkbox\n          checked={isAllSelected}\n          indeterminate={!isAllSelected && isContainsSelected}\n          onChange={toggleAllSelected}\n        />\n      }\n      render={(_value, _row, index) => (\n        <Checkbox\n          checked={selectedRows.indexOf(index + startIndex) !== -1}\n          onChange={() => toggleRowSelected(index + startIndex)}\n        />\n      )}\n    />\n  );\n}\n\nexport default RowSelectColumn;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport useRestListApi, { Options } from '@sinoui/use-rest-list-api';\nimport { useEffect, useCallback } from 'react';\nimport useSimpleEditingList, {\n  SimpleEditingListOptions,\n} from './useSimpleEditingList';\n\n/**\n * 维护可编辑列表的hook\n */\nexport default function useEditingList<T>(\n  url: string,\n  defaultValue: T[] = [],\n  options?: Options<T> & SimpleEditingListOptions<T>,\n) {\n  const { keyName = 'id', alwaysEditing = false } = options || {};\n  const {\n    items: originItems,\n    remove,\n    update,\n    save,\n    isLoading,\n    isError,\n    query,\n    fetch,\n    sortWith,\n    reload,\n    reset,\n    searchParams,\n    sorts,\n  } = useRestListApi<T>(url, defaultValue, options);\n  const {\n    setItems,\n    remove: removeEditingItems,\n    updateItem,\n    setReadonly,\n    ...rest\n  } = useSimpleEditingList(originItems, options);\n\n  useEffect(() => {\n    setItems(originItems);\n  }, [setItems, originItems]);\n\n  const getItemId = useCallback((item: any) => item[keyName], [keyName]);\n  /**\n   * 删除数据行\n   *\n   * @param row 数据行对象或者一组数据行与索引的数组\n   * @param index 数据行所在的索引位置\n   */\n  const asyncRemove = useCallback(\n    async (row: T | [T, number][], index?: number) => {\n      if (Array.isArray(row)) {\n        const savedRowIds = row\n          .map(([item]) => getItemId(item))\n          .filter(Boolean);\n        if (savedRowIds.length > 0) {\n          await remove(savedRowIds, false);\n        }\n      } else if (getItemId(row)) {\n        await remove(getItemId(row), false);\n      }\n\n      removeEditingItems(\n        Array.isArray(row) ? row.map(([, idx]) => idx) : (index as number),\n      );\n    },\n    [remove, removeEditingItems, getItemId],\n  );\n\n  /**\n   * 更新数据行\n   *\n   * @param row 数据行对象\n   * @param index 数据行所在位置\n   */\n  const asyncUpdate = useCallback(\n    async (row: T, index: number) => {\n      let newRow;\n      if (getItemId(row)) {\n        newRow = await update(row, false);\n      } else {\n        newRow = await save(row, false);\n      }\n\n      updateItem(index, newRow);\n\n      if (!alwaysEditing) {\n        setReadonly(index);\n      }\n    },\n    [getItemId, updateItem, alwaysEditing, update, save, setReadonly],\n  );\n\n  return {\n    ...rest,\n    query,\n    fetch,\n    sortWith,\n    reload,\n    reset,\n    searchParams,\n    sorts,\n    isLoading,\n    isError,\n    remove: asyncRemove,\n    save: asyncUpdate,\n    idPropertyName: keyName,\n    setReadonly,\n  };\n}\n"],"sourceRoot":""}
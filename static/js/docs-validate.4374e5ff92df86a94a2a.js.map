{"version":3,"sources":["D:/workspaces/editable-data-table/src/useSimpleEditingList.ts","D:/workspaces/editable-data-table/src/index.ts","D:/workspaces/editable-data-table/docs/validate.mdx","D:/workspaces/editable-data-table/src/Table.tsx","D:/workspaces/editable-data-table/src/EmptyDataTableRow.tsx","D:/workspaces/editable-data-table/src/DataTableColGroup.tsx","D:/workspaces/editable-data-table/src/DataTableHead.tsx","D:/workspaces/editable-data-table/src/DataTableBodyRow.tsx","D:/workspaces/editable-data-table/src/DataTableBody.tsx","D:/workspaces/editable-data-table/src/EditableDataTable.tsx","D:/workspaces/editable-data-table/src/DataTableCellEditor.tsx","D:/workspaces/editable-data-table/src/DataTableBodyCell.tsx","D:/workspaces/editable-data-table/src/DataTableHeadCell.tsx","D:/workspaces/editable-data-table/src/TableColumn.tsx","D:/workspaces/editable-data-table/src/shared/DataTableRowContext.ts","D:/workspaces/editable-data-table/src/shared/EditableDataTableContext.ts","D:/workspaces/editable-data-table/src/shared/EditingBodyRowContainer.ts","D:/workspaces/editable-data-table/src/shared/constants.ts","D:/workspaces/editable-data-table/src/useEditingList.ts"],"names":["useSimpleEditingList","defaultItems","arguments","length","undefined","options","_useState","useState","_useState2","Object","slicedToArray","items","setItems","_useState3","Array","fill","alwaysEditing","_useState4","editingRows","setEditingRows","_useState5","_useState6","errors","setErrors","_useState7","_useState8","touched","setTouched","optionsRef","useRef","useEffect","current","edit","useCallback","rowIndex","produce","draft","setReadonly","replaceItems","newItems","add","item","index","addAt","value","push","splice","prev","remove","removeByIndex","removeItems","indexes","removeByIndexes","array","filter","_","indexOf","updateItem","validateField","fieldName","rowData","validate","rowErrors","shallowEqual","validateAllEditingRows","newErrors","map","forEach","error","updateErrors","_item","fieldError","fieldTouched","keys","field","every","key","EditableDataTable","name","layoutProps","MDXLayout","MDXContent","_ref","components","props","objectWithoutProperties","index_es","assign","mdxType","id","parentName","className","index_esm","__position","__code","__scope","this","Playground","TableColumn","Button","duty","startsWith","editingList","react_default","a","Fragment","raised","onClick","console","log","alert","src","data","onFieldChange","order","title","editor","isMDXComponent","captionTypeStyle","css","_templateObject","theme","typography","body1","fontSize","fontFamily","fontWeightMedium","color","bodyTypeStyle","_templateObject2","fontWeight","dataTableCellStyle","_templateObject3","palette","type","rowBgColor","light","tableRowSelected","tableRowHover","dark","StyledTable","styled","Table","_templateObject4","primary","caption","Wrapper","div","EmptyDataTableRow_templateObject","EmptyDataTableRow","children","createElement","data-testid","context","RowType","ColGroup","DataTableColGroup","DataTableRowContext","Provider","DataTableHead","React","memo","editing","useMemo","Body","EditingBodyRowContainer","DataTableBody","idPropertyName","_ref$editingRows","src_DataTableBodyRow","concat","_props$data","_props$idPropertyName","_props$emptyTitle","emptyTitle","style","_ref$idPropertyName","onRowChange","useEditableDataTable","src_Table","classNames","EditableDataTableContext","src_DataTableColGroup","src_DataTableHead","src_DataTableBody","src_EmptyDataTableRow","Editor","useContext","valueFromContext","setValue","_EditingBodyRowContai","useContainer","errorControlled","handleChange","event","newValue","target","isChangeEvent","onChange","FormHelpText","MemoDataTableBodyCellInner","render","Error","src_DataTableCellEditor","DataTableBodyCell","state","DataTableHeadCell","align_center","width","Head","src_DataTableHeadCell","src_DataTableBodyCell","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_constants__WEBPACK_IMPORTED_MODULE_1__","createContext","createContainer","outerError","outTouched","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","rowDataRef","_useContext","newRowData","updateTouched","result","newTouched","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","d","__webpack_exports__","useEditingList","url","defaultValue","_ref$keyName","keyName","_useRestListApi","useRestListApi","removeItemAt","update","save","isLoading","addItem","itemsCount","asyncRemove","_ref2","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","row","wrap","_context","next","t0","stop","_x","_x2","apply","asyncUpdate","_ref3","_callee2","_context2","sent","_x3","_x4"],"mappings":"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","file":"static/js/docs-validate.376b5dd6.js","sourcesContent":["import { useRef, useEffect, useState, useCallback } from 'react';\nimport { produce } from 'immer';\nimport shallowEqual from 'shallowequal';\n\ninterface Options<T> {\n  /**\n   * 单元格表单域是否一致处于编辑状态。\n   */\n  alwaysEditing?: boolean;\n\n  /**\n   * 验证行数据的函数\n   */\n  validate?: (item: T) => ErrorResult | undefined;\n}\n\n/**\n * 可编辑列表外置状态管理hook\n *\n * 支持：\n *\n * * 列表数据管理\n * * 可编辑状态维护\n * * 单元格编辑器校验\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction useSimpleEditingList<T = any>(\n  defaultItems: T[] = [],\n  options: Options<T> = {},\n): SimpleEditingListResult<T> {\n  const [items, setItems] = useState<T[]>(defaultItems);\n  const [editingRows, setEditingRows] = useState<boolean[]>(() =>\n    new Array(defaultItems.length).fill(!!options.alwaysEditing),\n  );\n  const [errors, setErrors] = useState<ErrorResult[]>(() =>\n    new Array(defaultItems.length).fill({}),\n  );\n  const [touched, setTouched] = useState<TouchedState[]>(() =>\n    new Array(defaultItems.length).fill({}),\n  );\n  const optionsRef = useRef(options);\n\n  useEffect(() => {\n    optionsRef.current = options;\n  }, [options]);\n\n  /**\n   * 编辑\n   */\n  const edit = useCallback((rowIndex: number) => {\n    setEditingRows(\n      produce((draft) => {\n        draft[rowIndex] = true;\n      }),\n    );\n  }, []);\n\n  /**\n   * 设置为只读状态\n   */\n  const setReadonly = useCallback((rowIndex: number) => {\n    setEditingRows(\n      produce((draft) => {\n        draft[rowIndex] = false;\n      }),\n    );\n  }, []);\n\n  /**\n   * 更换items\n   *\n   * @param {T[]} newItems 新的items\n   */\n  const replaceItems = useCallback((newItems: T[]) => {\n    setItems(newItems);\n    setEditingRows(\n      new Array(newItems.length).fill(!!optionsRef.current.alwaysEditing),\n    );\n\n    setErrors(new Array(newItems.length).fill({}));\n    setTouched(new Array(newItems.length).fill({}));\n  }, []);\n\n  /**\n   * 新增一条数据\n   */\n  const add = useCallback((item: Partial<T> = {}, index: number = -1) => {\n    const addAt = produce(<V>(draft: V[], value: V) => {\n      if (index === -1 || index >= draft.length) {\n        draft.push(value);\n      } else {\n        draft.splice(index, 0, value);\n      }\n    });\n    setItems((prev) => addAt(prev, item));\n\n    setEditingRows((prev) => addAt(prev, true));\n\n    setErrors((prev) => addAt(prev, {}));\n\n    setTouched((prev) => addAt(prev, {}));\n  }, []);\n\n  /**\n   * 删除数据\n   */\n  const remove = useCallback((index: number) => {\n    const removeByIndex = produce((draft) => {\n      draft.splice(index, 1);\n    });\n\n    setItems(removeByIndex);\n    setEditingRows(removeByIndex);\n    setErrors(removeByIndex);\n    setTouched(removeByIndex);\n  }, []);\n\n  /**\n   * 删除一组数据\n   */\n  const removeItems = useCallback((indexes: number[]) => {\n    const removeByIndexes = <T>(array: T[]) =>\n      array.filter((_, index) => indexes.indexOf(index) === -1);\n    setItems(removeByIndexes);\n    setEditingRows(removeByIndexes);\n    setErrors(removeByIndexes);\n    setTouched(removeByIndexes);\n  }, []);\n\n  /**\n   * 更新数据项\n   */\n  const updateItem = useCallback((index: number, item: T) => {\n    setItems(\n      produce((draft) => {\n        draft[index] = item;\n      }),\n    );\n  }, []);\n\n  /**\n   * 验证一个单元格\n   */\n  const validateField = useCallback(\n    (index: number, fieldName: string, rowData: T) => {\n      const { validate } = optionsRef.current;\n\n      if (validate) {\n        const rowErrors = validate(rowData) || {};\n\n        setErrors(\n          produce((draft) => {\n            if (!shallowEqual(draft[index], rowErrors)) {\n              draft[index] = rowErrors;\n            }\n          }),\n        );\n\n        setTouched(\n          produce((draft) => {\n            draft[index][fieldName] = true;\n          }),\n        );\n      }\n    },\n    [],\n  );\n\n  /**\n   * 校验列表中正在编辑的数据\n   */\n  const validateAllEditingRows = () => {\n    const { validate } = optionsRef.current;\n\n    if (!validate) {\n      return true;\n    }\n\n    const updateErrors = produce((draft: ErrorResult[]) => {\n      items\n        .map((item, index) => {\n          if (!editingRows[index]) {\n            return {};\n          }\n          return validate(item) || {};\n        })\n        .forEach((error, index) => {\n          if (!shallowEqual(draft[index], error)) {\n            draft[index] = error;\n          }\n        });\n    });\n\n    const newErrors = updateErrors(errors);\n    setErrors(newErrors);\n    setTouched(\n      produce((draft) => {\n        items.forEach((_item, index) => {\n          if (!editingRows[index]) {\n            return;\n          }\n\n          const fieldError = newErrors[index];\n          const fieldTouched: TouchedState = {};\n\n          Object.keys(fieldError).forEach((field) => {\n            fieldTouched[field] = true;\n          });\n\n          draft[index] = fieldTouched;\n        });\n      }),\n    );\n\n    return (\n      newErrors &&\n      newErrors.every(\n        (error) =>\n          Object.keys(error).filter((key) => !!error[key]).length === 0,\n      )\n    );\n  };\n\n  return {\n    items,\n    setItems: replaceItems,\n    editingRows,\n    edit,\n    setReadonly,\n    add,\n    remove,\n    removeItems,\n    updateItem,\n    errors,\n    touched,\n    validateField,\n    validateAllEditingRows,\n  };\n}\n\nexport default useSimpleEditingList;\n","import EditableDataTable, {\n  Props as EditableDataTableProps,\n} from './EditableDataTable';\nimport TableColumn, { Props as TableColumnProps } from './TableColumn';\nimport EditorProps from './shared/EditorProps';\nimport useEditingList from './useEditingList';\nimport useSimpleEditingList from './useSimpleEditingList';\n\nexport default EditableDataTable;\n\nexport {\n  EditableDataTableProps,\n  TableColumn,\n  TableColumnProps,\n  EditorProps,\n  useEditingList,\n  useSimpleEditingList,\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport EditableDataTable, { useSimpleEditingList, TableColumn } from '../src';\nimport Button from 'sinoui-components/Button';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Demo = makeShortcode(\"Demo\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"校验\"\n    }}>{`校验`}</h1>\n    <p>{`EditableDataTable 内置支持校验，也支持在表格组件的外部维护校验状态。可以使用 useSimpleEditingList 管理外置的校验状态。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport EditableDataTable, {\n  useSimpleEditingList,\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\ninterface User {\n  id: string;\n  name: string;\n  duty?: string;\n}\n\nfunction validate(rowData: User) {\n  const errors = {};\n\n  if (!rowData.name) {\n    errors.name = '必填';\n  }\n\n  if (rowData.duty && rowData.duty.startsWith('1')) {\n    errors.duty = '职务不能以1开头';\n  }\n\n  return errors;\n}\n\nfunction Demo() {\n  const editingList = useSimpleEditingList<User>(\n    [\n      { id: '1', name: 'Jacking', duty: 'developer' },\n      { id: '2', name: 'zinuo', duty: 'developer' },\n    ],\n    {\n      alwaysEditing: true,\n      validate,\n    },\n  );\n\n  const handleSave = () => {\n    if (!editingList.validateAllEditingRows()) {\n      alert('数据校验失败，请检查。');\n    } else {\n      console.log('需要保存的数据', editingList.items);\n      alert('保存数据成功');\n    }\n  };\n\n  return (\n    <>\n      <button onClick={handleSave}>保存</button>\n      <EditableDataTable\n        data={editingList.items}\n        editingRows={editingList.editingRows}\n        errors={editingList.errors}\n        touched={editingList.touched}\n        onFieldChange={editingList.validateField}\n      >\n        <TableColumn order title=\"序号\" />\n        <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" />\n        <TableColumn title=\"职务\" name=\"duty\" editor=\"input\" />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`演示效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  function validate(rowData) {\\n    const errors = {}\\n    if (!rowData.name) {\\n      errors.name = \\'必填\\'\\n    }\\n\\n    if (rowData.duty && rowData.duty.startsWith(\\'1\\')) {\\n      errors.duty = \\'职务不能以1开头\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  function Demo() {\\n    const editingList = useSimpleEditingList(\\n      [\\n        { id: \\'1\\', name: \\'Jacking\\', duty: \\'developer\\' },\\n        { id: \\'2\\', name: \\'zinuo\\', duty: \\'developer\\' },\\n      ],\\n      {\\n        alwaysEditing: true,\\n        validate,\\n      },\\n    )\\n\\n    const handleSave = () => {\\n      if (!editingList.validateAllEditingRows()) {\\n        alert(\\'数据校验失败，请检查。\\')\\n      } else {\\n        console.log(\\'需要保存的数据\\', editingList.items)\\n        alert(\\'保存数据成功\\')\\n      }\\n    }\\n\\n    return (\\n      <>\\n        <Button raised onClick={handleSave}>\\n          保存\\n        </Button>\\n        <Button raised onClick={() => editingList.add({})}>\\n          新增\\n        </Button>\\n        <EditableDataTable\\n          data={editingList.items}\\n          editingRows={editingList.editingRows}\\n          errors={editingList.errors}\\n          touched={editingList.touched}\\n          onFieldChange={editingList.validateField}\\n        >\\n          <TableColumn order title=\\\"序号\\\" />\\n          <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n          <TableColumn title=\\\"职务\\\" name=\\\"duty\\\" editor=\\\"input\\\" />\\n        </EditableDataTable>\\n      </>\\n    )\\n  }\\n\\n  return <Demo />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      EditableDataTable,\n      useSimpleEditingList,\n      TableColumn,\n      Button\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(rowData) {\n          const errors = {};\n\n          if (!rowData.name) {\n            errors.name = '必填';\n          }\n\n          if (rowData.duty && rowData.duty.startsWith('1')) {\n            errors.duty = '职务不能以1开头';\n          }\n\n          return errors;\n        }\n\n        function Demo() {\n          const editingList = useSimpleEditingList([{\n            id: '1',\n            name: 'Jacking',\n            duty: 'developer'\n          }, {\n            id: '2',\n            name: 'zinuo',\n            duty: 'developer'\n          }], {\n            alwaysEditing: true,\n            validate\n          });\n\n          const handleSave = () => {\n            if (!editingList.validateAllEditingRows()) {\n              alert('数据校验失败，请检查。');\n            } else {\n              console.log('需要保存的数据', editingList.items);\n              alert('保存数据成功');\n            }\n          };\n\n          return <>\n      <Button raised onClick={handleSave} mdxType=\"Button\">保存</Button>\n      <Button raised onClick={() => editingList.add({})} mdxType=\"Button\">新增</Button>\n      <EditableDataTable data={editingList.items} editingRows={editingList.editingRows} errors={editingList.errors} touched={editingList.touched} onFieldChange={editingList.validateField} mdxType=\"EditableDataTable\">\n        <TableColumn order title=\"序号\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"职务\" name=\"duty\" editor=\"input\" mdxType=\"TableColumn\" />\n      </EditableDataTable>\n    </>;\n        }\n\n        return <Demo mdxType=\"Demo\" />;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import styled, { css } from 'sinoui-components/styles';\nimport Table from 'sinoui-components/Table';\n\nconst captionTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.fontWeightMedium};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst bodyTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.body1.fontWeight};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst dataTableCellStyle = css`\n  padding: 0;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-bottom: 1px solid\n    ${(props) =>\n      props.theme.palette.type === 'light'\n        ? 'rgba(224, 224, 224, 1)'\n        : 'rgba(80, 80, 80, 1)'};\n`;\n\nconst rowBgColor = {\n  light: {\n    tableRowSelected: 'rgba(0, 0, 0, 0.04)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(0, 0, 0, 0.07)', // 表格行hover时的背景色\n  },\n  dark: {\n    tableRowSelected: 'rgba(255, 255, 255, 0.08)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(255, 255, 255, 0.14)', // 表格行hover时的背景色\n  },\n};\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n  border-top: 1px solid rgba(224, 224, 224, 1);\n  & .sinoui-data-table-head {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    background-color: ${(props) =>\n      props.theme.palette.type === 'light'\n        ? props.theme.palette.primary[50]\n        : props.theme.palette.primary[200]};\n    text-align: left;\n    vertical-align: middle;\n  }\n\n  .sinoui-checkbox-button {\n    margin: 14px;\n  }\n\n  & .sinoui-data-table-head.numeric,\n  .sinoui-data-table-body-td.numeric {\n    text-align: right;\n    flex-direction: row-reverse;\n  }\n\n  & .sinoui-data-table-head.align_center,\n  .sinoui-data-table-body-td.align_center {\n    text-align: center;\n  }\n\n  & .sinoui-data-table-head.checkbox,\n  .sinoui-data-table-body-td.checkbox {\n    padding: 0;\n    width: 48px;\n  }\n\n  & .sinoui-data-table-head.extraInfo,\n  .sinoui-data-table-body-td.extraInfo {\n    padding: 0;\n    width: 60px;\n  }\n\n  & .sinoui-data-table-head:last-child,\n  .sinoui-data-table-body-td:last-child {\n    padding-right: 24px;\n  }\n\n  & .sinoui-data-table-footer {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    padding-left: 24px;\n    padding-right: 12px;\n  }\n\n  & .sinoui-data-table-body-cell-no-data {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    padding: 64px;\n    text-align: center;\n    color: ${(props) => props.theme.typography.caption.color};\n  }\n\n  & .sinoui-data-table-body-td {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    text-align: left;\n    vertical-align: middle;\n    word-wrap: break-word;\n    word-break: break-all;\n  }\n\n  & .sinoui-data-table-head-row {\n    height: 48px;\n  }\n\n  & .sinoui-data-table-footer-row,\n  .sinoui-data-table-body-row-no-data {\n    height: 56px;\n    background-color: transparent;\n  }\n\n  & .sinoui-data-table-body-row {\n    height: 48px;\n    background-color: transparent;\n\n    &:hover {\n      background-color: ${(props) =>\n        rowBgColor[props.theme.palette.type].tableRowHover};\n    }\n  }\n\n  & .sinoui-data-table-body-row.selected {\n    background-color: ${(props) =>\n      rowBgColor[props.theme.palette.type].tableRowSelected};\n  }\n`;\n\nexport default StyledTable;\n","import React from 'react';\nimport styled from 'sinoui-components/styles';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  padding: 32px 8px;\n`;\n\n/**\n * 表格空数据时显示的行\n */\nconst EmptyDataTableRow: React.SFC = (props) => {\n  const { children } = props;\n  return (\n    <Wrapper className=\"sinoui-data-table-info\" data-testid=\"emptyInfo\">\n      {children}\n    </Wrapper>\n  );\n};\n\nexport default EmptyDataTableRow;\n","import React from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext from './shared/DataTableRowContext';\n\nconst context: { type: RowType.ColGroup } = {\n  type: RowType.ColGroup,\n};\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nfunction DataTableColGroup(props: Props) {\n  const { children } = props;\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <colgroup data-testid=\"colgroup\">{children}</colgroup>\n    </DataTableRowContext.Provider>\n  );\n}\n\nexport default DataTableColGroup;\n","import React from 'react';\n\n/**\n * 数据表头\n */\nconst DataTableHead: React.SFC = function TableHead({ children }) {\n  return (\n    <thead>\n      <tr className=\"sinoui-data-table-head-row\" data-testid=\"tableHead\">\n        {children}\n      </tr>\n    </thead>\n  );\n};\n\nexport default DataTableHead;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props<T> {\n  /**\n   * 此行数据\n   */\n  data: T;\n  /**\n   * 数据序号\n   */\n  index: number;\n  /**\n   * 单元格子组件\n   */\n  children: React.ReactNode;\n\n  /**\n   * 是否处于编辑状态\n   */\n  editing?: boolean;\n\n  /**\n   * 行数据错误状态\n   */\n  error?: ErrorResult;\n\n  /**\n   * 单元格编辑器是否被点击过\n   */\n  touched?: TouchedState;\n}\n\ntype CompType<T = any> = React.SFC<Props<T>>;\n\n/**\n * 内容行\n */\nconst DataTableBodyRow: CompType = (props) => {\n  const { data, index, children, editing, error, touched } = props;\n  const context: BodyRowContextType<any> = useMemo(\n    () => ({\n      type: RowType.Body,\n      data,\n      index,\n      editing: !!editing,\n      error,\n      touched,\n    }),\n    [data, index, editing, error, touched],\n  );\n\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <EditingBodyRowContainer.Provider>\n        <tr className=\"sinoui-data-table-body-row\" data-testid=\"bodyRow\">\n          {children}\n        </tr>\n      </EditingBodyRowContainer.Provider>\n    </DataTableRowContext.Provider>\n  );\n};\n\nexport default React.memo(DataTableBodyRow);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport DataTableBodyRow from './DataTableBodyRow';\n\n/**\n * 数据表格内容组件\n */\nconst DataTableBody: React.SFC<{\n  data?: any[];\n  idPropertyName: string;\n  editingRows?: boolean[];\n  errors?: ErrorResult[];\n  touched?: TouchedState[];\n}> = function DataTableBody({\n  idPropertyName,\n  data,\n  children,\n  editingRows = [],\n  errors,\n  touched,\n}) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n  return (\n    <tbody>\n      {data.map((item, index) => (\n        <DataTableBodyRow\n          key={item[idPropertyName] || `index_${index}`}\n          data={item}\n          index={index}\n          data-testid=\"tableBody\"\n          editing={editingRows[index]}\n          error={errors ? errors[index] : undefined}\n          touched={touched ? touched[index] : undefined}\n        >\n          {children}\n        </DataTableBodyRow>\n      ))}\n    </tbody>\n  );\n};\n\nexport default DataTableBody;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport Table from './Table';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EmptyDataTableRow from './EmptyDataTableRow';\nimport DataTableColGroup from './DataTableColGroup';\nimport DataTableHead from './DataTableHead';\nimport DataTableBody from './DataTableBody';\n\nexport interface Props<T> {\n  /**\n   * 列表数据\n   */\n  data?: T[];\n  /**\n   * 处于编辑状态的行。`editingRows`数组需要与`data`数组保持一一对应的关系，`editingRows`数组中每一个数据项代表的是`data`数组中对应数据项的编辑状态，`true`表示编辑状态，`false`表示非编辑状态。\n   */\n  editingRows?: boolean[];\n\n  /**\n   * 给table元素添加className\n   */\n  className?: string;\n\n  /**\n   * 给table元素添加样式\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * 错误状态\n   */\n  errors?: ErrorResult[];\n\n  /**\n   * 单元格是否被点击的状态\n   */\n  touched?: TouchedState[];\n\n  /**\n   * 子节点，一组TableColumn。使用TableColumn指表格列信息。\n   */\n  children: React.ReactNode;\n  /**\n   * 数据的id属性名。默认为'id'。\n   */\n  idPropertyName?: string;\n  /**\n   * 无数据时的提示信息。默认为“暂无数据”。\n   */\n  emptyTitle?: React.ReactNode;\n\n  /**\n   * 监听行数据发生变化的事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onRowChange?: (index: number, rowData: T) => void;\n\n  /**\n   * 监听单元格值变化事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onFieldChange?: (index: number, fieldName: string, rowData: T) => void;\n\n  /**\n   * 给正在编辑的行添加校验规则。\n   * \n   * 返回错误提示：\n   * \n   * ```js\n     {\n       'title': '不能为空',\n       'name': '不能少于三个字'\n     }\n   * ```\n   *\n   * 上面的错误信息表示字段`title`和`name`校验失败。\n   * \n   * 如果数据行没有错误，则返回`{}`或者`undefined`。\n   */\n  validate?: (rowData: T) => { [x: string]: string } | undefined;\n}\n\nfunction useEditableDataTable<T>({\n  idPropertyName = 'id',\n  onRowChange,\n  validate,\n  onFieldChange,\n}: Props<T>) {\n  const options = useRef({\n    onRowChange,\n    validate,\n    onFieldChange,\n  });\n\n  useEffect(() => {\n    options.current.onRowChange = onRowChange;\n    options.current.validate = validate;\n    options.current.onFieldChange = onFieldChange;\n  }, [onRowChange, validate, onFieldChange]);\n\n  const context = useMemo(\n    () => ({ idPropertyName, options: options.current }),\n    [idPropertyName],\n  );\n\n  return context;\n}\n\n/**\n * 可编辑表格\n */\nfunction EditableDataTable<T>(props: Props<T>) {\n  const {\n    data = [],\n    idPropertyName = 'id',\n    children,\n    emptyTitle = '暂无数据',\n    editingRows,\n    errors,\n    touched,\n    className,\n    style,\n  } = props;\n  const context = useEditableDataTable(props);\n  return (\n    <>\n      <Table\n        className={classNames('sinoui-editable-data-table', className)}\n        style={style}\n      >\n        <EditableDataTableContext.Provider value={context}>\n          <DataTableColGroup>{children}</DataTableColGroup>\n          <DataTableHead>{children}</DataTableHead>\n          <DataTableBody\n            data={data}\n            idPropertyName={idPropertyName}\n            editingRows={editingRows}\n            errors={errors}\n            touched={touched}\n          >\n            {children}\n          </DataTableBody>\n        </EditableDataTableContext.Provider>\n      </Table>\n      {(!data || data.length === 0) && (\n        <EmptyDataTableRow>{emptyTitle}</EmptyDataTableRow>\n      )}\n    </>\n  );\n}\n\nexport default EditableDataTable;\n","import React, { useState, useContext, useCallback, useMemo } from 'react';\nimport FormHelpText from 'sinoui-components/Form/FormHelpText';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props {\n  editor: React.ReactType;\n  name: string;\n}\n\nfunction isChangeEvent(\n  event?: React.ChangeEvent<HTMLInputElement> | string,\n): event is React.ChangeEvent<HTMLInputElement> {\n  return !!(event && (event as React.ChangeEvent<HTMLInputElement>).target);\n}\n\n/**\n * 单元格编辑器\n */\nfunction DataTableCellEditor(props: Props) {\n  const { name, editor: Editor } = props;\n  const { data, index } = useContext(DataTableRowContext) as BodyRowContextType<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    any\n  >;\n  const valueFromContext = data[name] || '';\n  const [, setValue] = useState(valueFromContext);\n  const { options } = useContext(EditableDataTableContext);\n  const {\n    touched,\n    errors,\n    validateField,\n    errorControlled,\n  } = EditingBodyRowContainer.useContainer();\n\n  const handleChange = useCallback(\n    (event?: React.ChangeEvent<HTMLInputElement> | string) => {\n      const newValue = isChangeEvent(event) ? event.target.value : event;\n      setValue(newValue);\n\n      data[name] = newValue;\n\n      if (options.onRowChange) {\n        options.onRowChange(index, data);\n      }\n\n      if (options.onFieldChange) {\n        options.onFieldChange(index, name, data);\n      }\n\n      if (!errorControlled) {\n        validateField(name, data);\n      }\n    },\n    [data, name, options, index, errorControlled, validateField],\n  );\n\n  const isTouched = touched[name];\n  const error = isTouched ? errors[name] : undefined;\n\n  const element = useMemo(\n    () => (\n      <>\n        <Editor\n          name={name}\n          value={valueFromContext}\n          item={data}\n          onChange={handleChange}\n          error={!!error}\n        />\n        {error && (\n          <FormHelpText\n            error\n            className=\"sinoui-editable-data-table-editor-error\"\n          >\n            {error}\n          </FormHelpText>\n        )}\n      </>\n    ),\n    [data, error, handleChange, name, valueFromContext],\n  );\n\n  return element;\n}\n\nexport default React.memo(DataTableCellEditor);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport DataTableCellEditor from './DataTableCellEditor';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface CellState<T> {\n  data: T;\n  index: number;\n  editing: boolean;\n  errors?: { [x: string]: any };\n  validate: (rowData?: T) => boolean;\n  idPropertyName: string;\n}\n\ninterface DataCellProps<T, CellDataType> {\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n  /**\n   * 数据列名称\n   */\n  name?: string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\nfunction useCellState<T>(): CellState<T> {\n  const { data, index, editing } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<any>;\n  const { validate } = EditingBodyRowContainer.useContainer();\n  const { idPropertyName } = useContext(EditableDataTableContext);\n\n  return {\n    data,\n    index,\n    editing,\n    idPropertyName,\n    validate,\n  };\n}\n\n/**\n * 数据单元格\n */\nfunction DataTableBodyCellInner(\n  props: DataCellProps<any, any> & CellState<any>,\n) {\n  const {\n    order,\n    render,\n    name,\n    editor,\n    index,\n    editing,\n    data,\n    idPropertyName,\n    validate,\n  } = props;\n\n  if (order) {\n    return (\n      <td className=\"sinoui-data-table-body-td align_center\">{index + 1}</td>\n    );\n  }\n\n  if (editing && editor) {\n    if (!name) {\n      throw new Error(`没有给TableColumn指定name属性`);\n    }\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        <DataTableCellEditor name={name} editor={editor} />\n      </td>\n    );\n  }\n\n  if (render) {\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        {render(\n          name ? data[name] : undefined,\n          data,\n          index,\n          data[idPropertyName],\n          {\n            editing,\n            validate,\n          },\n        )}\n      </td>\n    );\n  }\n\n  return name ? (\n    <td className=\"sinoui-data-table-body-td\">{data[name]}</td>\n  ) : null;\n}\n\nconst MemoDataTableBodyCellInner = React.memo(DataTableBodyCellInner);\n\nfunction DataTableBodyCell<T = any, CellDataType = string>(\n  props: DataCellProps<T, CellDataType>,\n) {\n  const state = useCellState<any>();\n\n  return <MemoDataTableBodyCellInner {...props} {...state} />;\n}\n\nexport default DataTableBodyCell;\n","import React from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  order?: boolean;\n  title?: React.ReactNode;\n}\n\n/**\n * 表格头单元格\n */\nfunction DataTableHeadCell(props: Props) {\n  const { order, title } = props;\n  return (\n    <th\n      className={classNames('sinoui-data-table-head', {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        align_center: order,\n      })}\n    >\n      {title}\n    </th>\n  );\n}\n\nexport default DataTableHeadCell;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport DataTableRowContext from './shared/DataTableRowContext';\nimport DataTableBodyCell from './DataTableBodyCell';\nimport DataTableHeadCell from './DataTableHeadCell';\nimport { RowType } from './shared/constants';\n\nexport interface Props<T, CellDataType> {\n  /**\n   * 数据列名称\n   */\n  name?: string;\n  /**\n   * 标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n\n  /**\n   * 列宽度\n   */\n  width?: number | string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\n/**\n * 表格列\n */\nconst TableColumn: React.SFC<Props<any, any>> = React.memo(function TableColumn<\n  T,\n  CellDataType\n>(props: Props<T, CellDataType>) {\n  const { title, order, width } = props;\n  const { type } = useContext(DataTableRowContext);\n\n  switch (type) {\n    case RowType.Head:\n      return <DataTableHeadCell title={title} order={order} />;\n    case RowType.ColGroup:\n      return <col width={order ? 50 : width} />;\n    default:\n      return <DataTableBodyCell {...props} />;\n  }\n});\n\nexport default TableColumn;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport { RowType } from './constants';\n\nexport interface BodyRowContextType<T> {\n  type: RowType.Body;\n  data: T;\n  index: number;\n  /**\n   * 是否处于编辑状态\n   */\n  editing: boolean;\n\n  /**\n   * 数据行的验证结果\n   */\n  error?: ErrorResult;\n\n  /**\n   * 单元格数据被点击状态\n   */\n  touched?: TouchedState;\n}\n\nexport interface HeadRowContextType {\n  type: RowType.Head;\n}\n\nexport interface ColGroupContextType {\n  type: RowType.ColGroup;\n}\n\nexport type RowContextType<T = any> =\n  | BodyRowContextType<T>\n  | HeadRowContextType\n  | ColGroupContextType;\n\nconst DataTableRowContext = React.createContext<RowContextType>({\n  type: RowType.Head,\n});\n\nexport default DataTableRowContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\n\ninterface ContextType {\n  idPropertyName: string;\n  options: {\n    onRowChange?: (index: number, rowData: any) => void;\n    onFieldChange?: (index: number, fieldName: string, rowData: any) => void;\n    validate?: (rowData: any) => { [x: string]: string } | undefined;\n  };\n}\n\nconst EditableDataTableContext = React.createContext<ContextType>({\n  idPropertyName: 'id',\n  options: {},\n});\n\nexport default EditableDataTableContext;\n","import { useState, useCallback, useRef, useEffect, useContext } from 'react';\nimport { createContainer } from 'unstated-next';\nimport shallowEqual from 'shallowequal';\nimport EditableDataTableContext from './EditableDataTableContext';\nimport DataTableRowContext, { BodyRowContextType } from './DataTableRowContext';\n\ninterface ContextType<T> {\n  /**\n   * 校验错误信息\n   */\n  errors: {\n    [x: string]: string;\n  };\n\n  /**\n   * 表单校验状态是否是受控于外部。（也就是使用者处理数据行校验）\n   */\n  errorControlled: boolean;\n\n  /**\n   * 点击状态\n   */\n  touched: {\n    [x: string]: boolean;\n  };\n\n  /**\n   * 校验数据行\n   *\n   * 如果通过校验，则返回`true`，否则返回`false`。\n   */\n  validate: (newItem?: T) => boolean;\n\n  /**\n   * 校验表单域\n   */\n  validateField: (fieldName: string, newRowData: T) => void;\n}\n\n/**\n * 用于正在编辑的行数据的状态管理hook\n *\n * 主要维护的状态：\n *\n * * 表单校验\n * * 是否点击过的状态\n *\n */\nfunction useEditingBodyRow<T>(): ContextType<T> {\n  const { data: rowData, error: outerError, touched: outTouched } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<T>;\n  const [touched, setTouched] = useState<{ [x: string]: boolean }>({});\n  const [errors, setErrors] = useState({});\n  const rowDataRef = useRef(rowData);\n  const { options, idPropertyName } = useContext(EditableDataTableContext);\n\n  useEffect(() => {\n    rowDataRef.current = rowData;\n  }, [rowData]);\n\n  const updateErrors = useCallback((newErrors: any) => {\n    setErrors((prev) => {\n      if (!shallowEqual(newErrors, prev)) {\n        return newErrors;\n      }\n      return prev;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!(rowData as any)[idPropertyName] && options.validate) {\n      const newErrors = options.validate(rowData) || {};\n      updateErrors(newErrors);\n    }\n  }, [rowData, options, idPropertyName, updateErrors]);\n\n  const validate = useCallback(\n    (newRowData: T = rowDataRef.current, updateTouched: boolean = true) => {\n      if (options.validate) {\n        const result = options.validate(newRowData);\n        if (result) {\n          if (updateTouched) {\n            const newTouched: { [x: string]: boolean } = {};\n            Object.keys(result).forEach((key) => {\n              newTouched[key] = true;\n            });\n\n            setTouched(newTouched);\n          }\n\n          updateErrors(result || {});\n\n          return (\n            Object.keys(result).filter((key) => !!result[key]).length === 0\n          );\n        }\n      }\n\n      return true;\n    },\n    [options, updateErrors],\n  );\n\n  const validateField = useCallback(\n    (fieldName: string, newRowData: T) => {\n      setTouched((prev) => {\n        if (!prev[fieldName]) {\n          return { ...prev, [fieldName]: true };\n        }\n        return prev;\n      });\n      validate(newRowData, false);\n    },\n    [validate],\n  );\n\n  return {\n    errors: outerError || errors,\n    errorControlled: !!outerError,\n    touched: outTouched || touched,\n    validate,\n    validateField,\n  };\n}\n\nconst EditingBodyRowContainer = createContainer(useEditingBodyRow);\n\nexport default EditingBodyRowContainer;\n","export enum RowType {\n  Body,\n  Head,\n  ColGroup,\n}\n\nexport const EMPTY_ROW_INFO = '暂无数据';\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport useRestListApi, { Options } from '@sinoui/use-rest-list-api';\nimport { useState, useEffect, useCallback } from 'react';\nimport { produce } from 'immer';\n\n/**\n * 维护可编辑列表的hook\n */\nexport default function useEditingList<T>(\n  url: string,\n  defaultValue: T[] = [],\n  options?: Options<T>,\n) {\n  const { keyName = 'id' } = options || {};\n  const {\n    items,\n    setItems,\n    remove,\n    removeItemAt,\n    update,\n    save,\n    isLoading,\n    addItem,\n  } = useRestListApi<T>(url, defaultValue);\n  const [editingRows, setEditingRows] = useState(() =>\n    defaultValue.map(() => false),\n  );\n\n  const itemsCount = items.length;\n  useEffect(() => {\n    setEditingRows((prev) => {\n      if (itemsCount !== prev.length) {\n        return new Array(itemsCount).fill(false);\n      }\n      return prev;\n    });\n  }, [isLoading, itemsCount]);\n\n  const add = (item: Partial<T> = {}, index: number = -1) => {\n    const addAt = produce(<V>(draft: V[], value: V) => {\n      if (index === -1 || index >= draft.length) {\n        draft.push(value);\n      } else {\n        draft.splice(index, 0, value);\n      }\n    });\n\n    setItems(addAt(items, item));\n\n    setEditingRows(addAt(editingRows, true));\n  };\n\n  const asyncRemove = useCallback(\n    async (row: T, index: number) => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((row as any)[keyName]) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          await remove((row as any)[keyName]);\n          setEditingRows(\n            produce(editingRows, (draft) => {\n              draft.splice(index, 1);\n            }),\n          );\n        } else {\n          removeItemAt(index);\n          setEditingRows(\n            produce((draft) => {\n              draft.splice(index, 1);\n            }),\n          );\n        }\n      } catch (error) {\n        throw error;\n      }\n    },\n    [editingRows, keyName, remove, removeItemAt],\n  );\n\n  const asyncUpdate = useCallback(\n    async (row: T, index: number) => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((row as any)[keyName]) {\n          await update(row);\n        } else {\n          const result = await save(row, false);\n          removeItemAt(index);\n          addItem(result, index);\n        }\n\n        setEditingRows(\n          produce(editingRows, (draft) => {\n            draft[index] = false;\n          }),\n        );\n      } catch (error) {\n        throw error;\n      }\n    },\n    [addItem, editingRows, keyName, removeItemAt, save, update],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      setEditingRows(\n        produce(editingRows, (draft) => {\n          draft[index] = true;\n        }),\n      );\n    },\n    [editingRows],\n  );\n\n  return {\n    items,\n    editingRows,\n    add,\n    remove: asyncRemove,\n    edit,\n    save: asyncUpdate,\n    idPropertyName: keyName,\n  };\n}\n"],"sourceRoot":""}
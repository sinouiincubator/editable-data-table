{"version":3,"sources":["webpack:///./docs/PaginationEditableTableDemo.css?6cab","D:/workspaces/editable-data-table/docs/Demo.tsx","D:/workspaces/editable-data-table/docs/pagination-show.mdx","D:/workspaces/editable-data-table/docs/PaginationEditableTableDemo.css","D:/workspaces/editable-data-table/src/RowSelectColumn.tsx","D:/workspaces/editable-data-table/src/index.ts","D:/workspaces/editable-data-table/src/useEditingList.ts"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","usePaginationList","items","currentPage","pageSize","useMemo","slice","range","start","end","Array","fill","map","_","Demo","editingList","useEditingList","_usePagination","defaultCurrentPage","arguments","length","defaultPageSize","_useState","useState","_useState2","Object","slicedToArray","setCurrentPage","_useState3","_useState4","setPageSize","pageNo","newPageSize","usePagination","_usePagination2","data","editingRows","_usePaginationEditing","add","useCallback","save","item","index","edit","remove","usePaginationEditingListActions","_useState5","_useState6","searchText","setSearchText","paginationSelectedRows","isAllSelected","every","selectedRows","indexOf","isContainsSelected","some","toggleAllSelected","rows","filter","concat","toConsumableArray","setSelectedRows","removeAllSelectedRows","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_data","includes","stop","apply","this","usePaginationSelectedRows","react_default","createElement","TextInput","value","onChange","event","target","Button","raised","onClick","query","title","src","idPropertyName","rowClassName","startIndex","toggleRowSelected","name","editor","render","_value","_id","context","Fragment","editing","autoWidth","color","Pagination","total","size","layoutProps","MDXLayout","MDXContent","components","props","objectWithoutProperties","index_es","assign","mdxType","id","parentName","className","index_esm","__position","__code","__scope","Playground","docs_Demo","href","isMDXComponent","push","RowSelectColumn","_props$startIndex","TableColumn","width","Checkbox","checked","indeterminate","_row","d","__webpack_exports__","useSimpleEditingList","src_RowSelectColumn","EditableDataTable","url","defaultValue","_ref$keyName","keyName","_ref$alwaysEditing","alwaysEditing","_useRestListApi","useRestListApi","originItems","isLoading","isError","fetch","sortWith","reload","reset","searchParams","sorts","_useSimpleEditingList","setItems","removeEditingItems","updateItem","setReadonly","rest","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_4__","useEffect","getItemId","asyncRemove","_ref2","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","row","savedRowIds","isArray","_ref3","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","Boolean","_ref5","_x","_x2","asyncUpdate","_ref7","_callee2","newRow","_context2","sent","_x3","_x4","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"static/js/docs-pagination-show.4e9932e7.js","sourcesContent":["\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./PaginationEditableTableDemo.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./PaginationEditableTableDemo.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./PaginationEditableTableDemo.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, {\n  useEditingList,\n  TableColumn,\n  RowSelectColumn,\n} from '../src';\nimport './PaginationEditableTableDemo.css';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\n/**\n * 生成序列数组\n *\n * @param start 开始\n * @param end 结束\n */\nfunction range(start: number, end: number) {\n  return new Array(end - start).fill(null).map((_, idx) => start + idx);\n}\n\n/**\n * 分页的选中行状态\n *\n * @param editingList 可编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationSelectedRows(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  /**\n   * 是否全部选中\n   */\n  const isAllSelected = useMemo(() => {\n    return range(currentPage * pageSize, (currentPage + 1) * pageSize).every(\n      (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n    );\n  }, [currentPage, editingList.selectedRows, pageSize]);\n\n  /**\n   * 是否包含选中\n   */\n  const isContainsSelected = useMemo(() => {\n    return range(currentPage * pageSize, (currentPage + 1) * pageSize).some(\n      (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n    );\n  }, [currentPage, editingList.selectedRows, pageSize]);\n\n  /**\n   * 切换全选\n   */\n  const toggleAllSelected = useCallback(() => {\n    let rows: number[] = editingList.selectedRows;\n    const start = currentPage * pageSize;\n    const end = (currentPage + 1) * pageSize;\n    if (isAllSelected) {\n      rows = rows.filter((idx) => idx < start || idx >= end);\n    } else {\n      rows = [\n        ...rows,\n        ...range(start, end).filter((idx) => rows.indexOf(idx) === -1),\n      ];\n    }\n\n    editingList.setSelectedRows(rows);\n  }, [currentPage, editingList, isAllSelected, pageSize]);\n\n  /**\n   * 删除所有选中的数据\n   */\n  const removeAllSelectedRows = async () => {\n    const rows = editingList.items\n      .map((item, idx) => [item, idx])\n      .filter((_data, index) => editingList.selectedRows.includes(index));\n    await editingList.remove(rows);\n  };\n\n  return {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    removeAllSelectedRows,\n  };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  const [searchText, setSearchText] = useState('');\n  const handleQuery = () => {\n    editingList.query({ title: searchText });\n  };\n\n  const handleRowClassName = (index: number) => {\n    if (editingList.selectedRows.includes(index + currentPage * pageSize)) {\n      return 'sinoui-data-table-body-row_selected';\n    }\n\n    return '';\n  };\n\n  const paginationSelectedRows = usePaginationSelectedRows(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <div>\n      <TextInput\n        value={searchText}\n        onChange={(event) => setSearchText(event.target.value)}\n      />\n      <Button raised onClick={handleQuery}>\n        查询\n      </Button>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <Button onClick={paginationSelectedRows.removeAllSelectedRows}>\n        删除\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n        rowClassName={handleRowClassName}\n      >\n        <RowSelectColumn\n          startIndex={currentPage * pageSize}\n          selectedRows={editingList.selectedRows}\n          isAllSelected={paginationSelectedRows.isAllSelected}\n          isContainsSelected={paginationSelectedRows.isContainsSelected}\n          toggleAllSelected={paginationSelectedRows.toggleAllSelected}\n          toggleRowSelected={editingList.toggleRowSelected}\n        />\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n\nexport default Demo;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport Demo from './Demo';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"分页展示数据的可编辑数据表格\"\n    }}>{`分页展示数据的可编辑数据表格`}</h1>\n    <p>{`本章节介绍一个场景：一次性加载列表数据，但是在前端分页显示的可编辑数据表格。`}</p>\n    <p>{`包含的功能：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`分页展示列表`}</li>\n      <li parentName=\"ul\">{`加载数据`}</li>\n      <li parentName=\"ul\">{`查询`}</li>\n      <li parentName=\"ul\">{`新增`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, {\n  useEditingList,\n  TableColumn,\n  RowSelectColumn,\n} from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\n/**\n * 生成序列数组\n *\n * @param start 开始\n * @param end 结束\n */\nfunction range(start: number, end: number) {\n  return new Array(end - start).fill(null).map((_, idx) => start + idx);\n}\n\n/**\n * 分页的选中行状态\n *\n * @param editingList 可编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationSelectedRows(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const start = currentPage * pageSize;\n  const end = Math.min(editingList.items.length, (currentPage + 1) * pageSize);\n\n  /**\n   * 是否全部选中\n   */\n  const isAllSelected = useMemo(() => {\n    return range(start, end).every(\n      (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n    );\n  }, [currentPage, editingList.selectedRows, pageSize]);\n\n  /**\n   * 是否包含选中\n   */\n  const isContainsSelected = useMemo(() => {\n    return range(start, end).some(\n      (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n    );\n  }, [currentPage, editingList.selectedRows, pageSize]);\n\n  /**\n   * 切换全选\n   */\n  const toggleAllSelected = useCallback(() => {\n    let rows: number[] = editingList.selectedRows;\n    if (isAllSelected) {\n      rows = rows.filter((idx) => idx < start || idx >= end);\n    } else {\n      rows = [\n        ...rows,\n        ...range(start, end).filter((idx) => rows.indexOf(idx) === -1),\n      ];\n    }\n\n    editingList.setSelectedRows(rows);\n  }, [currentPage, editingList, isAllSelected, pageSize]);\n\n  /**\n   * 删除所有选中的数据\n   */\n  const removeAllSelectedRows = async () => {\n    const rows = editingList.items\n      .map((item, idx) => [item, idx])\n      .filter((_data, index) => editingList.selectedRows.includes(index));\n    await editingList.remove(rows);\n  };\n\n  return {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    removeAllSelectedRows,\n  };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  const [searchText, setSearchText] = useState('');\n  const handleQuery = () => {\n    editingList.query({ title: searchText });\n  };\n\n  const handleRowClassName = (index: number) => {\n    if (editingList.selectedRows.includes(index + currentPage * pageSize)) {\n      return 'sinoui-data-table-body-row_selected';\n    }\n\n    return '';\n  };\n\n  const paginationSelectedRows = usePaginationSelectedRows(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <div>\n      <TextInput\n        value={searchText}\n        onChange={(event) => setSearchText(event.target.value)}\n      />\n      <Button raised onClick={handleQuery}>\n        查询\n      </Button>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <Button onClick={paginationSelectedRows.removeAllSelectedRows}>\n        删除\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n        rowClassName={handleRowClassName}\n      >\n        <RowSelectColumn\n          startIndex={currentPage * pageSize}\n          selectedRows={editingList.selectedRows}\n          isAllSelected={paginationSelectedRows.isAllSelected}\n          isContainsSelected={paginationSelectedRows.isContainsSelected}\n          toggleAllSelected={paginationSelectedRows.toggleAllSelected}\n          toggleRowSelected={editingList.toggleRowSelected}\n        />\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n\nexport default Demo;\n`}</code></pre>\n    <p>{`效果：`}</p>\n    <Playground __position={0} __code={'<Demo />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Demo\n    }} mdxType=\"Playground\">\n  <Demo mdxType=\"Demo\" />\n    </Playground>\n    <p>{`如果你感觉上面的例子有点复杂，可以看看下面的步骤分析：`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%8A%A0%E8%BD%BD%E5%B9%B6%E5%B1%95%E7%8E%B0%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE\"\n        }}>{`加载并展现列表数据`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%88%86%E9%A1%B5%E5%B1%95%E7%8E%B0%E6%95%B0%E6%8D%AE\"\n        }}>{`分页展现数据`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AE\"\n        }}>{`新增数据`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E7%BC%96%E8%BE%91%E4%B8%8E%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE\"\n        }}>{`编辑与删除数据`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E6%9F%A5%E8%AF%A2%E5%88%97%E8%A1%A8\"\n        }}>{`查询列表`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E9%80%89%E6%8B%A9\"\n        }}>{`选择`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E6%95%B0%E6%8D%AE\"\n        }}>{`删除选中数据`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"加载并展现列表数据\"\n    }}>{`加载并展现列表数据`}</h2>\n    <p>{`本例需要一次性加载全部的列表数据，而不是`}<a parentName=\"p\" {...{\n        \"href\": \"/pagination-editable-table\"\n      }}>{`分页加载数据`}</a>{`。使用`}<inlineCode parentName=\"p\">{`useEditingList`}</inlineCode>{`来加载列表数据。代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n\n  return (\n    <EditableDataTable\n      data={editingList.items}\n      idPropertyName={editingList.idPropertyName}\n    >\n      <TableColumn title=\"id\" name=\"id\" />\n      <TableColumn title=\"标题\" name=\"title\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"分页展现数据\"\n    }}>{`分页展现数据`}</h2>\n    <p>{`可以使用`}<inlineCode parentName=\"p\">{`sinoui-components/Pagination`}</inlineCode>{`组件作为分页器，展现页码信息和切换页码的操作按钮。`}<inlineCode parentName=\"p\">{`Pagination`}</inlineCode>{`组件需要以下几个关键属性：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`total`}</inlineCode>{` - 列表数据总数目。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`currentPage`}</inlineCode>{` - 当前页码。从`}<inlineCode parentName=\"li\">{`1`}</inlineCode>{`开始。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pageSize`}</inlineCode>{` - 页大小。一页能够呈现数据的数目。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` - 指定当前页码、页大小发生变化的回调函数。`}</li>\n    </ul>\n    <p>{`上面三个属性，`}<inlineCode parentName=\"p\">{`total`}</inlineCode>{`等于`}<inlineCode parentName=\"p\">{`editingList.items.length`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`currentPage`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`pageSize`}</inlineCode>{`是变化的数据，所以需要定义两个状态来维护，如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n  const [currentPage, setCurrentPage] = useState(0); // 当前页码，习惯从0开始。注意与Pagination.currentPage的区别。\n  const [pageSize, setPageSize] = useState(10);\n\n  const handlePaginationChange = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return (\n    <div>\n      <!--此处省略EditableDataTable-->\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={handlePaginationChange}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`上面的代码只是展现出了分页器，接下来我们来解决分页展现列表数据（注意哟，这个时候列表还是展现所有的数据）。`}</p>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`属性是用来接收需要展现的一组数据的属性。`}<inlineCode parentName=\"p\">{`data={editingList.items}`}</inlineCode>{`会将所有的数据给了可编辑表格呈现出来。现在想要只呈现当前页的数据，那就计算出当前页的数据数组指定给`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`即可，代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useMemo } from 'react';\n// ... 省略一部分import代码\n\nfunction Demo() {\n  // ...省略一部分代码\n  const data = useMemo(() =>\n    editingList.items.slice(\n      currentPage * pageSize,\n      (currentPage + 1) * pageSize,\n    ),\n    [editingList.items, currentPage, pageSize],\n  );\n\n  return (\n    <div>\n      <EditableDataTable data={data}>\n        <!--此处省略TableColumn-->\n      </EditableDataTable>\n      <!--此处省略Pagination-->\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`这里使用`}<a parentName=\"p\" {...{\n        \"href\": \"https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo\"\n      }}>{`React useMemo`}</a>{`缓存了分页数据的计算。`}</p>\n    <p>{`完整代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n\n  const [currentPage, setCurrentPage] = useState(0); // 当前页码，习惯从0开始。注意与Pagination.currentPage的区别。\n  const [pageSize, setPageSize] = useState(10);\n\n  const handlePaginationChange = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  const data = useMemo(\n    () =>\n      editingList.items.slice(\n        currentPage * pageSize,\n        (currentPage + 1) * pageSize,\n      ),\n    [editingList.items, currentPage, pageSize],\n  );\n\n  return (\n    <div>\n      <EditableDataTable\n        data={data}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn title=\"id\" name=\"id\" />\n        <TableColumn title=\"标题\" name=\"title\" />\n      </EditableDataTable>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={handlePaginationChange}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"提炼状态管理\"\n    }}>{`提炼状态管理`}</h2>\n    <p>{`Demo 组件目前已经比较复杂了，需要管理很多状态，我们可以使用`}<a parentName=\"p\" {...{\n        \"href\": \"https://zh-hans.reactjs.org/docs/hooks-custom.html\"\n      }}>{`自定义 hook`}</a>{`将状态管理提炼到更小的函数中进行维护。现在我们来提炼两个自定义 hook，分别是`}<inlineCode parentName=\"p\">{`usePagination`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`usePaginationList`}</inlineCode>{`。`}</p>\n    <p>{`我们可以将分页器状态和更新方法迁移到一个自定义 hook 中，我们取名为`}<inlineCode parentName=\"p\">{`usePagination`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n`}</code></pre>\n    <p>{`这样 Demo 组件中的分页代码可以简化一下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  const [currentPage, pageSize, update] = usePagination();\n\n  return (\n    <div>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={(pageNo, newPageSize) => update(pageNo - 1, newPageSize)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`可以将获取分页的列表数据也提炼到自动以 hook 中，我们取名为`}<inlineCode parentName=\"p\">{`usePaginationList`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n`}</code></pre>\n    <p>{`Demo 组件可以简化`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`的计算：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n\n  return (\n    <div>\n      <EditableDataTable data={data} />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`完整的代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n\n  return (\n    <div>\n      <EditableDataTable\n        data={data}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn title=\"id\" name=\"id\" />\n        <TableColumn title=\"标题\" name=\"title\" />\n      </EditableDataTable>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={(pageNo, newPageSize) => update(pageNo - 1, newPageSize)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"新增数据\"\n    }}>{`新增数据`}</h2>\n    <p>{`点击新增按钮时，在当前页新增一条数据。这个要求需要注意的是`}<strong parentName=\"p\">{`在当前页`}</strong>{`新增一条数据。所以我们应该按照下面的方式新增数据：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`editingList.add({}, currentPage * pageSize);\n`}</code></pre>\n    <p>{`示例代码：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import Button from 'sinoui-components/Button';\n\nfunction Demo() {\n  const handleAdd = () => {\n    editingList.add({}, currentPage * pageSize);\n  };\n\n  return (\n    <div>\n      <Button raised onClick={handleAdd}>\n        新增\n      </Button>\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"编辑与删除数据\"\n    }}>{`编辑与删除数据`}</h2>\n    <p><inlineCode parentName=\"p\">{`editingList`}</inlineCode>{`提供的`}<inlineCode parentName=\"p\">{`edit`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`save`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`remove`}</inlineCode>{`方法都是根据数据在整个列表的索引位置进行操作的。所以我们在使用这些方法时，需要与分页状态相结合。`}</p>\n    <p>{`首先我们通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`添加一个操作列：在编辑状态时，有保存和删除按钮；在非编辑状态时，有编辑和删除按钮。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<EditableDataTable>\n  <TableColumn\n    title=\"操作\"\n    render={(value, rowData, index, id, context) => (\n      <>\n        {context.editing ? <Button>保存</Button> : <Button>编辑</Button>}\n        <Button color=\"danger\">删除</Button>\n      </>\n    )}\n  />\n</EditableDataTable>\n`}</code></pre>\n    <p>{`保存按钮的点击事件回调函数：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button\n  onClick={() => editingList.save(rowData, currentPage * pageSize + index)}\n>\n  保存\n</Button>\n`}</code></pre>\n    <p>{`重点是`}<inlineCode parentName=\"p\">{`currentPage * pageSize + index`}</inlineCode>{`。`}</p>\n    <p>{`编辑按钮：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button onClick={() => editingList.edit(currentPage * pageSize + index)}>\n  编辑\n</Button>\n`}</code></pre>\n    <p>{`删除按钮：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button\n  onClick={() => editingList.remove(rowData, currentPage * pageSize + index)}\n>\n  删除\n</Button>\n`}</code></pre>\n    <p>{`当然，别忘了将`}<inlineCode parentName=\"p\">{`editingList.editingRows`}</inlineCode>{`传给`}<inlineCode parentName=\"p\">{`EditableDataTable.editingRows`}</inlineCode>{`，并且定义单元格编辑器：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<EditableDataTable editingRows={editingList.editingRows}>\n  <TableColumn title=\"标题\" name=\"title\" editor=\"input\" />\n</EditableDataTable>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"再次提炼状态管理\"\n    }}>{`再次提炼状态管理`}</h2>\n    <p>{`增加、删除、修改、编辑四个动作都与翻页有关系，我们可以将这四个方法提炼到一个自定义 hook：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n`}</code></pre>\n    <p>{`之后我们的代码就是这样子的：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, { useEditingList, TableColumn } from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <div>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"校验\"\n    }}>{`校验`}</h2>\n    <p>{`在这个场景中，使用`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`内置的校验即可。`}</p>\n    <p>{`首先定义一下数据行的校验方法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function validate(rowData) {\n  const errors: { [x: string]: string } = {};\n\n  if (!rowData.title) {\n    errors.title = '必填';\n  }\n\n  return errors;\n}\n`}</code></pre>\n    <p>{`然后将`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`传递给`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<EditableDataTable validate={validate} />\n`}</code></pre>\n    <p>{`到这一步，修改编辑器的值，就会调用`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`方法校验数据是否有问题，这就是“实时校验”。`}</p>\n    <p>{`最后，调整保存方法，先校验数据，然后再保存数据：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button\n  autoWidth\n  onClick={() => {\n    if (!context.validate()) {\n      alert('数据填写不完整');\n    } else {\n      save();\n    }\n  }}\n>\n  保存\n</Button>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"查询列表\"\n    }}>{`查询列表`}</h2>\n    <p><inlineCode parentName=\"p\">{`editingList.query(searechParams)`}</inlineCode>{`是用来查询的方法，可以在查询表单提交时调用这个方法，完成查询事宜。`}</p>\n    <p>{`举一个与某内部项目查询表单组件的组合，完成表格数据查询的功能。`}</p>\n    <p>{`例子 1：`}<inlineCode parentName=\"p\">{`SearchForm`}</inlineCode>{`是查询表单组件，`}<inlineCode parentName=\"p\">{`SearchButton`}</inlineCode>{`是查询按钮。点击查询按钮，查询表单会发出提交（submit）事件。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<SearchForm onSubmit={editingList.query}>\n  <SearchFormItem>\n    <Label>标题</Label>\n    <TextInput name=\"title\" />\n  </SearchFormItem>\n  <SearchButton />\n</SearchForm>\n`}</code></pre>\n    <p>{`例子 2：`}<inlineCode parentName=\"p\">{`SearchFormState`}</inlineCode>{`是用来切换简单和复杂查询表单的组件，`}<inlineCode parentName=\"p\">{`advancedForm`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`simpleForm`}</inlineCode>{`两个属性分别用来指定复杂和查询表单。它有`}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{`属性，在查询表单的查询按钮被点击时，调用相对应的回调函数。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<SearchFormState\n  onSubmit={editingList.query}\n  advancedForm={AdvancedSearchForm}\n  simpleForm={SimpleSearchForm}\n/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"选择\"\n    }}>{`选择`}</h2>\n    <p>{`这个场景的选择因分页和一次性加载的要求，所以处理方式也会比`}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`普通选择`}</a>{`要复杂一些。`}<inlineCode parentName=\"p\">{`useEditingList`}</inlineCode>{`默认集成了选择行状态管理逻辑，但是需要二次处理才能适合当前这个场景。`}</p>\n    <p>{`首先，我们使用`}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`RowTableColumn`}</a>{`来渲染选择列：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<RowSelectColumn\n  startIndex={currentPage * pageSize}\n  selectedRows={editingList.selectedRows}\n  isAllSelected={editingList.isAllSelected}\n  isContainsSelected={editingList.isContainsSelected}\n  toggleAllSelected={editingList.toggleAllSelected}\n  toggleRowSelected={editingList.toggleRowSelected}\n/>\n`}</code></pre>\n    <p>{`这个组件的三个属性需要做分页调整：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isAllSelected`}</inlineCode>{` - 判断是否全部选中。`}<strong parentName=\"li\">{`更准确地说`}</strong>{`，应该是判断当前页的数据是否全部选中。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isContainsSelected`}</inlineCode>{` - 判断是否包含选中数据。`}<strong parentName=\"li\">{`更准确地说`}</strong>{`，应该是判断当前页是否有选中的数据行。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleAllSelected`}</inlineCode>{` - 切换全选。`}<strong parentName=\"li\">{`更准确地说`}</strong>{`，应该是切换当前页所有数据的选中状态，要么全选，要么全部取消选中。`}</li>\n    </ul>\n    <p>{`以上三个属性应该只跟当前页的数据相关，但是`}<inlineCode parentName=\"p\">{`editingList`}</inlineCode>{`提供的选择状态是与整个列表相关的，所以需要做二次处理。`}</p>\n    <p>{`首先，我们创建一个自定义 hook，名称为`}<inlineCode parentName=\"p\">{`usePaginationSelectedRows`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function usePaginationSelectedRows(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const start = currentPage * pageSize;\n  const end = Math.min(editingList.items.length, (currentPage + 1) * pageSize);\n\n  // TODO: 下面的isAllSelected、isContainsSelected、toggleAllSelected的代码都放在这\n\n  return {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n  };\n}\n`}</code></pre>\n    <p>{`然后，我们来处理`}<inlineCode parentName=\"p\">{`isAllSelected`}</inlineCode>{`，它表示当前页是否全部选中，那么我们只需要拿到当前页所有行，然后看看每一行是否都在`}<inlineCode parentName=\"p\">{`editingList.selectedRows`}</inlineCode>{`中即可。`}</p>\n    <p>{`为了方便生成当前页所有行的索引数组，创建一个 range 方法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 生成序列数组\n *\n * @param start 开始\n * @param end 结束\n */\nfunction range(start: number, end: number) {\n  return new Array(end - start).fill(null).map((_, idx) => start + idx);\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`isAllSelected`}</inlineCode>{`的计算过程：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 是否全部选中\n */\nconst isAllSelected = useMemo(() => {\n  return range(start, end).every(\n    (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n  );\n}, [currentPage, editingList.selectedRows, pageSize]);\n`}</code></pre>\n    <p>{`接着处理`}<inlineCode parentName=\"p\">{`isContainsSelected`}</inlineCode>{`，它表示当前页是否有选中的数据行：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 是否包含选中\n */\nconst isContainsSelected = useMemo(() => {\n  return range(start, end).some(\n    (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n  );\n}, [currentPage, editingList.selectedRows, pageSize]);\n`}</code></pre>\n    <p>{`然后处理一下`}<inlineCode parentName=\"p\">{`toggleAllSelected`}</inlineCode>{`，它只能切换当前页行的选中状态：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 切换全选\n */\nconst toggleAllSelected = useCallback(() => {\n  let rows: number[] = editingList.selectedRows;\n  if (isAllSelected) {\n    rows = rows.filter((idx) => idx < start || idx >= end);\n  } else {\n    rows = [\n      ...rows,\n      ...range(start, end).filter((idx) => rows.indexOf(idx) === -1),\n    ];\n  }\n\n  editingList.setSelectedRows(rows);\n}, [currentPage, editingList, isAllSelected, pageSize]);\n`}</code></pre>\n    <p>{`最后，在`}<inlineCode parentName=\"p\">{`Demo`}</inlineCode>{`组件中使用`}<inlineCode parentName=\"p\">{`usePaginationSelectedRows`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  // ...\n  const paginationSelectedRows = usePaginationSelectedRows(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <EditableDataTable>\n      <RowSelectColumn\n        startIndex={currentPage * pageSize}\n        selectedRows={editingList.selectedRows}\n        isAllSelected={paginationSelectedRows.isAllSelected}\n        isContainsSelected={paginationSelectedRows.isContainsSelected}\n        toggleAllSelected={paginationSelectedRows.toggleAllSelected}\n        toggleRowSelected={editingList.toggleRowSelected}\n      />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"删除选中数据\"\n    }}>{`删除选中数据`}</h2>\n    <p>{`在`}<inlineCode parentName=\"p\">{`usePaginationSelectedRows`}</inlineCode>{`中添加一个`}<inlineCode parentName=\"p\">{`removeAllSelectedRows`}</inlineCode>{`方法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function usePaginationSelectedRows() {\n  /**\n   * 删除所有选中的数据\n   */\n  const removeAllSelectedRows = async () => {\n    const rows = editingList.items\n      .map((item, idx) => [item, idx])\n      .filter((_data, index) => editingList.selectedRows.includes(index));\n    await editingList.remove(rows);\n  };\n\n  return {\n    // ...\n    removeAllSelectedRows,\n  };\n}\n`}</code></pre>\n    <p>{`将`}<inlineCode parentName=\"p\">{`paginationSelectedRows.removeAllSelectedRows`}</inlineCode>{`方法绑定到删除按钮的点击事件上即可。`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".sinoui-editable-data-table .sinoui-data-table-body-row_selected {\\n  background-color: rgba(0, 0, 0, 0.12);\\n}\\n\", \"\"]);\n","import React from 'react';\nimport Checkbox from 'sinoui-components/Checkbox';\nimport TableColumn from './TableColumn';\n\ninterface Props {\n  /**\n   * 选中行\n   */\n  selectedRows: number[];\n  /**\n   * 是否全选\n   */\n  isAllSelected: boolean;\n  /**\n   * 是否选中部分\n   */\n  isContainsSelected: boolean;\n  /**\n   * 全选时的回调函数\n   */\n  toggleAllSelected: () => void;\n  /**\n   * 选中一行时的回调函数\n   */\n  toggleRowSelected: (index: number) => void;\n  startIndex?: number;\n}\n\nfunction RowSelectColumn(props: Props) {\n  const {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    selectedRows,\n    toggleRowSelected,\n    startIndex = 0,\n  } = props;\n\n  return (\n    <TableColumn\n      width={50}\n      title={\n        <Checkbox\n          checked={isAllSelected}\n          indeterminate={!isAllSelected && isContainsSelected}\n          onChange={toggleAllSelected}\n        />\n      }\n      render={(_value, _row, index, id, context) => (\n        <Checkbox\n          checked={selectedRows.indexOf(index + startIndex) !== -1}\n          onChange={() => toggleRowSelected(index + startIndex)}\n        />\n      )}\n    />\n  );\n}\n\nexport default RowSelectColumn;\n","import EditableDataTable, {\n  Props as EditableDataTableProps,\n} from './EditableDataTable';\nimport TableColumn, { Props as TableColumnProps } from './TableColumn';\nimport EditorProps from './shared/EditorProps';\nimport useEditingList from './useEditingList';\nimport useSimpleEditingList from './useSimpleEditingList';\nimport RowSelectColumn from './RowSelectColumn';\n\nexport default EditableDataTable;\n\nexport {\n  EditableDataTableProps,\n  TableColumn,\n  TableColumnProps,\n  EditorProps,\n  useEditingList,\n  useSimpleEditingList,\n  RowSelectColumn,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport useRestListApi, { Options } from '@sinoui/use-rest-list-api';\nimport { useEffect, useCallback } from 'react';\nimport useSimpleEditingList, {\n  SimpleEditingListOptions,\n} from './useSimpleEditingList';\n\n/**\n * 维护可编辑列表的hook\n */\nexport default function useEditingList<T>(\n  url: string,\n  defaultValue: T[] = [],\n  options?: Options<T> & SimpleEditingListOptions<T>,\n) {\n  const { keyName = 'id', alwaysEditing = false } = options || {};\n  const {\n    items: originItems,\n    remove,\n    update,\n    save,\n    isLoading,\n    isError,\n    query,\n    fetch,\n    sortWith,\n    reload,\n    reset,\n    searchParams,\n    sorts,\n  } = useRestListApi<T>(url, defaultValue, options);\n  const {\n    setItems,\n    remove: removeEditingItems,\n    updateItem,\n    setReadonly,\n    ...rest\n  } = useSimpleEditingList(originItems, options);\n\n  useEffect(() => {\n    setItems(originItems);\n  }, [setItems, originItems]);\n\n  const getItemId = useCallback((item: any) => item[keyName], [keyName]);\n  /**\n   * 删除数据行\n   *\n   * @param row 数据行对象或者一组数据行与索引的数组\n   * @param index 数据行所在的索引位置\n   */\n  const asyncRemove = useCallback(\n    async (row: T | [T, number][], index?: number) => {\n      if (Array.isArray(row)) {\n        const savedRowIds = row\n          .map(([item]) => getItemId(item))\n          .filter(Boolean);\n        if (savedRowIds.length > 0) {\n          await remove(savedRowIds, false);\n        }\n      } else if (getItemId(row)) {\n        await remove(getItemId(row), false);\n      }\n\n      removeEditingItems(\n        Array.isArray(row) ? row.map(([, idx]) => idx) : (index as number),\n      );\n    },\n    [remove, removeEditingItems, getItemId],\n  );\n\n  /**\n   * 更新数据行\n   *\n   * @param row 数据行对象\n   * @param index 数据行所在位置\n   */\n  const asyncUpdate = useCallback(\n    async (row: T, index: number) => {\n      let newRow;\n      if (getItemId(row)) {\n        newRow = await update(row, false);\n      } else {\n        newRow = await save(row, false);\n      }\n\n      updateItem(index, newRow);\n\n      if (!alwaysEditing) {\n        setReadonly(index);\n      }\n    },\n    [getItemId, updateItem, alwaysEditing, update, save, setReadonly],\n  );\n\n  return {\n    ...rest,\n    query,\n    fetch,\n    sortWith,\n    reload,\n    reset,\n    searchParams,\n    sorts,\n    isLoading,\n    isError,\n    remove: asyncRemove,\n    save: asyncUpdate,\n    idPropertyName: keyName,\n    setReadonly,\n  };\n}\n"],"sourceRoot":""}
{"version":3,"sources":["D:/workspaces/editable-data-table/docs/validate.mdx","D:/workspaces/editable-data-table/src/RowSelectColumn.tsx","D:/workspaces/editable-data-table/src/index.ts","D:/workspaces/editable-data-table/src/useEditingList.ts"],"names":["name","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_3__","__position","__code","__scope","this","Playground","EditableDataTable","useSimpleEditingList","TableColumn","Button","validate","rowData","errors","duty","startsWith","editingList","alwaysEditing","react__WEBPACK_IMPORTED_MODULE_1___default","a","Fragment","sinoui_components_Button__WEBPACK_IMPORTED_MODULE_5__","raised","onClick","validateAllEditingRows","console","log","items","alert","add","_src__WEBPACK_IMPORTED_MODULE_4__","data","editingRows","touched","onFieldChange","validateField","order","title","editor","isMDXComponent","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","sinoui_components_Checkbox__WEBPACK_IMPORTED_MODULE_1__","_TableColumn__WEBPACK_IMPORTED_MODULE_2__","RowSelectColumn","isAllSelected","isContainsSelected","toggleAllSelected","selectedRows","toggleRowSelected","_props$startIndex","startIndex","createElement","width","checked","indeterminate","onChange","render","_value","_row","index","indexOf","_EditableDataTable__WEBPACK_IMPORTED_MODULE_0__","_TableColumn__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2___default","_useEditingList__WEBPACK_IMPORTED_MODULE_3__","_useSimpleEditingList__WEBPACK_IMPORTED_MODULE_4__","_RowSelectColumn__WEBPACK_IMPORTED_MODULE_5__","useEditingList","url","defaultValue","arguments","length","undefined","options","_ref$keyName","keyName","_ref$alwaysEditing","_useRestListApi","useRestListApi","originItems","remove","update","save","isLoading","isError","query","fetch","sortWith","reload","reset","searchParams","sorts","_useSimpleEditingList","setItems","removeEditingItems","updateItem","setReadonly","rest","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_4__","useEffect","getItemId","useCallback","item","asyncRemove","_ref2","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","mark","_callee","row","savedRowIds","wrap","_context","prev","next","Array","isArray","map","_ref3","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","filter","Boolean","_ref5","stop","_x","_x2","apply","asyncUpdate","_ref7","_callee2","newRow","_context2","sent","_x3","_x4","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","idPropertyName"],"mappings":"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","file":"static/js/docs-validate.c18dcbb1.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport EditableDataTable, { useSimpleEditingList, TableColumn } from '../src';\nimport Button from 'sinoui-components/Button';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Demo = makeShortcode(\"Demo\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"校验\"\n    }}>{`校验`}</h1>\n    <p>{`EditableDataTable 内置支持校验，也支持在表格组件的外部维护校验状态。可以使用 useSimpleEditingList 管理外置的校验状态。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport EditableDataTable, {\n  useSimpleEditingList,\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\ninterface User {\n  id: string;\n  name: string;\n  duty?: string;\n}\n\nfunction validate(rowData: User) {\n  const errors = {};\n\n  if (!rowData.name) {\n    errors.name = '必填';\n  }\n\n  if (rowData.duty && rowData.duty.startsWith('1')) {\n    errors.duty = '职务不能以1开头';\n  }\n\n  return errors;\n}\n\nfunction Demo() {\n  const editingList = useSimpleEditingList<User>(\n    [\n      { id: '1', name: 'Jacking', duty: 'developer' },\n      { id: '2', name: 'zinuo', duty: 'developer' },\n    ],\n    {\n      alwaysEditing: true,\n      validate,\n    },\n  );\n\n  const handleSave = () => {\n    if (!editingList.validateAllEditingRows()) {\n      alert('数据校验失败，请检查。');\n    } else {\n      console.log('需要保存的数据', editingList.items);\n      alert('保存数据成功');\n    }\n  };\n\n  return (\n    <>\n      <button onClick={handleSave}>保存</button>\n      <EditableDataTable\n        data={editingList.items}\n        editingRows={editingList.editingRows}\n        errors={editingList.errors}\n        touched={editingList.touched}\n        onFieldChange={editingList.validateField}\n      >\n        <TableColumn order title=\"序号\" />\n        <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" />\n        <TableColumn title=\"职务\" name=\"duty\" editor=\"input\" />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`演示效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  function validate(rowData) {\\n    const errors = {}\\n    if (!rowData.name) {\\n      errors.name = \\'必填\\'\\n    }\\n\\n    if (rowData.duty && rowData.duty.startsWith(\\'1\\')) {\\n      errors.duty = \\'职务不能以1开头\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  function Demo() {\\n    const editingList = useSimpleEditingList(\\n      [\\n        { id: \\'1\\', name: \\'Jacking\\', duty: \\'developer\\' },\\n        { id: \\'2\\', name: \\'zinuo\\', duty: \\'developer\\' },\\n      ],\\n      {\\n        alwaysEditing: true,\\n        validate,\\n      },\\n    )\\n\\n    const handleSave = () => {\\n      if (!editingList.validateAllEditingRows()) {\\n        alert(\\'数据校验失败，请检查。\\')\\n      } else {\\n        console.log(\\'需要保存的数据\\', editingList.items)\\n        alert(\\'保存数据成功\\')\\n      }\\n    }\\n\\n    return (\\n      <>\\n        <Button raised onClick={handleSave}>\\n          保存\\n        </Button>\\n        <Button raised onClick={() => editingList.add({})}>\\n          新增\\n        </Button>\\n        <EditableDataTable\\n          data={editingList.items}\\n          editingRows={editingList.editingRows}\\n          errors={editingList.errors}\\n          touched={editingList.touched}\\n          onFieldChange={editingList.validateField}\\n        >\\n          <TableColumn order title=\\\"序号\\\" />\\n          <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n          <TableColumn title=\\\"职务\\\" name=\\\"duty\\\" editor=\\\"input\\\" />\\n        </EditableDataTable>\\n      </>\\n    )\\n  }\\n\\n  return <Demo />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      EditableDataTable,\n      useSimpleEditingList,\n      TableColumn,\n      Button\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(rowData) {\n          const errors = {};\n\n          if (!rowData.name) {\n            errors.name = '必填';\n          }\n\n          if (rowData.duty && rowData.duty.startsWith('1')) {\n            errors.duty = '职务不能以1开头';\n          }\n\n          return errors;\n        }\n\n        function Demo() {\n          const editingList = useSimpleEditingList([{\n            id: '1',\n            name: 'Jacking',\n            duty: 'developer'\n          }, {\n            id: '2',\n            name: 'zinuo',\n            duty: 'developer'\n          }], {\n            alwaysEditing: true,\n            validate\n          });\n\n          const handleSave = () => {\n            if (!editingList.validateAllEditingRows()) {\n              alert('数据校验失败，请检查。');\n            } else {\n              console.log('需要保存的数据', editingList.items);\n              alert('保存数据成功');\n            }\n          };\n\n          return <>\n      <Button raised onClick={handleSave} mdxType=\"Button\">保存</Button>\n      <Button raised onClick={() => editingList.add({})} mdxType=\"Button\">新增</Button>\n      <EditableDataTable data={editingList.items} editingRows={editingList.editingRows} errors={editingList.errors} touched={editingList.touched} onFieldChange={editingList.validateField} mdxType=\"EditableDataTable\">\n        <TableColumn order title=\"序号\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"职务\" name=\"duty\" editor=\"input\" mdxType=\"TableColumn\" />\n      </EditableDataTable>\n    </>;\n        }\n\n        return <Demo mdxType=\"Demo\" />;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import React from 'react';\nimport Checkbox from 'sinoui-components/Checkbox';\nimport TableColumn from './TableColumn';\n\ninterface Props {\n  /**\n   * 选中行\n   */\n  selectedRows: number[];\n  /**\n   * 是否全选\n   */\n  isAllSelected: boolean;\n  /**\n   * 是否选中部分\n   */\n  isContainsSelected: boolean;\n  /**\n   * 全选时的回调函数\n   */\n  toggleAllSelected: () => void;\n  /**\n   * 选中一行时的回调函数\n   */\n  toggleRowSelected: (index: number) => void;\n  startIndex?: number;\n}\n\nfunction RowSelectColumn(props: Props) {\n  const {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    selectedRows,\n    toggleRowSelected,\n    startIndex = 0,\n  } = props;\n\n  return (\n    <TableColumn\n      width={50}\n      title={\n        <Checkbox\n          checked={isAllSelected}\n          indeterminate={!isAllSelected && isContainsSelected}\n          onChange={toggleAllSelected}\n        />\n      }\n      render={(_value, _row, index) => (\n        <Checkbox\n          checked={selectedRows.indexOf(index + startIndex) !== -1}\n          onChange={() => toggleRowSelected(index + startIndex)}\n        />\n      )}\n    />\n  );\n}\n\nexport default RowSelectColumn;\n","import EditableDataTable, {\n  Props as EditableDataTableProps,\n} from './EditableDataTable';\nimport TableColumn, { Props as TableColumnProps } from './TableColumn';\nimport EditorProps from './shared/EditorProps';\nimport useEditingList from './useEditingList';\nimport useSimpleEditingList from './useSimpleEditingList';\nimport RowSelectColumn from './RowSelectColumn';\n\nexport default EditableDataTable;\n\nexport {\n  EditableDataTableProps,\n  TableColumn,\n  TableColumnProps,\n  EditorProps,\n  useEditingList,\n  useSimpleEditingList,\n  RowSelectColumn,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport useRestListApi, { Options } from '@sinoui/use-rest-list-api';\nimport { useEffect, useCallback } from 'react';\nimport useSimpleEditingList, {\n  SimpleEditingListOptions,\n} from './useSimpleEditingList';\n\n/**\n * 维护可编辑列表的hook\n */\nexport default function useEditingList<T>(\n  url: string,\n  defaultValue: T[] = [],\n  options?: Options<T> & SimpleEditingListOptions<T>,\n) {\n  const { keyName = 'id', alwaysEditing = false } = options || {};\n  const {\n    items: originItems,\n    remove,\n    update,\n    save,\n    isLoading,\n    isError,\n    query,\n    fetch,\n    sortWith,\n    reload,\n    reset,\n    searchParams,\n    sorts,\n  } = useRestListApi<T>(url, defaultValue, options);\n  const {\n    setItems,\n    remove: removeEditingItems,\n    updateItem,\n    setReadonly,\n    ...rest\n  } = useSimpleEditingList(originItems, options);\n\n  useEffect(() => {\n    setItems(originItems);\n  }, [setItems, originItems]);\n\n  const getItemId = useCallback((item: any) => item[keyName], [keyName]);\n  /**\n   * 删除数据行\n   *\n   * @param row 数据行对象或者一组数据行与索引的数组\n   * @param index 数据行所在的索引位置\n   */\n  const asyncRemove = useCallback(\n    async (row: T | [T, number][], index?: number) => {\n      if (Array.isArray(row)) {\n        const savedRowIds = row\n          .map(([item]) => getItemId(item))\n          .filter(Boolean);\n        if (savedRowIds.length > 0) {\n          await remove(savedRowIds, false);\n        }\n      } else if (getItemId(row)) {\n        await remove(getItemId(row), false);\n      }\n\n      removeEditingItems(\n        Array.isArray(row) ? row.map(([, idx]) => idx) : (index as number),\n      );\n    },\n    [remove, removeEditingItems, getItemId],\n  );\n\n  /**\n   * 更新数据行\n   *\n   * @param row 数据行对象\n   * @param index 数据行所在位置\n   */\n  const asyncUpdate = useCallback(\n    async (row: T, index: number) => {\n      let newRow;\n      if (getItemId(row)) {\n        newRow = await update(row, false);\n      } else {\n        newRow = await save(row, false);\n      }\n\n      updateItem(index, newRow);\n\n      if (!alwaysEditing) {\n        setReadonly(index);\n      }\n    },\n    [getItemId, updateItem, alwaysEditing, update, save, setReadonly],\n  );\n\n  return {\n    ...rest,\n    query,\n    fetch,\n    sortWith,\n    reload,\n    reset,\n    searchParams,\n    sorts,\n    isLoading,\n    isError,\n    remove: asyncRemove,\n    save: asyncUpdate,\n    idPropertyName: keyName,\n    setReadonly,\n  };\n}\n"],"sourceRoot":""}
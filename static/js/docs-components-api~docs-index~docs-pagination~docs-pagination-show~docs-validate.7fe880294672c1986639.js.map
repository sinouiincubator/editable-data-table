{"version":3,"sources":["D:/workspaces/editable-data-table/src/Table.tsx","D:/workspaces/editable-data-table/src/EmptyDataTableRow.tsx","D:/workspaces/editable-data-table/src/DataTableColGroup.tsx","D:/workspaces/editable-data-table/src/DataTableHead.tsx","D:/workspaces/editable-data-table/src/DataTableBodyRow.tsx","D:/workspaces/editable-data-table/src/DataTableBody.tsx","D:/workspaces/editable-data-table/src/EditableDataTable.tsx","D:/workspaces/editable-data-table/src/DataTableCellEditor.tsx","D:/workspaces/editable-data-table/src/DataTableBodyCell.tsx","D:/workspaces/editable-data-table/src/DataTableHeadCell.tsx","D:/workspaces/editable-data-table/src/TableColumn.tsx","D:/workspaces/editable-data-table/src/shared/DataTableRowContext.ts","D:/workspaces/editable-data-table/src/shared/EditableDataTableContext.ts","D:/workspaces/editable-data-table/src/shared/EditingBodyRowContainer.ts","D:/workspaces/editable-data-table/src/shared/constants.ts","D:/workspaces/editable-data-table/src/useSimpleEditingList.ts"],"names":["captionTypeStyle","css","_templateObject","props","theme","typography","body1","fontSize","fontFamily","fontWeightMedium","color","bodyTypeStyle","_templateObject2","fontWeight","dataTableCellStyle","_templateObject3","palette","type","rowBgColor","light","tableRowSelected","tableRowHover","dark","StyledTable","styled","Table","_templateObject4","primary","caption","Wrapper","div","EmptyDataTableRow_templateObject","EmptyDataTableRow","children","react_default","a","createElement","className","data-testid","context","RowType","ColGroup","DataTableColGroup","DataTableRowContext","Provider","value","DataTableHead","_ref","React","memo","data","index","editing","error","touched","rowClassName","useMemo","Body","EditingBodyRowContainer","classNames","DataTableBody","idPropertyName","_ref$editingRows","editingRows","errors","length","map","item","src_DataTableBodyRow","key","concat","undefined","EditableDataTable","_props$data","_props$idPropertyName","_props$emptyTitle","emptyTitle","style","_ref$idPropertyName","onRowChange","validate","onFieldChange","options","useRef","useEffect","current","useEditableDataTable","Fragment","src_Table","EditableDataTableContext","src_DataTableColGroup","src_DataTableHead","src_DataTableBody","src_EmptyDataTableRow","name","Editor","editor","useContext","valueFromContext","_useState","useState","setValue","Object","slicedToArray","_EditingBodyRowContai","useContainer","validateField","errorControlled","handleChange","useCallback","event","newValue","target","isChangeEvent","onChange","FormHelpText","MemoDataTableBodyCellInner","order","render","Error","src_DataTableCellEditor","DataTableBodyCell","state","assign","DataTableHeadCell","title","align_center","TableColumn","width","Head","src_DataTableHeadCell","src_DataTableBodyCell","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_constants__WEBPACK_IMPORTED_MODULE_1__","createContext","createContainer","rowData","outerError","outTouched","_useState2","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","setTouched","_useState3","_useState4","setErrors","rowDataRef","_useContext","updateErrors","newErrors","prev","shallowEqual","newRowData","arguments","updateTouched","result","newTouched","keys","forEach","filter","fieldName","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","d","__webpack_exports__","useSimpleEditingList","defaultItems","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","items","setItems","Array","fill","alwaysEditing","setEditingRows","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","selectedRows","setSelectedRows","optionsRef","edit","rowIndex","produce","draft","setReadonly","replaceItems","newItems","add","addAt","push","splice","Math","min","apply","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","row","max","removeItems","indexes","removeByIndexes","array","_","indexOf","remove","isArray","removeByIndex","includes","_row","idx","updateItem","rowErrors","toggleAllSelected","toggleRowSelected","validateAllEditingRows","_item","fieldError","fieldTouched","field","every","isAllSelected","isContainsSelected"],"mappings":"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","file":"static/js/docs-components-api~docs-index~docs-pagination~docs-pagination-show~docs-validate.5dd4c5ee.js","sourcesContent":["import styled, { css } from 'sinoui-components/styles';\nimport Table from 'sinoui-components/Table';\n\nconst captionTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.fontWeightMedium};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst bodyTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.body1.fontWeight};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst dataTableCellStyle = css`\n  padding: 0;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-bottom: 1px solid\n    ${(props) =>\n      props.theme.palette.type === 'light'\n        ? 'rgba(224, 224, 224, 1)'\n        : 'rgba(80, 80, 80, 1)'};\n`;\n\nconst rowBgColor = {\n  light: {\n    tableRowSelected: 'rgba(0, 0, 0, 0.04)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(0, 0, 0, 0.07)', // 表格行hover时的背景色\n  },\n  dark: {\n    tableRowSelected: 'rgba(255, 255, 255, 0.08)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(255, 255, 255, 0.14)', // 表格行hover时的背景色\n  },\n};\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n  border-top: 1px solid rgba(224, 224, 224, 1);\n  & .sinoui-data-table-head {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    background-color: ${(props) =>\n      props.theme.palette.type === 'light'\n        ? props.theme.palette.primary[50]\n        : props.theme.palette.primary[200]};\n    text-align: left;\n    vertical-align: middle;\n  }\n\n  .sinoui-checkbox-button {\n    margin: 14px;\n  }\n\n  & .sinoui-data-table-head.numeric,\n  .sinoui-data-table-body-td.numeric {\n    text-align: right;\n    flex-direction: row-reverse;\n  }\n\n  & .sinoui-data-table-head.align_center,\n  .sinoui-data-table-body-td.align_center {\n    text-align: center;\n  }\n\n  & .sinoui-data-table-head.checkbox,\n  .sinoui-data-table-body-td.checkbox {\n    padding: 0;\n    width: 48px;\n  }\n\n  & .sinoui-data-table-head.extraInfo,\n  .sinoui-data-table-body-td.extraInfo {\n    padding: 0;\n    width: 60px;\n  }\n\n  & .sinoui-data-table-head:last-child,\n  .sinoui-data-table-body-td:last-child {\n    padding-right: 24px;\n  }\n\n  & .sinoui-data-table-footer {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    padding-left: 24px;\n    padding-right: 12px;\n  }\n\n  & .sinoui-data-table-body-cell-no-data {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    padding: 64px;\n    text-align: center;\n    color: ${(props) => props.theme.typography.caption.color};\n  }\n\n  & .sinoui-data-table-body-td {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    text-align: left;\n    vertical-align: middle;\n    word-wrap: break-word;\n    word-break: break-all;\n  }\n\n  & .sinoui-data-table-head-row {\n    height: 48px;\n  }\n\n  & .sinoui-data-table-footer-row,\n  .sinoui-data-table-body-row-no-data {\n    height: 56px;\n    background-color: transparent;\n  }\n\n  & .sinoui-data-table-body-row {\n    height: 48px;\n    background-color: transparent;\n\n    &:hover {\n      background-color: ${(props) =>\n        rowBgColor[props.theme.palette.type].tableRowHover};\n    }\n  }\n\n  & .sinoui-data-table-body-row.selected {\n    background-color: ${(props) =>\n      rowBgColor[props.theme.palette.type].tableRowSelected};\n  }\n`;\n\nexport default StyledTable;\n","import React from 'react';\nimport styled from 'sinoui-components/styles';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  padding: 32px 8px;\n`;\n\n/**\n * 表格空数据时显示的行\n */\nconst EmptyDataTableRow: React.SFC = (props) => {\n  const { children } = props;\n  return (\n    <Wrapper className=\"sinoui-data-table-info\" data-testid=\"emptyInfo\">\n      {children}\n    </Wrapper>\n  );\n};\n\nexport default EmptyDataTableRow;\n","import React from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext from './shared/DataTableRowContext';\n\nconst context: { type: RowType.ColGroup } = {\n  type: RowType.ColGroup,\n};\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nfunction DataTableColGroup(props: Props) {\n  const { children } = props;\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <colgroup data-testid=\"colgroup\">{children}</colgroup>\n    </DataTableRowContext.Provider>\n  );\n}\n\nexport default DataTableColGroup;\n","import React from 'react';\n\n/**\n * 数据表头\n */\nconst DataTableHead: React.SFC = function TableHead({ children }) {\n  return (\n    <thead>\n      <tr className=\"sinoui-data-table-head-row\" data-testid=\"tableHead\">\n        {children}\n      </tr>\n    </thead>\n  );\n};\n\nexport default DataTableHead;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\nimport { ErrorResult, TouchedState } from './types';\n\ninterface Props<T> {\n  /**\n   * 此行数据\n   */\n  data: T;\n  /**\n   * 数据序号\n   */\n  index: number;\n  /**\n   * 单元格子组件\n   */\n  children: React.ReactNode;\n\n  /**\n   * 是否处于编辑状态\n   */\n  editing?: boolean;\n\n  /**\n   * 行数据错误状态\n   */\n  error?: ErrorResult;\n\n  /**\n   * 单元格编辑器是否被点击过\n   */\n  touched?: TouchedState;\n  rowClassName?: (index: number) => string;\n}\n\ntype CompType<T = any> = React.SFC<Props<T>>;\n\n/**\n * 内容行\n */\nconst DataTableBodyRow: CompType = (props) => {\n  const {\n    data,\n    index,\n    children,\n    editing,\n    error,\n    touched,\n    rowClassName,\n  } = props;\n  const context: BodyRowContextType<any> = useMemo(\n    () => ({\n      type: RowType.Body,\n      data,\n      index,\n      editing: !!editing,\n      error,\n      touched,\n    }),\n    [data, index, editing, error, touched],\n  );\n\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <EditingBodyRowContainer.Provider>\n        <tr\n          className={classNames(\n            'sinoui-data-table-body-row',\n            rowClassName ? rowClassName(index) : '',\n          )}\n          data-testid=\"bodyRow\"\n        >\n          {children}\n        </tr>\n      </EditingBodyRowContainer.Provider>\n    </DataTableRowContext.Provider>\n  );\n};\n\nexport default React.memo(DataTableBodyRow);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport DataTableBodyRow from './DataTableBodyRow';\nimport { ErrorResult, TouchedState } from './types';\n\n/**\n * 数据表格内容组件\n */\nconst DataTableBody: React.SFC<{\n  data?: any[];\n  idPropertyName: string;\n  editingRows?: boolean[];\n  errors?: ErrorResult[];\n  touched?: TouchedState[];\n  rowClassName?: (index: number) => string;\n}> = function DataTableBody({\n  idPropertyName,\n  data,\n  children,\n  editingRows = [],\n  errors,\n  touched,\n  rowClassName,\n}) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n  return (\n    <tbody>\n      {data.map((item, index) => (\n        <DataTableBodyRow\n          key={item[idPropertyName] || `index_${index}`}\n          data={item}\n          index={index}\n          data-testid=\"tableBody\"\n          editing={editingRows[index]}\n          error={errors ? errors[index] : undefined}\n          touched={touched ? touched[index] : undefined}\n          rowClassName={rowClassName}\n        >\n          {children}\n        </DataTableBodyRow>\n      ))}\n    </tbody>\n  );\n};\n\nexport default DataTableBody;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport Table from './Table';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EmptyDataTableRow from './EmptyDataTableRow';\nimport DataTableColGroup from './DataTableColGroup';\nimport DataTableHead from './DataTableHead';\nimport DataTableBody from './DataTableBody';\nimport { ErrorResult, TouchedState } from './types';\n\nexport interface Props<T> {\n  /**\n   * 列表数据\n   */\n  data?: T[];\n  /**\n   * 处于编辑状态的行。`editingRows`数组需要与`data`数组保持一一对应的关系，`editingRows`数组中每一个数据项代表的是`data`数组中对应数据项的编辑状态，`true`表示编辑状态，`false`表示非编辑状态。\n   */\n  editingRows?: boolean[];\n\n  /**\n   * 给table元素添加className\n   */\n  className?: string;\n\n  /**\n   * 给table元素添加样式\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * 错误状态\n   */\n  errors?: ErrorResult[];\n\n  /**\n   * 单元格是否被点击的状态\n   */\n  touched?: TouchedState[];\n\n  /**\n   * 子节点，一组TableColumn。使用TableColumn指表格列信息。\n   */\n  children: React.ReactNode;\n  /**\n   * 数据的id属性名。默认为'id'。\n   */\n  idPropertyName?: string;\n  /**\n   * 无数据时的提示信息。默认为“暂无数据”。\n   */\n  emptyTitle?: React.ReactNode;\n\n  /**\n   * 监听行数据发生变化的事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onRowChange?: (index: number, rowData: T) => void;\n\n  /**\n   * 监听单元格值变化事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onFieldChange?: (index: number, fieldName: string, rowData: T) => void;\n\n  /**\n   * 给正在编辑的行添加校验规则。\n   * \n   * 返回错误提示：\n   * \n   * ```js\n     {\n       'title': '不能为空',\n       'name': '不能少于三个字'\n     }\n   * ```\n   *\n   * 上面的错误信息表示字段`title`和`name`校验失败。\n   * \n   * 如果数据行没有错误，则返回`{}`或者`undefined`。\n   */\n  validate?: (rowData: T) => { [x: string]: string } | undefined;\n  rowClassName?: (index: number) => string;\n}\n\nfunction useEditableDataTable<T>({\n  idPropertyName = 'id',\n  onRowChange,\n  validate,\n  onFieldChange,\n}: Props<T>) {\n  const options = useRef({\n    onRowChange,\n    validate,\n    onFieldChange,\n  });\n\n  useEffect(() => {\n    options.current.onRowChange = onRowChange;\n    options.current.validate = validate;\n    options.current.onFieldChange = onFieldChange;\n  }, [onRowChange, validate, onFieldChange]);\n\n  const context = useMemo(\n    () => ({ idPropertyName, options: options.current }),\n    [idPropertyName],\n  );\n\n  return context;\n}\n\n/**\n * 可编辑表格\n */\nfunction EditableDataTable<T>(props: Props<T>) {\n  const {\n    data = [],\n    idPropertyName = 'id',\n    children,\n    emptyTitle = '暂无数据',\n    editingRows,\n    errors,\n    touched,\n    className,\n    style,\n    rowClassName,\n  } = props;\n  const context = useEditableDataTable(props);\n  return (\n    <>\n      <Table\n        className={classNames('sinoui-editable-data-table', className)}\n        style={style}\n      >\n        <EditableDataTableContext.Provider value={context}>\n          <DataTableColGroup>{children}</DataTableColGroup>\n          <DataTableHead>{children}</DataTableHead>\n          <DataTableBody\n            data={data}\n            idPropertyName={idPropertyName}\n            editingRows={editingRows}\n            errors={errors}\n            touched={touched}\n            rowClassName={rowClassName}\n          >\n            {children}\n          </DataTableBody>\n        </EditableDataTableContext.Provider>\n      </Table>\n      {(!data || data.length === 0) && (\n        <EmptyDataTableRow>{emptyTitle}</EmptyDataTableRow>\n      )}\n    </>\n  );\n}\n\nexport default EditableDataTable;\n","import React, { useState, useContext, useCallback, useMemo } from 'react';\nimport FormHelpText from 'sinoui-components/Form/FormHelpText';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props {\n  editor: React.ReactType;\n  name: string;\n}\n\nfunction isChangeEvent(\n  event?: React.ChangeEvent<HTMLInputElement> | string,\n): event is React.ChangeEvent<HTMLInputElement> {\n  return !!(event && (event as React.ChangeEvent<HTMLInputElement>).target);\n}\n\n/**\n * 单元格编辑器\n */\nfunction DataTableCellEditor(props: Props) {\n  const { name, editor: Editor } = props;\n  const { data, index } = useContext(DataTableRowContext) as BodyRowContextType<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    any\n  >;\n  const valueFromContext = data[name] || '';\n  const [, setValue] = useState(valueFromContext);\n  const { options } = useContext(EditableDataTableContext);\n  const {\n    touched,\n    errors,\n    validateField,\n    errorControlled,\n  } = EditingBodyRowContainer.useContainer();\n\n  const handleChange = useCallback(\n    (event?: React.ChangeEvent<HTMLInputElement> | string) => {\n      const newValue = isChangeEvent(event) ? event.target.value : event;\n      setValue(newValue);\n\n      data[name] = newValue;\n\n      if (options.onRowChange) {\n        options.onRowChange(index, data);\n      }\n\n      if (options.onFieldChange) {\n        options.onFieldChange(index, name, data);\n      }\n\n      if (!errorControlled) {\n        validateField(name, data);\n      }\n    },\n    [data, name, options, index, errorControlled, validateField],\n  );\n\n  const isTouched = touched[name];\n  const error = isTouched ? errors[name] : undefined;\n\n  const element = useMemo(\n    () => (\n      <>\n        <Editor\n          name={name}\n          value={valueFromContext}\n          item={data}\n          onChange={handleChange}\n          error={!!error}\n        />\n        {error && (\n          <FormHelpText\n            error\n            className=\"sinoui-editable-data-table-editor-error\"\n          >\n            {error}\n          </FormHelpText>\n        )}\n      </>\n    ),\n    [data, error, handleChange, name, valueFromContext],\n  );\n\n  return element;\n}\n\nexport default React.memo(DataTableCellEditor);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport DataTableCellEditor from './DataTableCellEditor';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface CellState<T> {\n  data: T;\n  index: number;\n  editing: boolean;\n  errors?: { [x: string]: any };\n  validate: (rowData?: T) => boolean;\n  idPropertyName: string;\n}\n\ninterface DataCellProps<T, CellDataType> {\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n  /**\n   * 数据列名称\n   */\n  name?: string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\nfunction useCellState<T>(): CellState<T> {\n  const { data, index, editing } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<any>;\n  const { validate } = EditingBodyRowContainer.useContainer();\n  const { idPropertyName } = useContext(EditableDataTableContext);\n\n  return {\n    data,\n    index,\n    editing,\n    idPropertyName,\n    validate,\n  };\n}\n\n/**\n * 数据单元格\n */\nfunction DataTableBodyCellInner(\n  props: DataCellProps<any, any> & CellState<any>,\n) {\n  const {\n    order,\n    render,\n    name,\n    editor,\n    index,\n    editing,\n    data,\n    idPropertyName,\n    validate,\n  } = props;\n\n  if (order) {\n    return (\n      <td className=\"sinoui-data-table-body-td align_center\">{index + 1}</td>\n    );\n  }\n\n  if (editing && editor) {\n    if (!name) {\n      throw new Error(`没有给TableColumn指定name属性`);\n    }\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        <DataTableCellEditor name={name} editor={editor} />\n      </td>\n    );\n  }\n\n  if (render) {\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        {render(\n          name ? data[name] : undefined,\n          data,\n          index,\n          data[idPropertyName],\n          {\n            editing,\n            validate,\n          },\n        )}\n      </td>\n    );\n  }\n\n  return name ? (\n    <td className=\"sinoui-data-table-body-td\">{data[name]}</td>\n  ) : null;\n}\n\nconst MemoDataTableBodyCellInner = React.memo(DataTableBodyCellInner);\n\nfunction DataTableBodyCell<T = any, CellDataType = string>(\n  props: DataCellProps<T, CellDataType>,\n) {\n  const state = useCellState<any>();\n\n  return <MemoDataTableBodyCellInner {...props} {...state} />;\n}\n\nexport default DataTableBodyCell;\n","import React from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  order?: boolean;\n  title?: React.ReactNode;\n}\n\n/**\n * 表格头单元格\n */\nfunction DataTableHeadCell(props: Props) {\n  const { order, title } = props;\n  return (\n    <th\n      className={classNames('sinoui-data-table-head', {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        align_center: order,\n      })}\n    >\n      {title}\n    </th>\n  );\n}\n\nexport default DataTableHeadCell;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport DataTableRowContext from './shared/DataTableRowContext';\nimport DataTableBodyCell from './DataTableBodyCell';\nimport DataTableHeadCell from './DataTableHeadCell';\nimport { RowType } from './shared/constants';\n\nexport interface Props<T, CellDataType> {\n  /**\n   * 数据列名称\n   */\n  name?: string;\n  /**\n   * 标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n\n  /**\n   * 列宽度\n   */\n  width?: number | string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\n/**\n * 表格列\n */\nconst TableColumn: React.SFC<Props<any, any>> = React.memo(function TableColumn<\n  T,\n  CellDataType\n>(props: Props<T, CellDataType>) {\n  const { title, order, width } = props;\n  const { type } = useContext(DataTableRowContext);\n\n  switch (type) {\n    case RowType.Head:\n      return <DataTableHeadCell title={title} order={order} />;\n    case RowType.ColGroup:\n      return <col width={order ? 50 : width} />;\n    default:\n      return <DataTableBodyCell {...props} />;\n  }\n});\n\nexport default TableColumn;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport { RowType } from './constants';\nimport { ErrorResult, TouchedState } from '../types';\n\nexport interface BodyRowContextType<T> {\n  type: RowType.Body;\n  data: T;\n  index: number;\n  /**\n   * 是否处于编辑状态\n   */\n  editing: boolean;\n\n  /**\n   * 数据行的验证结果\n   */\n  error?: ErrorResult;\n\n  /**\n   * 单元格数据被点击状态\n   */\n  touched?: TouchedState;\n}\n\nexport interface HeadRowContextType {\n  type: RowType.Head;\n}\n\nexport interface ColGroupContextType {\n  type: RowType.ColGroup;\n}\n\nexport type RowContextType<T = any> =\n  | BodyRowContextType<T>\n  | HeadRowContextType\n  | ColGroupContextType;\n\nconst DataTableRowContext = React.createContext<RowContextType>({\n  type: RowType.Head,\n});\n\nexport default DataTableRowContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\n\ninterface ContextType {\n  idPropertyName: string;\n  options: {\n    onRowChange?: (index: number, rowData: any) => void;\n    onFieldChange?: (index: number, fieldName: string, rowData: any) => void;\n    validate?: (rowData: any) => { [x: string]: string } | undefined;\n  };\n}\n\nconst EditableDataTableContext = React.createContext<ContextType>({\n  idPropertyName: 'id',\n  options: {},\n});\n\nexport default EditableDataTableContext;\n","import { useState, useCallback, useRef, useEffect, useContext } from 'react';\nimport { createContainer } from 'unstated-next';\nimport shallowEqual from 'shallowequal';\nimport EditableDataTableContext from './EditableDataTableContext';\nimport DataTableRowContext, { BodyRowContextType } from './DataTableRowContext';\n\ninterface ContextType<T> {\n  /**\n   * 校验错误信息\n   */\n  errors: {\n    [x: string]: string;\n  };\n\n  /**\n   * 表单校验状态是否是受控于外部。（也就是使用者处理数据行校验）\n   */\n  errorControlled: boolean;\n\n  /**\n   * 点击状态\n   */\n  touched: {\n    [x: string]: boolean;\n  };\n\n  /**\n   * 校验数据行\n   *\n   * 如果通过校验，则返回`true`，否则返回`false`。\n   */\n  validate: (newItem?: T) => boolean;\n\n  /**\n   * 校验表单域\n   */\n  validateField: (fieldName: string, newRowData: T) => void;\n}\n\n/**\n * 用于正在编辑的行数据的状态管理hook\n *\n * 主要维护的状态：\n *\n * * 表单校验\n * * 是否点击过的状态\n *\n */\nfunction useEditingBodyRow<T>(): ContextType<T> {\n  const { data: rowData, error: outerError, touched: outTouched } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<T>;\n  const [touched, setTouched] = useState<{ [x: string]: boolean }>({});\n  const [errors, setErrors] = useState({});\n  const rowDataRef = useRef(rowData);\n  const { options, idPropertyName } = useContext(EditableDataTableContext);\n\n  useEffect(() => {\n    rowDataRef.current = rowData;\n  }, [rowData]);\n\n  const updateErrors = useCallback((newErrors: any) => {\n    setErrors((prev) => {\n      if (!shallowEqual(newErrors, prev)) {\n        return newErrors;\n      }\n      return prev;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!(rowData as any)[idPropertyName] && options.validate) {\n      const newErrors = options.validate(rowData) || {};\n      updateErrors(newErrors);\n    }\n  }, [rowData, options, idPropertyName, updateErrors]);\n\n  const validate = useCallback(\n    (newRowData: T = rowDataRef.current, updateTouched: boolean = true) => {\n      if (options.validate) {\n        const result = options.validate(newRowData);\n        if (result) {\n          if (updateTouched) {\n            const newTouched: { [x: string]: boolean } = {};\n            Object.keys(result).forEach((key) => {\n              newTouched[key] = true;\n            });\n\n            setTouched(newTouched);\n          }\n\n          updateErrors(result || {});\n\n          return (\n            Object.keys(result).filter((key) => !!result[key]).length === 0\n          );\n        }\n      }\n\n      return true;\n    },\n    [options, updateErrors],\n  );\n\n  const validateField = useCallback(\n    (fieldName: string, newRowData: T) => {\n      setTouched((prev) => {\n        if (!prev[fieldName]) {\n          return { ...prev, [fieldName]: true };\n        }\n        return prev;\n      });\n      validate(newRowData, false);\n    },\n    [validate],\n  );\n\n  return {\n    errors: outerError || errors,\n    errorControlled: !!outerError,\n    touched: outTouched || touched,\n    validate,\n    validateField,\n  };\n}\n\nconst EditingBodyRowContainer = createContainer(useEditingBodyRow);\n\nexport default EditingBodyRowContainer;\n","export enum RowType {\n  Body,\n  Head,\n  ColGroup,\n}\n\nexport const EMPTY_ROW_INFO = '暂无数据';\n","import { useRef, useEffect, useState, useCallback } from 'react';\nimport { produce, isDraft } from 'immer';\nimport shallowEqual from 'shallowequal';\nimport { ErrorResult, SimpleEditingListResult, TouchedState } from './types';\n\nexport interface SimpleEditingListOptions<T> {\n  /**\n   * 单元格表单域是否一直处于编辑状态。\n   */\n  alwaysEditing?: boolean;\n\n  /**\n   * 验证行数据的函数\n   */\n  validate?: (item: T) => ErrorResult | undefined;\n}\n\n/**\n * 可编辑列表外置状态管理hook\n *\n * 支持：\n *\n * * 列表数据管理\n * * 可编辑状态维护\n * * 单元格编辑器校验\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction useSimpleEditingList<T = any>(\n  defaultItems: T[] = [],\n  options: SimpleEditingListOptions<T> = {},\n): SimpleEditingListResult<T> {\n  const [items, setItems] = useState<T[]>(defaultItems);\n  const [editingRows, setEditingRows] = useState<boolean[]>(() =>\n    new Array(defaultItems.length).fill(!!options.alwaysEditing),\n  );\n  const [errors, setErrors] = useState<ErrorResult[]>(() =>\n    new Array(defaultItems.length).fill({}),\n  );\n  const [touched, setTouched] = useState<TouchedState[]>(() =>\n    new Array(defaultItems.length).fill({}),\n  );\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\n\n  const optionsRef = useRef(options);\n\n  useEffect(() => {\n    optionsRef.current = options;\n  }, [options]);\n\n  /**\n   * 编辑\n   */\n  const edit = useCallback((rowIndex: number) => {\n    setEditingRows(\n      produce((draft) => {\n        draft[rowIndex] = true;\n      }),\n    );\n  }, []);\n\n  /**\n   * 设置为只读状态\n   */\n  const setReadonly = useCallback((rowIndex: number) => {\n    setEditingRows(\n      produce((draft) => {\n        draft[rowIndex] = false;\n      }),\n    );\n  }, []);\n\n  /**\n   * 更换items\n   *\n   * @param {T[]} newItems 新的items\n   */\n  const replaceItems = useCallback((newItems: T[]) => {\n    setItems(newItems);\n    setEditingRows(\n      new Array(newItems.length).fill(!!optionsRef.current.alwaysEditing),\n    );\n\n    setErrors(new Array(newItems.length).fill({}));\n    setTouched(new Array(newItems.length).fill({}));\n    setSelectedRows([]);\n  }, []);\n\n  /**\n   * 新增一条数据\n   */\n  const add = useCallback((item: Partial<T> = {}, index: number = -1) => {\n    const addAt = produce(<V>(draft: V[], value: V) => {\n      if (index === -1 || index >= draft.length) {\n        draft.push(value);\n      } else {\n        draft.splice(index, 0, value);\n      }\n    });\n    setItems((prev) => addAt(prev, item));\n\n    setEditingRows((prev) => addAt(prev, true));\n\n    setErrors((prev) => addAt(prev, {}));\n\n    setTouched((prev) => addAt(prev, {}));\n    setSelectedRows((prev) => {\n      if (index <= Math.min(...prev)) {\n        return prev.map((row) => row + 1);\n      }\n\n      if (index > Math.max(...prev)) {\n        return prev.map((row) => row - 1);\n      }\n\n      return prev.map((row) => {\n        if (row < index) {\n          return row - 1;\n        }\n        return row + 1;\n      });\n    });\n  }, []);\n\n  /**\n   * 删除一组数据\n   */\n  const removeItems = useCallback((indexes: number[]) => {\n    const removeByIndexes = <T>(array: T[]) =>\n      array.filter((_, index) => indexes.indexOf(index) === -1);\n    setItems(removeByIndexes);\n    setEditingRows(removeByIndexes);\n    setErrors(removeByIndexes);\n    setTouched(removeByIndexes);\n    setSelectedRows([]);\n  }, []);\n\n  /**\n   * 删除数据\n   */\n  const remove = useCallback(\n    (index: number | number[]) => {\n      if (Array.isArray(index)) {\n        removeItems(index);\n      } else {\n        const removeByIndex = produce((draft) => {\n          draft.splice(index, 1);\n        });\n\n        setItems(removeByIndex);\n        setEditingRows(removeByIndex);\n        setErrors(removeByIndex);\n        setTouched(removeByIndex);\n        setSelectedRows((prev) => {\n          if (prev.includes(index)) {\n            return prev.filter((_row, idx) => prev[idx] === index);\n          }\n\n          if (index <= Math.min(...prev)) {\n            return prev.map((row) => row - 1);\n          }\n\n          if (index > Math.max(...prev)) {\n            return prev.map((row) => row);\n          }\n\n          return prev.map((row) => {\n            if (row < index) {\n              return row;\n            }\n            return row - 1;\n          });\n        });\n      }\n    },\n    [removeItems],\n  );\n\n  /**\n   * 更新数据项\n   */\n  const updateItem = useCallback((index: number, item: T) => {\n    setItems(\n      produce((draft) => {\n        draft[index] = item;\n      }),\n    );\n  }, []);\n\n  /**\n   * 验证一个单元格\n   */\n  const validateField = useCallback(\n    (index: number, fieldName: string, rowData: T) => {\n      const { validate } = optionsRef.current;\n\n      if (validate) {\n        const rowErrors = validate(rowData) || {};\n\n        setErrors(\n          produce((draft) => {\n            if (!shallowEqual(draft[index], rowErrors)) {\n              draft[index] = rowErrors;\n            }\n          }),\n        );\n\n        setTouched(\n          produce((draft) => {\n            draft[index][fieldName] = true;\n          }),\n        );\n      }\n    },\n    [],\n  );\n\n  /**\n   * 校验列表中正在编辑的数据\n   */\n  const validateAllEditingRows = () => {\n    const { validate } = optionsRef.current;\n\n    if (!validate) {\n      return true;\n    }\n\n    const updateErrors = produce((draft: ErrorResult[]) => {\n      items\n        .map((item, index) => {\n          if (!editingRows[index]) {\n            return {};\n          }\n          return validate(item) || {};\n        })\n        .forEach((error, index) => {\n          if (!shallowEqual(draft[index], error)) {\n            draft[index] = error;\n          }\n        });\n    });\n\n    const newErrors = updateErrors(errors);\n    setErrors(newErrors);\n    setTouched(\n      produce((draft) => {\n        items.forEach((_item, index) => {\n          if (!editingRows[index]) {\n            return;\n          }\n\n          const fieldError = newErrors[index];\n          const fieldTouched: TouchedState = {};\n\n          Object.keys(fieldError).forEach((field) => {\n            fieldTouched[field] = true;\n          });\n\n          draft[index] = fieldTouched;\n        });\n      }),\n    );\n\n    return (\n      newErrors &&\n      newErrors.every(\n        (error) =>\n          Object.keys(error).filter((key) => !!error[key]).length === 0,\n      )\n    );\n  };\n\n  const toggleAllSelected = useCallback(() => {\n    setSelectedRows((prev) => {\n      if (prev.length !== items.length) {\n        return new Array(items.length).fill(null).map((_, index) => index);\n      }\n      return [];\n    });\n  }, [items.length]);\n\n  const toggleRowSelected = useCallback((index: number) => {\n    setSelectedRows(\n      produce((draft) => {\n        const idx = draft.indexOf(index);\n        if (idx === -1) {\n          draft.push(index);\n        } else {\n          draft.splice(idx, 1);\n        }\n      }),\n    );\n  }, []);\n\n  return {\n    items,\n    setItems: replaceItems,\n    editingRows,\n    edit,\n    setReadonly,\n    add,\n    remove,\n    updateItem,\n    errors,\n    touched,\n    validateField,\n    validateAllEditingRows,\n    selectedRows,\n    isAllSelected:\n      selectedRows.length > 0 && selectedRows.length === items.length,\n    isContainsSelected: selectedRows.length > 0,\n    toggleAllSelected,\n    toggleRowSelected,\n    setSelectedRows,\n  };\n}\n\nexport default useSimpleEditingList;\n"],"sourceRoot":""}
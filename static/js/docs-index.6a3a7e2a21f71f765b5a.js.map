{"version":3,"sources":["/Users/sinosoft/Documents/GitHub/editable-data-table/docs/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__","assign","mdxType","id","parentName","className","href","docz__WEBPACK_IMPORTED_MODULE_5__","__position","__code","__scope","this","useState","useCallback","useMemo","Playground","Props","TableColumn","EditableDataTable","useEditingList","Button","TextInput","produce","useSimpleEditingList","_src_EditableDataTable__WEBPACK_IMPORTED_MODULE_7__","data","firstName","lastName","title","_src_TableColumn__WEBPACK_IMPORTED_MODULE_6__","name","render","value","row","concat","editingRows","editor","validate","rowData","errors","startsWith","_useState","_useState2","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","setEditingRows","_useState3","_useState4","items","setItems","react__WEBPACK_IMPORTED_MODULE_3___default","a","Fragment","sinoui_components_Button__WEBPACK_IMPORTED_MODULE_9__","onClick","_Users_sinosoft_Documents_GitHub_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","result","order","index","context","editing","autoWidth","draft","alert","handleSave","handleEdit","removeByIndex","splice","handleRemove","_useEditingList","add","edit","save","remove","idPropertyName","then","_useSimpleEditingList","setReadonly","isMDXComponent"],"mappings":"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","file":"static/js/docs-index.005c1110.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { useState, useCallback, useMemo } from 'react';\nimport { Playground, Props } from 'docz';\nimport TableColumn from '../src/TableColumn';\nimport EditableDataTable from '../src/EditableDataTable';\nimport useEditingList from '../src/useEditingList';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport produce from 'immer';\nimport useSimpleEditingList from '../src/useSimpleEditingList';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"可编辑表格\"\n    }}>{`可编辑表格`}</h1>\n    <p>{`安装：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinouiincubator/editable-data-table\n`}</code></pre>\n    <p>{`引用：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n`}</code></pre>\n    <p>{`源码路径：`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sinouiincubator/editable-data-table\"\n      }}>{`https://github.com/sinouiincubator/editable-data-table`}</a>{`。`}</p>\n    <p>{`可编辑列表（`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`）提供以下功能：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`展现列表数据（不支持分页，但是可以与分页功能组合使用）`}</li>\n      <li parentName=\"ul\">{`编辑数据行`}</li>\n      <li parentName=\"ul\">{`校验数据行`}</li>\n    </ul>\n    <p>{`我们可以基于可编辑表格做列表数据的增删改查。下面我们通过例子来了解基本用法。`}</p>\n    <h2 {...{\n      \"id\": \"展现列表数据\"\n    }}>{`展现列表数据`}</h2>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`可以用来展现列表数据，可以通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`定义列表的列信息：列标题、列单元格数据渲染逻辑、宽度等。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const users = [\n    {\n      id: '1',\n      firstName: 'Jacking',\n      lastName: 'Liu',\n      title: 'developer',\n    },\n    {\n      id: '2',\n      firstName: 'Zinuo',\n      lastName: 'Tian',\n      title: 'developer',\n    },\n  ];\n\n  return (\n    <EditableDataTable data={users}>\n      <TableColumn title=\"id\" name=\"id\" />\n      <TableColumn\n        title=\"姓名\"\n        render={(value, row) => \\`\\${row.firstName} \\${row.lastName}\\`}\n      />\n      <TableColumn title=\"标题\" name=\"title\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      firstName: \\'Jacking\\',\\n      lastName: \\'Liu\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      firstName: \\'Zinuo\\',\\n      lastName: \\'Tian\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n  return (\\n    <EditableDataTable data={users}>\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n      <TableColumn\\n        title=\\\"姓名\\\"\\n        render={(value, row) => `${row.firstName} ${row.lastName}`}\\n      />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce,\n      useSimpleEditingList\n    }} mdxType=\"Playground\">\n  {() => {\n        const users = [{\n          id: '1',\n          firstName: 'Jacking',\n          lastName: 'Liu',\n          title: 'developer'\n        }, {\n          id: '2',\n          firstName: 'Zinuo',\n          lastName: 'Tian',\n          title: 'developer'\n        }];\n        return <EditableDataTable data={users} mdxType=\"EditableDataTable\">\n        <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"姓名\" render={(value, row) => `${row.firstName} ${row.lastName}`} mdxType=\"TableColumn\" />\n        <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n      </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"编辑数据行\"\n    }}>{`编辑数据行`}</h2>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`组件通过`}<inlineCode parentName=\"p\">{`editingRows`}</inlineCode>{`接收数据行是否处于编辑状态的数据。这是一个与`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`数组等长的布尔数组，`}<inlineCode parentName=\"p\">{`editingRows`}</inlineCode>{`数组的每一项与`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`数组一一对应，`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`表示编辑状态、`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`表示非编辑状态。`}</p>\n    <p>{`可以通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`组件的`}<inlineCode parentName=\"p\">{`editor`}</inlineCode>{`属性指定单元格的编辑器。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const users = [\n    {\n      id: '1',\n      name: 'Jacking',\n      title: 'developer',\n    },\n    {\n      id: '2',\n      name: 'zinuo',\n      title: 'developer',\n    },\n  ];\n\n  const editingRows = [false, true]; // 第二行数据是编辑状态\n\n  return (\n    <EditableDataTable data={users} editingRows={editingRows}>\n      <TableColumn title=\"id\" name=\"id\" editor=\"input\" />\n      <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" />\n      <TableColumn title=\"标题\" name=\"title\" editor=\"input\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable data={users} editingRows={editingRows}>\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor=\\\"input\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce,\n      useSimpleEditingList\n    }} mdxType=\"Playground\">\n  {() => {\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor=\"input\" mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"校验数据行\"\n    }}>{`校验数据行`}</h2>\n    <p>{`可以通过`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`属性指定行数据的校验，这是一个方法，方法返回验证错误的结果。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function validate(rowData) {\n  const errors = {};\n\n  if (!rowData.id) {\n    errors.id = '必填';\n  }\n\n  if (!rowData.name) {\n    errors.name = '必填';\n  }\n\n  if (rowData.title && rowData.title.startsWith('1')) {\n    errors.title = '不能以1开头';\n  }\n\n  return errors;\n}\n`}</code></pre>\n    <p>{`这个方法运行的结果类似如下面：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  id: '必填',\n  title: '不能以1开头'\n}\n`}</code></pre>\n    <p>{`这个键值对数据，键表示有验证错误的字段名（表单域名称），值表示字段名对应的验证错误。`}</p>\n    <p>{`看看效果：`}</p>\n    <Playground __position={2} __code={'() => {\\n  function validate(rowData) {\\n    const errors = {}\\n    if (!rowData.id) {\\n      errors.id = \\'必填\\'\\n    }\\n\\n    if (!rowData.name) {\\n      errors.name = \\'必填\\'\\n    }\\n\\n    if (rowData.title && rowData.title.startsWith(\\'1\\')) {\\n      errors.title = \\'不能以1开头\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable\\n      data={users}\\n      editingRows={editingRows}\\n      validate={validate}\\n    >\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor=\\\"input\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce,\n      useSimpleEditingList\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(rowData) {\n          const errors = {};\n\n          if (!rowData.id) {\n            errors.id = '必填';\n          }\n\n          if (!rowData.name) {\n            errors.name = '必填';\n          }\n\n          if (rowData.title && rowData.title.startsWith('1')) {\n            errors.title = '不能以1开头';\n          }\n\n          return errors;\n        }\n\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor=\"input\" mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"增删改查\"\n    }}>{`增删改查`}</h2>\n    <p>{`可以基于`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`实现增删改查。看看下面一个与后端 API 无法的增删改查示例：`}</p>\n    <Playground __position={3} __code={'() => {\\n  const validate = data => {\\n    const result = {}\\n    if (!data.id) {\\n      result.id = \\'必填\\'\\n    }\\n    if (data.title && data.title.startsWith(\\'1\\')) {\\n      result.title = \\'标题不能以1开头\\'\\n    }\\n    return result\\n  }\\n  const [editingRows, setEditingRows] = useState([true, false])\\n  const [items, setItems] = useState([\\n    { id: \\'1\\', title: \\'123\\' },\\n    { id: \\'2\\', title: \\'1234\\' },\\n  ])\\n\\n  const handleSave = (row, index, context) => {\\n    if (!context.validate()) {\\n      alert(\\'数据填写不完整\\')\\n    } else {\\n      setEditingRows(\\n        produce(editingRows, draft => {\\n          draft[index] = false\\n        }),\\n      )\\n      alert(\\'保存成功\\')\\n    }\\n  }\\n\\n  const handleEdit = index => {\\n    setEditingRows(\\n      produce(editingRows, draft => {\\n        draft[index] = true\\n      }),\\n    )\\n  }\\n\\n  const handleRemove = index => {\\n    const removeByIndex = produce(draft => {\\n      draft.splice(index, 1)\\n    })\\n    setEditingRows(removeByIndex)\\n    setItems(removeByIndex)\\n  }\\n\\n  const handleAdd = () => {\\n    setEditingRows([...editingRows, true])\\n    setItems([...items, {}])\\n  }\\n\\n  return (\\n    <>\\n      <Button onClick={handleAdd}>新增</Button>\\n      <EditableDataTable\\n        data={items}\\n        editingRows={editingRows}\\n        validate={validate}\\n      >\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor={TextInput} />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(value, row, index, id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button\\n                  autoWidth\\n                  onClick={() => handleSave(row, index, context)}\\n                >\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => handleEdit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => handleRemove(index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce,\n      useSimpleEditingList\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = data => {\n          const result = {};\n\n          if (!data.id) {\n            result.id = '必填';\n          }\n\n          if (data.title && data.title.startsWith('1')) {\n            result.title = '标题不能以1开头';\n          }\n\n          return result;\n        };\n\n        const [editingRows, setEditingRows] = useState([true, false]);\n        const [items, setItems] = useState([{\n          id: '1',\n          title: '123'\n        }, {\n          id: '2',\n          title: '1234'\n        }]);\n\n        const handleSave = (row, index, context) => {\n          if (!context.validate()) {\n            alert('数据填写不完整');\n          } else {\n            setEditingRows(produce(editingRows, draft => {\n              draft[index] = false;\n            }));\n            alert('保存成功');\n          }\n        };\n\n        const handleEdit = index => {\n          setEditingRows(produce(editingRows, draft => {\n            draft[index] = true;\n          }));\n        };\n\n        const handleRemove = index => {\n          const removeByIndex = produce(draft => {\n            draft.splice(index, 1);\n          });\n          setEditingRows(removeByIndex);\n          setItems(removeByIndex);\n        };\n\n        const handleAdd = () => {\n          setEditingRows([...editingRows, true]);\n          setItems([...items, {}]);\n        };\n\n        return <>\n  <Button onClick={handleAdd} mdxType=\"Button\">新增</Button>\n  <EditableDataTable data={items} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n    <TableColumn title=\"id\" name=\"id\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"操作\" name=\"id\" render={(value, row, index, id, context) => <>\n        {context.editing ? <Button autoWidth onClick={() => handleSave(row, index, context)} mdxType=\"Button\">保存</Button> : <Button autoWidth onClick={() => handleEdit(index)} mdxType=\"Button\">编辑</Button>}\n        <Button autoWidth onClick={() => handleRemove(index)} mdxType=\"Button\">删除</Button>\n      </>} mdxType=\"TableColumn\" />\n  </EditableDataTable>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"使用-useeditinglist\"\n    }}>{`使用 useEditingList`}</h2>\n    <p>{`可以使用 useEditingList 简化增删改查场景的开发：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`内置`}<inlineCode parentName=\"li\">{`editingRows`}</inlineCode>{`和`}<inlineCode parentName=\"li\">{`items`}</inlineCode>{`两个状态和变更方法。`}</li>\n      <li parentName=\"ul\">{`集成了`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/sinoui/use-rest-list-api\"\n        }}>{`@sinoui/use-rest-list-api`}</a>{`，与后端 API 做增删改查交互。`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  useEiditingList,\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\n\nfunction validate(data) {\n  const result = {};\n  if (!data.id) {\n    result.id = '必填';\n  }\n  if (data.title && data.title.startsWith('1')) {\n    result.title = '标题不能以1开头';\n  }\n  return result;\n}\n\nfunction Demo() {\n  const {\n    items,\n    add,\n    edit,\n    save,\n    remove,\n    idPropertyName,\n    editingRows,\n  } = useEditingList('/api/tests', []);\n\n  const handleSave = (row, index, context) => {\n    if (!context.validate()) {\n      alert('数据填写不完整');\n    } else {\n      save(row, index);\n      alert('保存成功');\n    }\n  };\n\n  return (\n    <>\n      <Button onClick={add}>新增</Button>\n      <EditableDataTable\n        data={items}\n        editingRows={editingRows}\n        validate={validate}\n        idPropertyName={idPropertyName}\n      >\n        <TableColumn title=\"序号\" order />\n        <TableColumn title=\"标题\" name=\"title\" editor={TextInput} />\n        <TableColumn title=\"备注\" name=\"note\" editor={TextInput} />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(value, row, index, id, context) => (\n            <>\n              {context.editing ? (\n                <Button\n                  autoWidth\n                  onClick={() => handleSave(row, index, context)}\n                >\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button autoWidth onClick={() => remove(row, index)}>\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`useEditingList.add()`}</inlineCode>{`方法可以指定添加数据的位置，默认在末尾添加数据，如果需要在开始位置添加数据，则可以指定`}<inlineCode parentName=\"p\">{`index`}</inlineCode>{`参数为 0 即可：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const { add } = useEditingList('url');\n\n// 在开始位置添加数据\nadd({}, 0);\n`}</code></pre>\n    <p>{`示例：`}</p>\n    <Playground __position={4} __code={'() => {\\n  const validate = data => {\\n    const result = {}\\n\\n    if (data.title && data.title.startsWith(\\'1\\')) {\\n      result.title = \\'标题不能以1开头\\'\\n    }\\n    return result\\n  }\\n  const {\\n    items,\\n    add,\\n    edit,\\n    save,\\n    remove,\\n    idPropertyName,\\n    editingRows,\\n  } = useEditingList(\\'/api/tests\\', [])\\n\\n  const handleSave = (row, index, context) => {\\n    if (!context.validate()) {\\n      alert(\\'数据填写不完整\\')\\n    } else {\\n      save(row, index).then(\\n        () => {\\n          alert(\\'保存成功\\')\\n        },\\n        () => {\\n          alert(\\'保存失败\\')\\n        },\\n      )\\n    }\\n  }\\n\\n  return (\\n    <>\\n      <Button onClick={add}>新增</Button>\\n      <EditableDataTable\\n        data={items}\\n        editingRows={editingRows}\\n        validate={validate}\\n        idPropertyName={idPropertyName}\\n      >\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn title=\\\"备注\\\" name=\\\"note\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(value, row, index, id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button\\n                  autoWidth\\n                  onClick={() => handleSave(row, index, context)}\\n                >\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => edit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => remove(row, index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce,\n      useSimpleEditingList\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = data => {\n          const result = {};\n\n          if (data.title && data.title.startsWith('1')) {\n            result.title = '标题不能以1开头';\n          }\n\n          return result;\n        };\n\n        const {\n          items,\n          add,\n          edit,\n          save,\n          remove,\n          idPropertyName,\n          editingRows\n        } = useEditingList('/api/tests', []);\n\n        const handleSave = (row, index, context) => {\n          if (!context.validate()) {\n            alert('数据填写不完整');\n          } else {\n            save(row, index).then(() => {\n              alert('保存成功');\n            }, () => {\n              alert('保存失败');\n            });\n          }\n        };\n\n        return <>\n  <Button onClick={add} mdxType=\"Button\">新增</Button>\n  <EditableDataTable data={items} editingRows={editingRows} validate={validate} idPropertyName={idPropertyName} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"备注\" name=\"note\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"操作\" name=\"id\" render={(value, row, index, id, context) => <>\n          {context.editing ? <Button autoWidth onClick={() => handleSave(row, index, context)} mdxType=\"Button\">\n              保存\n            </Button> : <Button autoWidth onClick={() => edit(index)} mdxType=\"Button\">\n              编辑\n            </Button>}\n          <Button autoWidth onClick={() => remove(row, index)} mdxType=\"Button\">\n            删除\n          </Button>\n        </>} mdxType=\"TableColumn\" />\n  </EditableDataTable>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"使用-usesimpleeditinglist\"\n    }}>{`使用 useSimpleEditingList`}</h2>\n    <p>{`使用其简化可编辑列表的开发，不与后端交互，但包含校验。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`只有使用`}<inlineCode parentName=\"li\">{`setItems`}</inlineCode>{`才能更换列表数据`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useSimpleEditingList(defaultItems)`}</inlineCode>{`只是指定默认数据`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  useEiditingList,\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\n\nfunction Demo() {\n  const {\n    items,\n    add,\n    remove,\n    edit,\n    editingRows,\n    setItems,\n    setReadonly,\n  } = useSimpleEditingList([]);\n\n  return (\n    <>\n      <Button onClick={() => add({})}>新增</Button>\n      <EditableDataTable data={items} editingRows={editingRows}>\n        <TableColumn title=\"序号\" order />\n        <TableColumn title=\"标题\" name=\"title\" editor={TextInput} />\n        <TableColumn title=\"备注\" name=\"note\" editor={TextInput} />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(value, row, index, id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => setReadonly(index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button autoWidth onClick={() => remove(index)}>\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`示例：`}</p>\n    <Playground __position={5} __code={'() => {\\n  const {\\n    items,\\n    add,\\n    remove,\\n    edit,\\n    editingRows,\\n    setItems,\\n    setReadonly,\\n  } = useSimpleEditingList([])\\n  return (\\n    <>\\n      <Button onClick={() => add({})}>新增</Button>\\n      <EditableDataTable data={items} editingRows={editingRows}>\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn title=\\\"备注\\\" name=\\\"note\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(value, row, index, id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button autoWidth onClick={() => setReadonly(index)}>\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => edit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => remove(index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce,\n      useSimpleEditingList\n    }} mdxType=\"Playground\">\n  {() => {\n        const {\n          items,\n          add,\n          remove,\n          edit,\n          editingRows,\n          setItems,\n          setReadonly\n        } = useSimpleEditingList([]);\n        return <>\n  <Button onClick={() => add({})} mdxType=\"Button\">新增</Button>\n  <EditableDataTable data={items} editingRows={editingRows} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"备注\" name=\"note\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"操作\" name=\"id\" render={(value, row, index, id, context) => <>\n          {context.editing ? <Button autoWidth onClick={() => setReadonly(index)} mdxType=\"Button\">\n              保存\n            </Button> : <Button autoWidth onClick={() => edit(index)} mdxType=\"Button\">\n              编辑\n            </Button>}\n          <Button autoWidth onClick={() => remove(index)} mdxType=\"Button\">\n            删除\n          </Button>\n        </>} mdxType=\"TableColumn\" />\n  </EditableDataTable>\n  </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"无数据\"\n    }}>{`无数据`}</h2>\n    <Playground __position={6} __code={'<EditableDataTable data={[]}>\\n  <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n  <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n</EditableDataTable>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      useEditingList,\n      Button,\n      TextInput,\n      produce,\n      useSimpleEditingList\n    }} mdxType=\"Playground\">\n  <EditableDataTable data={[]} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n  </EditableDataTable>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}
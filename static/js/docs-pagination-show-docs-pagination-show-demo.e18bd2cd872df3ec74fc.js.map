{"version":3,"sources":["webpack:///./docs/SelectRow.css?dcab","D:/workspaces/editable-data-table/docs/pagination-show-docs/Demo.tsx","D:/workspaces/editable-data-table/docs/pagination-show-docs/pagination-show-demo.mdx","D:/workspaces/editable-data-table/docs/SelectRow.css","D:/workspaces/editable-data-table/src/RowSelectColumn.tsx","D:/workspaces/editable-data-table/src/index.ts","D:/workspaces/editable-data-table/src/useEditingList.ts"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","usePaginationList","items","currentPage","pageSize","useMemo","slice","range","start","end","Array","fill","map","_","Demo","editingList","useEditingList","_usePagination","defaultCurrentPage","arguments","length","defaultPageSize","_useState","useState","_useState2","Object","slicedToArray","setCurrentPage","_useState3","_useState4","setPageSize","pageNo","newPageSize","usePagination","_usePagination2","data","editingRows","_usePaginationEditing","add","useCallback","save","item","index","edit","remove","usePaginationEditingListActions","_useState5","_useState6","searchText","setSearchText","paginationSelectedRows","Math","min","isAllSelected","every","selectedRows","indexOf","isContainsSelected","some","toggleAllSelected","setRowsSelected","removeAllSelectedRows","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","filter","_data","includes","stop","apply","this","usePaginationSelectedRows","react_default","createElement","TextInput","value","onChange","event","target","Button","raised","onClick","query","title","src","idPropertyName","rowClassName","startIndex","toggleRowSelected","name","editor","render","_value","_id","context","Fragment","editing","autoWidth","color","Pagination","total","size","layoutProps","MDXLayout","MDXContent","components","props","objectWithoutProperties","index_es","assign","mdxType","id","parentName","className","index_esm","__position","__code","__scope","Playground","pagination_show_docs_Demo","isMDXComponent","push","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","sinoui_components_Checkbox__WEBPACK_IMPORTED_MODULE_1__","_TableColumn__WEBPACK_IMPORTED_MODULE_2__","RowSelectColumn","_props$startIndex","width","checked","indeterminate","_row","_EditableDataTable__WEBPACK_IMPORTED_MODULE_0__","_TableColumn__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2___default","_useEditingList__WEBPACK_IMPORTED_MODULE_3__","_useSimpleEditingList__WEBPACK_IMPORTED_MODULE_4__","_RowSelectColumn__WEBPACK_IMPORTED_MODULE_5__","EditableDataTable","url","defaultValue","_ref$keyName","keyName","_ref$alwaysEditing","alwaysEditing","_useRestListApi","useRestListApi","originItems","isLoading","isError","fetch","sortWith","reload","reset","searchParams","sorts","_useSimpleEditingList","useSimpleEditingList","setItems","removeEditingItems","updateItem","setReadonly","rest","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_4__","useEffect","getItemId","asyncRemove","_ref2","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","row","savedRowIds","isArray","_ref3","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","Boolean","_ref5","_x","_x2","asyncUpdate","_ref7","_callee2","newRow","_context2","sent","_x3","_x4","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"static/js/docs-pagination-show-docs-pagination-show-demo.18f5ca98.js","sourcesContent":["\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./SelectRow.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./SelectRow.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--12-1!../node_modules/postcss-loader/src/index.js??ref--12-2!./SelectRow.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, {\n  useEditingList,\n  TableColumn,\n  RowSelectColumn,\n} from '../../src';\nimport '../SelectRow.css';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\n/**\n * 生成序列数组\n *\n * @param start 开始\n * @param end 结束\n */\nfunction range(start: number, end: number) {\n  return new Array(end - start).fill(null).map((_, idx) => start + idx);\n}\n\n/**\n * 分页的选中行状态\n *\n * @param editingList 可编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationSelectedRows(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const start = currentPage * pageSize;\n  const end = Math.min(editingList.items.length, (currentPage + 1) * pageSize);\n\n  /**\n   * 是否全部选中\n   */\n  const isAllSelected = useMemo(() => {\n    return range(start, end).every(\n      (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n    );\n  }, [editingList.selectedRows, end, start]);\n\n  /**\n   * 是否包含选中\n   */\n  const isContainsSelected = useMemo(() => {\n    return range(start, end).some(\n      (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n    );\n  }, [editingList.selectedRows, end, start]);\n\n  /**\n   * 切换全选\n   */\n  const toggleAllSelected = useCallback(() => {\n    editingList.setRowsSelected(range(start, end), !isAllSelected);\n  }, [editingList, end, isAllSelected, start]);\n\n  /**\n   * 删除所有选中的数据\n   */\n  const removeAllSelectedRows = async () => {\n    const selectedRows = editingList.items\n      .map((item, idx) => [item, idx])\n      .filter((_data, index) => editingList.selectedRows.includes(index));\n    await editingList.remove(selectedRows);\n  };\n\n  return {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    removeAllSelectedRows,\n  };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  const [searchText, setSearchText] = useState('');\n  const handleQuery = () => {\n    editingList.query({ title: searchText });\n  };\n\n  const handleRowClassName = (index: number) => {\n    if (editingList.selectedRows.includes(index + currentPage * pageSize)) {\n      return 'sinoui-data-table-body-row_selected';\n    }\n\n    return '';\n  };\n\n  const paginationSelectedRows = usePaginationSelectedRows(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <div>\n      <TextInput\n        value={searchText}\n        onChange={(event) => setSearchText(event.target.value)}\n      />\n      <Button raised onClick={handleQuery}>\n        查询\n      </Button>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <Button onClick={paginationSelectedRows.removeAllSelectedRows}>\n        删除\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n        rowClassName={handleRowClassName}\n      >\n        <RowSelectColumn\n          startIndex={currentPage * pageSize}\n          selectedRows={editingList.selectedRows}\n          isAllSelected={paginationSelectedRows.isAllSelected}\n          isContainsSelected={paginationSelectedRows.isContainsSelected}\n          toggleAllSelected={paginationSelectedRows.toggleAllSelected}\n          toggleRowSelected={editingList.toggleRowSelected}\n        />\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n\nexport default Demo;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport Demo from './Demo';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"完整示例\"\n    }}>{`完整示例`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, {\n  useEditingList,\n  TableColumn,\n  RowSelectColumn,\n} from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\n/**\n * 生成序列数组\n *\n * @param start 开始\n * @param end 结束\n */\nfunction range(start: number, end: number) {\n  return new Array(end - start).fill(null).map((_, idx) => start + idx);\n}\n\n/**\n * 分页的选中行状态\n *\n * @param editingList 可编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationSelectedRows(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const start = currentPage * pageSize;\n  const end = Math.min(editingList.items.length, (currentPage + 1) * pageSize);\n\n  /**\n   * 当前页的数据行是否全部选中\n   */\n  const isAllSelected = useMemo(() => {\n    return range(start, end).every(\n      (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n    );\n  }, [currentPage, editingList.selectedRows, pageSize]);\n\n  /**\n   * 是否包含当前页的选中行\n   */\n  const isContainsSelected = useMemo(() => {\n    return range(start, end).some(\n      (idx) => editingList.selectedRows.indexOf(idx) !== -1,\n    );\n  }, [currentPage, editingList.selectedRows, pageSize]);\n\n  /**\n   * 切换当前页的全选\n   */\n  const toggleAllSelected = useCallback(() => {\n    editingList.setRowsSelected(range(start, end), !isAllSelected);\n  }, [editingList, end, isAllSelected, start]);\n\n  /**\n   * 删除所有选中的数据\n   */\n  const removeAllSelectedRows = async () => {\n    const rows = editingList.items\n      .map((item, idx) => [item, idx])\n      .filter((_data, index) => editingList.selectedRows.includes(index));\n    await editingList.remove(rows);\n  };\n\n  return {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    removeAllSelectedRows,\n  };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  const [searchText, setSearchText] = useState('');\n  const handleQuery = () => {\n    editingList.query({ title: searchText });\n  };\n\n  const handleRowClassName = (index: number) => {\n    if (editingList.selectedRows.includes(index + currentPage * pageSize)) {\n      return 'sinoui-data-table-body-row_selected';\n    }\n\n    return '';\n  };\n\n  const paginationSelectedRows = usePaginationSelectedRows(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <div>\n      <TextInput\n        value={searchText}\n        onChange={(event) => setSearchText(event.target.value)}\n      />\n      <Button raised onClick={handleQuery}>\n        查询\n      </Button>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <Button onClick={paginationSelectedRows.removeAllSelectedRows}>\n        删除\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n        rowClassName={handleRowClassName}\n      >\n        <RowSelectColumn\n          startIndex={currentPage * pageSize}\n          selectedRows={editingList.selectedRows}\n          isAllSelected={paginationSelectedRows.isAllSelected}\n          isContainsSelected={paginationSelectedRows.isContainsSelected}\n          toggleAllSelected={paginationSelectedRows.toggleAllSelected}\n          toggleRowSelected={editingList.toggleRowSelected}\n        />\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n\nexport default Demo;\n`}</code></pre>\n    <p>{`效果：`}</p>\n    <Playground __position={0} __code={'<Demo />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Demo\n    }} mdxType=\"Playground\">\n  <Demo mdxType=\"Demo\" />\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".sinoui-editable-data-table .sinoui-data-table-body-row_selected {\\n  background-color: rgba(0, 0, 0, 0.12);\\n}\\n\", \"\"]);\n","import React from 'react';\nimport Checkbox from 'sinoui-components/Checkbox';\nimport TableColumn from './TableColumn';\n\ninterface Props {\n  /**\n   * 选中行\n   */\n  selectedRows: number[];\n  /**\n   * 是否全选\n   */\n  isAllSelected: boolean;\n  /**\n   * 是否选中部分\n   */\n  isContainsSelected: boolean;\n  /**\n   * 全选时的回调函数\n   */\n  toggleAllSelected: () => void;\n  /**\n   * 选中一行时的回调函数\n   */\n  toggleRowSelected: (index: number) => void;\n  startIndex?: number;\n}\n\nfunction RowSelectColumn(props: Props) {\n  const {\n    isAllSelected,\n    isContainsSelected,\n    toggleAllSelected,\n    selectedRows,\n    toggleRowSelected,\n    startIndex = 0,\n  } = props;\n\n  return (\n    <TableColumn\n      width={50}\n      title={\n        <Checkbox\n          checked={isAllSelected}\n          indeterminate={!isAllSelected && isContainsSelected}\n          onChange={toggleAllSelected}\n        />\n      }\n      render={(_value, _row, index) => (\n        <Checkbox\n          checked={selectedRows.indexOf(index + startIndex) !== -1}\n          onChange={() => toggleRowSelected(index + startIndex)}\n        />\n      )}\n    />\n  );\n}\n\nexport default RowSelectColumn;\n","import EditableDataTable, {\n  Props as EditableDataTableProps,\n} from './EditableDataTable';\nimport TableColumn, { Props as TableColumnProps } from './TableColumn';\nimport EditorProps from './shared/EditorProps';\nimport useEditingList from './useEditingList';\nimport useSimpleEditingList from './useSimpleEditingList';\nimport RowSelectColumn from './RowSelectColumn';\n\nexport default EditableDataTable;\n\nexport {\n  EditableDataTableProps,\n  TableColumn,\n  TableColumnProps,\n  EditorProps,\n  useEditingList,\n  useSimpleEditingList,\n  RowSelectColumn,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport useRestListApi, { Options } from '@sinoui/use-rest-list-api';\nimport { useEffect, useCallback } from 'react';\nimport useSimpleEditingList, {\n  SimpleEditingListOptions,\n} from './useSimpleEditingList';\n\n/**\n * 维护可编辑列表的hook\n */\nexport default function useEditingList<T>(\n  url: string,\n  defaultValue: T[] = [],\n  options?: Options<T> & SimpleEditingListOptions<T>,\n) {\n  const { keyName = 'id', alwaysEditing = false } = options || {};\n  const {\n    items: originItems,\n    remove,\n    update,\n    save,\n    isLoading,\n    isError,\n    query,\n    fetch,\n    sortWith,\n    reload,\n    reset,\n    searchParams,\n    sorts,\n  } = useRestListApi<T>(url, defaultValue, options);\n  const {\n    setItems,\n    remove: removeEditingItems,\n    updateItem,\n    setReadonly,\n    ...rest\n  } = useSimpleEditingList(originItems, options);\n\n  useEffect(() => {\n    setItems(originItems);\n  }, [setItems, originItems]);\n\n  const getItemId = useCallback((item: any) => item[keyName], [keyName]);\n  /**\n   * 删除数据行\n   *\n   * @param row 数据行对象或者一组数据行与索引的数组\n   * @param index 数据行所在的索引位置\n   */\n  const asyncRemove = useCallback(\n    async (row: T | [T, number][], index?: number) => {\n      if (Array.isArray(row)) {\n        const savedRowIds = row\n          .map(([item]) => getItemId(item))\n          .filter(Boolean);\n        if (savedRowIds.length > 0) {\n          await remove(savedRowIds, false);\n        }\n      } else if (getItemId(row)) {\n        await remove(getItemId(row), false);\n      }\n\n      removeEditingItems(\n        Array.isArray(row) ? row.map(([, idx]) => idx) : (index as number),\n      );\n    },\n    [remove, removeEditingItems, getItemId],\n  );\n\n  /**\n   * 更新数据行\n   *\n   * @param row 数据行对象\n   * @param index 数据行所在位置\n   */\n  const asyncUpdate = useCallback(\n    async (row: T, index: number) => {\n      let newRow;\n      if (getItemId(row)) {\n        newRow = await update(row, false);\n      } else {\n        newRow = await save(row, false);\n      }\n\n      updateItem(index, newRow);\n\n      if (!alwaysEditing) {\n        setReadonly(index);\n      }\n    },\n    [getItemId, updateItem, alwaysEditing, update, save, setReadonly],\n  );\n\n  return {\n    ...rest,\n    query,\n    fetch,\n    sortWith,\n    reload,\n    reset,\n    searchParams,\n    sorts,\n    isLoading,\n    isError,\n    remove: asyncRemove,\n    save: asyncUpdate,\n    idPropertyName: keyName,\n    setReadonly,\n  };\n}\n"],"sourceRoot":""}
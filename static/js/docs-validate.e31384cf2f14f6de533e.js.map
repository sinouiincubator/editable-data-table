{"version":3,"sources":["D:/workspaces/editable-data-table/docs/validate.mdx","D:/workspaces/editable-data-table/src/index.ts"],"names":["name","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_3__","__position","__code","__scope","this","Playground","EditableDataTable","useSimpleEditingList","TableColumn","Button","validate","rowData","errors","duty","startsWith","editingList","alwaysEditing","react__WEBPACK_IMPORTED_MODULE_1___default","a","Fragment","sinoui_components_Button__WEBPACK_IMPORTED_MODULE_5__","raised","onClick","validateAllEditingRows","console","log","items","alert","add","_src__WEBPACK_IMPORTED_MODULE_4__","data","editingRows","touched","onFieldChange","validateField","order","title","editor","isMDXComponent","_EditableDataTable__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_TableColumn__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2___default","n","_useEditingList__WEBPACK_IMPORTED_MODULE_3__","_useSimpleEditingList__WEBPACK_IMPORTED_MODULE_4__"],"mappings":"6JAQsBA,gVAKhBC,GALgBD,EAIK,OACP,IAGdE,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAE5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,+RACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,6oDAmELP,OAAAE,EAAA,EAAAF,CAAA,2CACAA,OAAAE,EAAA,EAAAF,CAACQ,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,spDAAw9CC,QAAS,CAClgDZ,MAAOa,KAAOA,KAAKb,MAAQA,EAC3Bc,eACAC,sBACAC,yBACAC,gBACAC,YACCb,QAAQ,cACZ,WACK,SAASc,EAASC,GAChB,IAAMC,EAAS,GAUf,OARKD,EAAQ1B,OACX2B,EAAO3B,KAAO,gBAGZ0B,EAAQE,MAAQF,EAAQE,KAAKC,WAAW,OAC1CF,EAAOC,KAAO,+CAGTD,EAqCT,OAAOpB,OAAAE,EAAA,EAAAF,CAlCP,WACE,IAAMuB,EAAcR,YAAqB,CAAC,CACxCV,GAAI,IACJZ,KAAM,UACN4B,KAAM,aACL,CACDhB,GAAI,IACJZ,KAAM,QACN4B,KAAM,cACJ,CACFG,eAAe,EACfN,aAYF,OAAOlB,OAAAE,EAAA,EAAAF,CAAAyB,EAAAC,EAAAC,SAAA,KACX3B,OAAAE,EAAA,EAAAF,CAAC4B,EAAA,EAAD,CAAQC,QAAM,EAACC,QAVQ,WACZP,EAAYQ,0BAGfC,QAAQC,IAAI,6CAAWV,EAAYW,OACnCC,MAAM,yCAHNA,MAAM,uEAQsB/B,QAAQ,UAA5C,gBACAJ,OAAAE,EAAA,EAAAF,CAAC4B,EAAA,EAAD,CAAQC,QAAM,EAACC,QAAS,kBAAMP,EAAYa,IAAI,KAAKhC,QAAQ,UAA3D,gBACAJ,OAAAE,EAAA,EAAAF,CAACqC,EAAA,EAAD,CAAmBC,KAAMf,EAAYW,MAAOK,YAAahB,EAAYgB,YAAanB,OAAQG,EAAYH,OAAQoB,QAASjB,EAAYiB,QAASC,cAAelB,EAAYmB,cAAetC,QAAQ,qBAC5LJ,OAAAE,EAAA,EAAAF,CAACqC,EAAA,EAAD,CAAaM,OAAK,EAACC,MAAM,eAAKxC,QAAQ,gBACtCJ,OAAAE,EAAA,EAAAF,CAACqC,EAAA,EAAD,CAAaO,MAAM,eAAKnD,KAAK,OAAOoD,OAAO,QAAQzC,QAAQ,gBAC3DJ,OAAAE,EAAA,EAAAF,CAACqC,EAAA,EAAD,CAAaO,MAAM,eAAKnD,KAAK,OAAOoD,OAAO,QAAQzC,QAAQ,mBAKpD,CAAMA,QAAQ,oLAM7BR,EAAWkD,gBAAiB,iDC9J5B,IAAAC,EAAAC,EAAA,+BAAAC,EAAAD,EAAA,yBAAAA,EAAAE,EAAAC,EAAA,sBAAAF,EAAA,QAAAG,EAAAJ,EAAA,+BAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,2BAAAA,EAAAE,EAAAC,EAAA,sBAAAI,EAAA,QAAAC,EAAAR,EAAA,iCAAAA,EAAAE,EAAAC,EAAA,sBAAAK,EAAA,IAQe1C,MAAf","file":"static/js/docs-validate.98c741c0.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport EditableDataTable, { useSimpleEditingList, TableColumn } from '../src';\nimport Button from 'sinoui-components/Button';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Demo = makeShortcode(\"Demo\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"校验\"\n    }}>{`校验`}</h1>\n    <p>{`EditableDataTable 内置支持校验，也支持在表格组件的外部维护校验状态。可以使用 useSimpleEditingList 管理外置的校验状态。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport EditableDataTable, {\n  useSimpleEditingList,\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\ninterface User {\n  id: string;\n  name: string;\n  duty?: string;\n}\n\nfunction validate(rowData: User) {\n  const errors = {};\n\n  if (!rowData.name) {\n    errors.name = '必填';\n  }\n\n  if (rowData.duty && rowData.duty.startsWith('1')) {\n    errors.duty = '职务不能以1开头';\n  }\n\n  return errors;\n}\n\nfunction Demo() {\n  const editingList = useSimpleEditingList<User>(\n    [\n      { id: '1', name: 'Jacking', duty: 'developer' },\n      { id: '2', name: 'zinuo', duty: 'developer' },\n    ],\n    {\n      alwaysEditing: true,\n      validate,\n    },\n  );\n\n  const handleSave = () => {\n    if (!editingList.validateAllEditingRows()) {\n      alert('数据校验失败，请检查。');\n    } else {\n      console.log('需要保存的数据', editingList.items);\n      alert('保存数据成功');\n    }\n  };\n\n  return (\n    <>\n      <button onClick={handleSave}>保存</button>\n      <EditableDataTable\n        data={editingList.items}\n        editingRows={editingList.editingRows}\n        errors={editingList.errors}\n        touched={editingList.touched}\n        onFieldChange={editingList.validateField}\n      >\n        <TableColumn order title=\"序号\" />\n        <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" />\n        <TableColumn title=\"职务\" name=\"duty\" editor=\"input\" />\n      </EditableDataTable>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`演示效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  function validate(rowData) {\\n    const errors = {}\\n    if (!rowData.name) {\\n      errors.name = \\'必填\\'\\n    }\\n\\n    if (rowData.duty && rowData.duty.startsWith(\\'1\\')) {\\n      errors.duty = \\'职务不能以1开头\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  function Demo() {\\n    const editingList = useSimpleEditingList(\\n      [\\n        { id: \\'1\\', name: \\'Jacking\\', duty: \\'developer\\' },\\n        { id: \\'2\\', name: \\'zinuo\\', duty: \\'developer\\' },\\n      ],\\n      {\\n        alwaysEditing: true,\\n        validate,\\n      },\\n    )\\n\\n    const handleSave = () => {\\n      if (!editingList.validateAllEditingRows()) {\\n        alert(\\'数据校验失败，请检查。\\')\\n      } else {\\n        console.log(\\'需要保存的数据\\', editingList.items)\\n        alert(\\'保存数据成功\\')\\n      }\\n    }\\n\\n    return (\\n      <>\\n        <Button raised onClick={handleSave}>\\n          保存\\n        </Button>\\n        <Button raised onClick={() => editingList.add({})}>\\n          新增\\n        </Button>\\n        <EditableDataTable\\n          data={editingList.items}\\n          editingRows={editingList.editingRows}\\n          errors={editingList.errors}\\n          touched={editingList.touched}\\n          onFieldChange={editingList.validateField}\\n        >\\n          <TableColumn order title=\\\"序号\\\" />\\n          <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n          <TableColumn title=\\\"职务\\\" name=\\\"duty\\\" editor=\\\"input\\\" />\\n        </EditableDataTable>\\n      </>\\n    )\\n  }\\n\\n  return <Demo />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      EditableDataTable,\n      useSimpleEditingList,\n      TableColumn,\n      Button\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(rowData) {\n          const errors = {};\n\n          if (!rowData.name) {\n            errors.name = '必填';\n          }\n\n          if (rowData.duty && rowData.duty.startsWith('1')) {\n            errors.duty = '职务不能以1开头';\n          }\n\n          return errors;\n        }\n\n        function Demo() {\n          const editingList = useSimpleEditingList([{\n            id: '1',\n            name: 'Jacking',\n            duty: 'developer'\n          }, {\n            id: '2',\n            name: 'zinuo',\n            duty: 'developer'\n          }], {\n            alwaysEditing: true,\n            validate\n          });\n\n          const handleSave = () => {\n            if (!editingList.validateAllEditingRows()) {\n              alert('数据校验失败，请检查。');\n            } else {\n              console.log('需要保存的数据', editingList.items);\n              alert('保存数据成功');\n            }\n          };\n\n          return <>\n      <Button raised onClick={handleSave} mdxType=\"Button\">保存</Button>\n      <Button raised onClick={() => editingList.add({})} mdxType=\"Button\">新增</Button>\n      <EditableDataTable data={editingList.items} editingRows={editingList.editingRows} errors={editingList.errors} touched={editingList.touched} onFieldChange={editingList.validateField} mdxType=\"EditableDataTable\">\n        <TableColumn order title=\"序号\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"职务\" name=\"duty\" editor=\"input\" mdxType=\"TableColumn\" />\n      </EditableDataTable>\n    </>;\n        }\n\n        return <Demo mdxType=\"Demo\" />;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import EditableDataTable, {\n  Props as EditableDataTableProps,\n} from './EditableDataTable';\nimport TableColumn, { Props as TableColumnProps } from './TableColumn';\nimport EditorProps from './shared/EditorProps';\nimport useEditingList from './useEditingList';\nimport useSimpleEditingList from './useSimpleEditingList';\n\nexport default EditableDataTable;\n\nexport {\n  EditableDataTableProps,\n  TableColumn,\n  TableColumnProps,\n  EditorProps,\n  useEditingList,\n  useSimpleEditingList,\n};\n"],"sourceRoot":""}
{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/editable-data-table/docs/Demo.tsx","D:/Users/jacki/Documents/GitHub/editable-data-table/docs/pagination-show.mdx","D:/Users/jacki/Documents/GitHub/editable-data-table/src/index.ts"],"names":["usePaginationList","items","currentPage","pageSize","useMemo","slice","Demo","editingList","useEditingList","_usePagination","defaultCurrentPage","arguments","length","undefined","defaultPageSize","_useState","useState","_useState2","Object","slicedToArray","setCurrentPage","_useState3","_useState4","setPageSize","pageNo","newPageSize","usePagination","_usePagination2","update","data","editingRows","_usePaginationEditing","add","useCallback","save","item","index","edit","remove","usePaginationEditingListActions","_useState5","_useState6","searchText","setSearchText","react_default","a","createElement","TextInput","value","onChange","event","target","Button","raised","onClick","query","title","src","idPropertyName","name","editor","render","_value","_id","context","Fragment","editing","autoWidth","color","Pagination","total","size","layoutProps","MDXLayout","MDXContent","_ref","components","props","objectWithoutProperties","index_es","assign","mdxType","id","parentName","className","index_esm","__position","__code","__scope","this","Playground","docs_Demo","href","isMDXComponent","_EditableDataTable__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_TableColumn__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2___default","n","_useEditingList__WEBPACK_IMPORTED_MODULE_3__","_useSimpleEditingList__WEBPACK_IMPORTED_MODULE_4__","EditableDataTable"],"mappings":"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","file":"static/js/docs-pagination-show.de000201.js","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, { useEditingList, TableColumn } from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  const [searchText, setSearchText] = useState('');\n  const handleQuery = () => {\n    editingList.query({ title: searchText });\n  };\n\n  return (\n    <div>\n      <TextInput\n        value={searchText}\n        onChange={(event) => setSearchText(event.target.value)}\n      />\n      <Button raised onClick={handleQuery}>\n        查询\n      </Button>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n\nexport default Demo;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport Demo from './Demo';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"分页展示数据的可编辑数据表格\"\n    }}>{`分页展示数据的可编辑数据表格`}</h1>\n    <p>{`本章节介绍一个场景：一次性加载列表数据，但是在前端分页显示的可编辑数据表格。`}</p>\n    <p>{`包含的功能：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`分页展示列表`}</li>\n      <li parentName=\"ul\">{`加载数据`}</li>\n      <li parentName=\"ul\">{`查询`}</li>\n      <li parentName=\"ul\">{`新增`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, { useEditingList, TableColumn } from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  const [searchText, setSearchText] = useState('');\n  const handleQuery = () => {\n    editingList.query({ title: searchText });\n  };\n\n  return (\n    <div>\n      <TextInput\n        value={searchText}\n        onChange={(event) => setSearchText(event.target.value)}\n      />\n      <Button raised onClick={handleQuery}>\n        查询\n      </Button>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n\nexport default Demo;\n`}</code></pre>\n    <p>{`效果：`}</p>\n    <Playground __position={0} __code={'<Demo />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Demo\n    }} mdxType=\"Playground\">\n  <Demo mdxType=\"Demo\" />\n    </Playground>\n    <p>{`如果你感觉上面的例子有点复杂，可以看看下面的步骤分析：`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%8A%A0%E8%BD%BD%E5%B9%B6%E5%B1%95%E7%8E%B0%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE\"\n        }}>{`加载并展现列表数据`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E5%88%86%E9%A1%B5%E5%B1%95%E7%8E%B0%E6%95%B0%E6%8D%AE\"\n        }}>{`分页展现数据`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AE\"\n        }}>{`新增数据`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E7%BC%96%E8%BE%91%E4%B8%8E%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE\"\n        }}>{`编辑与删除数据`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E6%9F%A5%E8%AF%A2%E5%88%97%E8%A1%A8\"\n        }}>{`查询列表`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"加载并展现列表数据\"\n    }}>{`加载并展现列表数据`}</h2>\n    <p>{`本例需要一次性加载全部的列表数据，而不是`}<a parentName=\"p\" {...{\n        \"href\": \"/pagination-editable-table\"\n      }}>{`分页加载数据`}</a>{`。使用`}<inlineCode parentName=\"p\">{`useEditingList`}</inlineCode>{`来加载列表数据。代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n\n  return (\n    <EditableDataTable\n      data={editingList.items}\n      idPropertyName={editingList.idPropertyName}\n    >\n      <TableColumn title=\"id\" name=\"id\" />\n      <TableColumn title=\"标题\" name=\"title\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"分页展现数据\"\n    }}>{`分页展现数据`}</h2>\n    <p>{`可以使用`}<inlineCode parentName=\"p\">{`sinoui-components/Pagination`}</inlineCode>{`组件作为分页器，展现页码信息和切换页码的操作按钮。`}<inlineCode parentName=\"p\">{`Pagination`}</inlineCode>{`组件需要以下几个关键属性：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`total`}</inlineCode>{` - 列表数据总数目。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`currentPage`}</inlineCode>{` - 当前页码。从`}<inlineCode parentName=\"li\">{`1`}</inlineCode>{`开始。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pageSize`}</inlineCode>{` - 页大小。一页能够呈现数据的数目。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` - 指定当前页码、页大小发生变化的回调函数。`}</li>\n    </ul>\n    <p>{`上面三个属性，`}<inlineCode parentName=\"p\">{`total`}</inlineCode>{`等于`}<inlineCode parentName=\"p\">{`editingList.items.length`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`currentPage`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`pageSize`}</inlineCode>{`是变化的数据，所以需要定义两个状态来维护，如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n  const [currentPage, setCurrentPage] = useState(0); // 当前页码，习惯从0开始。注意与Pagination.currentPage的区别。\n  const [pageSize, setPageSize] = useState(10);\n\n  const handlePaginationChange = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return (\n    <div>\n      <!--此处省略EditableDataTable-->\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={handlePaginationChange}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`上面的代码只是展现出了分页器，接下来我们来解决分页展现列表数据（注意哟，这个时候列表还是展现所有的数据）。`}</p>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`属性是用来接收需要展现的一组数据的属性。`}<inlineCode parentName=\"p\">{`data={editingList.items}`}</inlineCode>{`会将所有的数据给了可编辑表格呈现出来。现在想要只呈现当前页的数据，那就计算出当前页的数据数组指定给`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`即可，代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useMemo } from 'react';\n// ... 省略一部分import代码\n\nfunction Demo() {\n  // ...省略一部分代码\n  const data = useMemo(() =>\n    editingList.items.slice(\n      currentPage * pageSize,\n      (currentPage + 1) * pageSize,\n    ),\n    [editingList.items, currentPage, pageSize],\n  );\n\n  return (\n    <div>\n      <EditableDataTable data={data}>\n        <!--此处省略TableColumn-->\n      </EditableDataTable>\n      <!--此处省略Pagination-->\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`这里使用`}<a parentName=\"p\" {...{\n        \"href\": \"https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo\"\n      }}>{`React useMemo`}</a>{`缓存了分页数据的计算。`}</p>\n    <p>{`完整代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n\n  const [currentPage, setCurrentPage] = useState(0); // 当前页码，习惯从0开始。注意与Pagination.currentPage的区别。\n  const [pageSize, setPageSize] = useState(10);\n\n  const handlePaginationChange = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  const data = useMemo(\n    () =>\n      editingList.items.slice(\n        currentPage * pageSize,\n        (currentPage + 1) * pageSize,\n      ),\n    [editingList.items, currentPage, pageSize],\n  );\n\n  return (\n    <div>\n      <EditableDataTable\n        data={data}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn title=\"id\" name=\"id\" />\n        <TableColumn title=\"标题\" name=\"title\" />\n      </EditableDataTable>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={handlePaginationChange}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"提炼状态管理\"\n    }}>{`提炼状态管理`}</h2>\n    <p>{`Demo 组件目前已经比较复杂了，需要管理很多状态，我们可以使用`}<a parentName=\"p\" {...{\n        \"href\": \"https://zh-hans.reactjs.org/docs/hooks-custom.html\"\n      }}>{`自定义 hook`}</a>{`将状态管理提炼到更小的函数中进行维护。现在我们来提炼两个自定义 hook，分别是`}<inlineCode parentName=\"p\">{`usePagination`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`usePaginationList`}</inlineCode>{`。`}</p>\n    <p>{`我们可以将分页器状态和更新方法迁移到一个自定义 hook 中，我们取名为`}<inlineCode parentName=\"p\">{`usePagination`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n`}</code></pre>\n    <p>{`这样 Demo 组件中的分页代码可以简化一下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  const [currentPage, pageSize, update] = usePagination();\n\n  return (\n    <div>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={(pageNo, newPageSize) => update(pageNo - 1, newPageSize)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`可以将获取分页的列表数据也提炼到自动以 hook 中，我们取名为`}<inlineCode parentName=\"p\">{`usePaginationList`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n`}</code></pre>\n    <p>{`Demo 组件可以简化`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`的计算：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n\n  return (\n    <div>\n      <EditableDataTable data={data} />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`完整的代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n\n  return (\n    <div>\n      <EditableDataTable\n        data={data}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn title=\"id\" name=\"id\" />\n        <TableColumn title=\"标题\" name=\"title\" />\n      </EditableDataTable>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={(pageNo, newPageSize) => update(pageNo - 1, newPageSize)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"新增数据\"\n    }}>{`新增数据`}</h2>\n    <p>{`点击新增按钮时，在当前页新增一条数据。这个要求需要注意的是`}<strong parentName=\"p\">{`在当前页`}</strong>{`新增一条数据。所以我们应该按照下面的方式新增数据：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`editingList.add({}, currentPage * pageSize);\n`}</code></pre>\n    <p>{`示例代码：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import Button from 'sinoui-components/Button';\n\nfunction Demo() {\n  const handleAdd = () => {\n    editingList.add({}, currentPage * pageSize);\n  };\n\n  return (\n    <div>\n      <Button raised onClick={handleAdd}>\n        新增\n      </Button>\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"编辑与删除数据\"\n    }}>{`编辑与删除数据`}</h2>\n    <p><inlineCode parentName=\"p\">{`editingList`}</inlineCode>{`提供的`}<inlineCode parentName=\"p\">{`edit`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`save`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`remove`}</inlineCode>{`方法都是根据数据在整个列表的索引位置进行操作的。所以我们在使用这些方法时，需要与分页状态相结合。`}</p>\n    <p>{`首先我们通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`添加一个操作列：在编辑状态时，有保存和删除按钮；在非编辑状态时，有编辑和删除按钮。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<EditableDataTable>\n  <TableColumn\n    title=\"操作\"\n    render={(value, rowData, index, id, context) => (\n      <>\n        {context.editing ? <Button>保存</Button> : <Button>编辑</Button>}\n        <Button color=\"danger\">删除</Button>\n      </>\n    )}\n  />\n</EditableDataTable>\n`}</code></pre>\n    <p>{`保存按钮的点击事件回调函数：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button\n  onClick={() => editingList.save(rowData, currentPage * pageSize + index)}\n>\n  保存\n</Button>\n`}</code></pre>\n    <p>{`重点是`}<inlineCode parentName=\"p\">{`currentPage * pageSize + index`}</inlineCode>{`。`}</p>\n    <p>{`编辑按钮：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button onClick={() => editingList.edit(currentPage * pageSize + index)}>\n  编辑\n</Button>\n`}</code></pre>\n    <p>{`删除按钮：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button\n  onClick={() => editingList.remove(rowData, currentPage * pageSize + index)}\n>\n  删除\n</Button>\n`}</code></pre>\n    <p>{`当然，别忘了将`}<inlineCode parentName=\"p\">{`editingList.editingRows`}</inlineCode>{`传给`}<inlineCode parentName=\"p\">{`EditableDataTable.editingRows`}</inlineCode>{`，并且定义单元格编辑器：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<EditableDataTable editingRows={editingList.editingRows}>\n  <TableColumn title=\"标题\" name=\"title\" editor=\"input\" />\n</EditableDataTable>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"再次提炼状态管理\"\n    }}>{`再次提炼状态管理`}</h2>\n    <p>{`增加、删除、修改、编辑四个动作都与翻页有关系，我们可以将这四个方法提炼到一个自定义 hook：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n`}</code></pre>\n    <p>{`之后我们的代码就是这样子的：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, { useEditingList, TableColumn } from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <div>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"校验\"\n    }}>{`校验`}</h2>\n    <p>{`在这个场景中，使用`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`内置的校验即可。`}</p>\n    <p>{`首先定义一下数据行的校验方法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function validate(rowData) {\n  const errors: { [x: string]: string } = {};\n\n  if (!rowData.title) {\n    errors.title = '必填';\n  }\n\n  return errors;\n}\n`}</code></pre>\n    <p>{`然后将`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`传递给`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<EditableDataTable validate={validate} />\n`}</code></pre>\n    <p>{`到这一步，修改编辑器的值，就会调用`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`方法校验数据是否有问题，这就是“实时校验”。`}</p>\n    <p>{`最后，调整保存方法，先校验数据，然后再保存数据：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button\n  autoWidth\n  onClick={() => {\n    if (!context.validate()) {\n      alert('数据填写不完整');\n    } else {\n      save();\n    }\n  }}\n>\n  保存\n</Button>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"查询列表\"\n    }}>{`查询列表`}</h2>\n    <p><inlineCode parentName=\"p\">{`editingList.query(searechParams)`}</inlineCode>{`是用来查询的方法，可以在查询表单提交时调用这个方法，完成查询事宜。`}</p>\n    <p>{`举一个与某内部项目查询表单组件的组合，完成表格数据查询的功能。`}</p>\n    <p>{`例子 1：`}<inlineCode parentName=\"p\">{`SearchForm`}</inlineCode>{`是查询表单组件，`}<inlineCode parentName=\"p\">{`SearchButton`}</inlineCode>{`是查询按钮。点击查询按钮，查询表单会发出提交（submit）事件。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<SearchForm onSubmit={editingList.query}>\n  <SearchFormItem>\n    <Label>标题</Label>\n    <TextInput name=\"title\" />\n  </SearchFormItem>\n  <SearchButton />\n</SearchForm>\n`}</code></pre>\n    <p>{`例子 2：`}<inlineCode parentName=\"p\">{`SearchFormState`}</inlineCode>{`是用来切换简单和复杂查询表单的组件，`}<inlineCode parentName=\"p\">{`advancedForm`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`simpleForm`}</inlineCode>{`两个属性分别用来指定复杂和查询表单。它有`}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{`属性，在查询表单的查询按钮被点击时，调用相对应的回调函数。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<SearchFormState\n  onSubmit={editingList.query}\n  advancedForm={AdvancedSearchForm}\n  simpleForm={SimpleSearchForm}\n/>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import EditableDataTable, {\n  Props as EditableDataTableProps,\n} from './EditableDataTable';\nimport TableColumn, { Props as TableColumnProps } from './TableColumn';\nimport EditorProps from './shared/EditorProps';\nimport useEditingList from './useEditingList';\nimport useSimpleEditingList from './useSimpleEditingList';\n\nexport default EditableDataTable;\n\nexport {\n  EditableDataTableProps,\n  TableColumn,\n  TableColumnProps,\n  EditorProps,\n  useEditingList,\n  useSimpleEditingList,\n};\n"],"sourceRoot":""}
{"version":3,"sources":["D:/workspaces/editable-data-table/docs/index.mdx","D:/workspaces/editable-data-table/src/Table.tsx","D:/workspaces/editable-data-table/src/EmptyDataTableRow.tsx","D:/workspaces/editable-data-table/src/DataTableColGroup.tsx","D:/workspaces/editable-data-table/src/DataTableHead.tsx","D:/workspaces/editable-data-table/src/DataTableBodyRow.tsx","D:/workspaces/editable-data-table/src/DataTableBody.tsx","D:/workspaces/editable-data-table/src/EditableDataTable.tsx","D:/workspaces/editable-data-table/src/DataTableCellEditor.tsx","D:/workspaces/editable-data-table/src/DataTableBodyCell.tsx","D:/workspaces/editable-data-table/src/DataTableHeadCell.tsx","D:/workspaces/editable-data-table/src/TableColumn.tsx","D:/workspaces/editable-data-table/src/shared/DataTableRowContext.ts","D:/workspaces/editable-data-table/src/shared/EditableDataTableContext.ts","D:/workspaces/editable-data-table/src/shared/EditingBodyRowContainer.ts","D:/workspaces/editable-data-table/src/shared/constants.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__","assign","mdxType","id","parentName","className","href","docz__WEBPACK_IMPORTED_MODULE_5__","__position","__code","__scope","this","useState","useCallback","useMemo","Playground","Props","TableColumn","EditableDataTable","Button","TextInput","produce","_src_EditableDataTable__WEBPACK_IMPORTED_MODULE_7__","data","firstName","lastName","title","_src_TableColumn__WEBPACK_IMPORTED_MODULE_6__","name","render","value","row","concat","editingRows","editor","validate","rowData","errors","startsWith","_useState","_useState2","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","setEditingRows","_useState3","_useState4","items","setItems","react__WEBPACK_IMPORTED_MODULE_3___default","a","Fragment","sinoui_components_Button__WEBPACK_IMPORTED_MODULE_8__","onClick","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","result","order","index","context","editing","autoWidth","draft","alert","handleSave","handleEdit","removeByIndex","splice","handleRemove","_useState5","_useState6","setData","prev","filter","_item","i","renderButtons","columns","length","isMDXComponent","captionTypeStyle","css","_templateObject","theme","typography","body1","fontSize","fontFamily","fontWeightMedium","color","bodyTypeStyle","_templateObject2","fontWeight","dataTableCellStyle","_templateObject3","palette","type","rowBgColor","light","tableRowSelected","tableRowHover","dark","StyledTable","styled","Table","_templateObject4","primary","caption","Wrapper","div","EmptyDataTableRow_templateObject","EmptyDataTableRow","children","react_default","createElement","data-testid","RowType","ColGroup","DataTableColGroup","DataTableRowContext","Provider","DataTableHead","React","memo","Body","EditingBodyRowContainer","DataTableBody","idPropertyName","_ref$editingRows","map","item","src_DataTableBodyRow","key","_props$data","_props$idPropertyName","_props$emptyTitle","emptyTitle","_ref$idPropertyName","onRowChange","options","useRef","useEffect","current","useEditableDataTable","src_Table","EditableDataTableContext","src_DataTableColGroup","src_DataTableHead","src_DataTableBody","src_EmptyDataTableRow","Editor","useContext","valueFromContext","setValue","slicedToArray","_EditingBodyRowContai","useContainer","touched","validateField","handleChange","event","newValue","target","isChangeEvent","error","undefined","onChange","FormHelpText","MemoDataTableBodyCellInner","Error","src_DataTableCellEditor","DataTableBodyCell","state","DataTableHeadCell","classNames","align_center","width","Head","src_DataTableHeadCell","src_DataTableBodyCell","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_constants__WEBPACK_IMPORTED_MODULE_1__","createContext","createContainer","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","setTouched","setErrors","rowDataRef","newRowData","arguments","updateTouched","newTouched","keys","forEach","fieldName","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","d","__webpack_exports__"],"mappings":"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","file":"static/js/docs-index.6dd70ea3.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { useState, useCallback, useMemo } from 'react';\nimport { Playground, Props } from 'docz';\nimport TableColumn from '../src/TableColumn';\nimport EditableDataTable from '../src/EditableDataTable';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport produce from 'immer';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"可编辑表格\"\n    }}>{`可编辑表格`}</h1>\n    <p>{`安装：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinouiincubator/editable-data-table\n`}</code></pre>\n    <p>{`引用：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n`}</code></pre>\n    <p>{`源码路径：`}<a parentName=\"p\" {...{\n        \"href\": \"https://sinouiincubator.github.io/editable-data-table\"\n      }}>{`https://sinouiincubator.github.io/editable-data-table`}</a>{`。`}</p>\n    <p>{`可编辑列表（`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`）提供以下功能：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`展现列表数据（不支持分页，但是可以与分页功能组合使用）`}</li>\n      <li parentName=\"ul\">{`编辑数据行`}</li>\n      <li parentName=\"ul\">{`校验数据行`}</li>\n    </ul>\n    <p>{`我们可以基于可编辑表格做列表数据的增删改查。下面我们通过例子来了解基本用法。`}</p>\n    <h2 {...{\n      \"id\": \"展现列表数据\"\n    }}>{`展现列表数据`}</h2>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`可以用来展现列表数据，可以通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`定义列表的列信息：列标题、列单元格数据渲染逻辑、宽度等。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const users = [\n    {\n      id: '1',\n      firstName: 'Jacking',\n      lastName: 'Liu',\n      title: 'developer',\n    },\n    {\n      id: '2',\n      firstName: 'Zinuo',\n      lastName: 'Tian',\n      title: 'developer',\n    },\n  ];\n\n  return (\n    <EditableDataTable data={users}>\n      <TableColumn title=\"id\" name=\"id\" />\n      <TableColumn\n        title=\"姓名\"\n        render={(value, row) => \\`\\${row.firstName} \\${row.lastName}\\`}\n      />\n      <TableColumn title=\"标题\" name=\"title\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      firstName: \\'Jacking\\',\\n      lastName: \\'Liu\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      firstName: \\'Zinuo\\',\\n      lastName: \\'Tian\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n  return (\\n    <EditableDataTable data={users}>\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n      <TableColumn\\n        title=\\\"姓名\\\"\\n        render={(value, row) => `${row.firstName} ${row.lastName}`}\\n      />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const users = [{\n          id: '1',\n          firstName: 'Jacking',\n          lastName: 'Liu',\n          title: 'developer'\n        }, {\n          id: '2',\n          firstName: 'Zinuo',\n          lastName: 'Tian',\n          title: 'developer'\n        }];\n        return <EditableDataTable data={users} mdxType=\"EditableDataTable\">\n        <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n        <TableColumn title=\"姓名\" render={(value, row) => `${row.firstName} ${row.lastName}`} mdxType=\"TableColumn\" />\n        <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n      </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"编辑数据行\"\n    }}>{`编辑数据行`}</h2>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`组件通过`}<inlineCode parentName=\"p\">{`editingRows`}</inlineCode>{`接收数据行是否处于编辑状态的数据。这是一个与`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`数组等长的布尔数组，`}<inlineCode parentName=\"p\">{`editingRows`}</inlineCode>{`数组的每一项与`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`数组一一对应，`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`表示编辑状态、`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`表示非编辑状态。`}</p>\n    <p>{`可以通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`组件的`}<inlineCode parentName=\"p\">{`editor`}</inlineCode>{`属性指定单元格的编辑器。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import EditableDataTable, {\n  TableColumn,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const users = [\n    {\n      id: '1',\n      name: 'Jacking',\n      title: 'developer',\n    },\n    {\n      id: '2',\n      name: 'zinuo',\n      title: 'developer',\n    },\n  ];\n\n  const editingRows = [false, true]; // 第二行数据是编辑状态\n\n  return (\n    <EditableDataTable data={users} editingRows={editingRows}>\n      <TableColumn title=\"id\" name=\"id\" editor=\"input\" />\n      <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" />\n      <TableColumn title=\"标题\" name=\"title\" editor=\"input\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <p>{`查看运行效果：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable data={users} editingRows={editingRows}>\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor=\\\"input\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor=\"input\" mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"校验数据行\"\n    }}>{`校验数据行`}</h2>\n    <p>{`可以通过`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`属性指定行数据的校验，这是一个方法，方法返回验证错误的结果。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function validate(rowData) {\n  const errors = {};\n\n  if (!rowData.id) {\n    errors.id = '必填';\n  }\n\n  if (!rowData.name) {\n    errors.name = '必填';\n  }\n\n  if (rowData.title && rowData.title.startsWith('1')) {\n    errors.title = '不能以1开头';\n  }\n\n  return errors;\n}\n`}</code></pre>\n    <p>{`这个方法运行的结果类似如下面：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  id: '必填',\n  title: '不能以1开头'\n}\n`}</code></pre>\n    <p>{`这个键值对数据，键表示有验证错误的字段名（表单域名称），值表示字段名对应的验证错误。`}</p>\n    <p>{`看看效果：`}</p>\n    <Playground __position={2} __code={'() => {\\n  function validate(rowData) {\\n    const errors = {}\\n    if (!rowData.id) {\\n      errors.id = \\'必填\\'\\n    }\\n\\n    if (!rowData.name) {\\n      errors.name = \\'必填\\'\\n    }\\n\\n    if (rowData.title && rowData.title.startsWith(\\'1\\')) {\\n      errors.title = \\'不能以1开头\\'\\n    }\\n\\n    return errors\\n  }\\n\\n  const users = [\\n    {\\n      id: \\'1\\',\\n      name: \\'Jacking\\',\\n      title: \\'developer\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'zinuo\\',\\n      title: \\'developer\\',\\n    },\\n  ]\\n\\n  const editingRows = [false, true] // 第二行数据是编辑状态\\n\\n  return (\\n    <EditableDataTable\\n      data={users}\\n      editingRows={editingRows}\\n      validate={validate}\\n    >\\n      <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"姓名\\\" name=\\\"name\\\" editor=\\\"input\\\" />\\n      <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor=\\\"input\\\" />\\n    </EditableDataTable>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(rowData) {\n          const errors = {};\n\n          if (!rowData.id) {\n            errors.id = '必填';\n          }\n\n          if (!rowData.name) {\n            errors.name = '必填';\n          }\n\n          if (rowData.title && rowData.title.startsWith('1')) {\n            errors.title = '不能以1开头';\n          }\n\n          return errors;\n        }\n\n        const users = [{\n          id: '1',\n          name: 'Jacking',\n          title: 'developer'\n        }, {\n          id: '2',\n          name: 'zinuo',\n          title: 'developer'\n        }];\n        const editingRows = [false, true]; // 第二行数据是编辑状态\n\n        return <EditableDataTable data={users} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"姓名\" name=\"name\" editor=\"input\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor=\"input\" mdxType=\"TableColumn\" />\n  </EditableDataTable>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"增删改查\"\n    }}>{`增删改查`}</h2>\n    <p>{`可以基于`}<inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`实现增删改查。看看下面一个与后端 API 无法的增删改查示例：`}</p>\n    <Playground __position={3} __code={'() => {\\n  const validate = data => {\\n    const result = {}\\n    if (!data.id) {\\n      result.id = \\'必填\\'\\n    }\\n    if (data.title && data.title.startsWith(\\'1\\')) {\\n      result.title = \\'标题不能以1开头\\'\\n    }\\n    return result\\n  }\\n  const [editingRows, setEditingRows] = useState([true, false])\\n  const [items, setItems] = useState([\\n    { id: \\'1\\', title: \\'123\\' },\\n    { id: \\'2\\', title: \\'1234\\' },\\n  ])\\n\\n  const handleSave = (row, index, context) => {\\n    if (!context.validate()) {\\n      alert(\\'数据填写不完整\\')\\n    } else {\\n      setEditingRows(\\n        produce(editingRows, draft => {\\n          draft[index] = false\\n        }),\\n      )\\n      alert(\\'保存成功\\')\\n    }\\n  }\\n\\n  const handleEdit = index => {\\n    setEditingRows(\\n      produce(editingRows, draft => {\\n        draft[index] = true\\n      }),\\n    )\\n  }\\n\\n  const handleRemove = index => {\\n    const removeByIndex = produce(draft => {\\n      draft.splice(index, 1)\\n    })\\n    setEditingRows(removeByIndex)\\n    setItems(removeByIndex)\\n  }\\n\\n  const handleAdd = () => {\\n    setEditingRows([...editingRows, true])\\n    setItems([...items, {}])\\n  }\\n\\n  return (\\n    <>\\n      <Button onClick={handleAdd}>新增</Button>\\n      <EditableDataTable\\n        data={items}\\n        editingRows={editingRows}\\n        validate={validate}\\n      >\\n        <TableColumn title=\\\"序号\\\" order />\\n        <TableColumn title=\\\"id\\\" name=\\\"id\\\" editor={TextInput} />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" editor={TextInput} />\\n        <TableColumn\\n          title=\\\"操作\\\"\\n          name=\\\"id\\\"\\n          render={(value, row, index, id, context) => (\\n            <>\\n              {context.editing ? (\\n                <Button\\n                  autoWidth\\n                  onClick={() => handleSave(row, index, context)}\\n                >\\n                  保存\\n                </Button>\\n              ) : (\\n                <Button autoWidth onClick={() => handleEdit(index)}>\\n                  编辑\\n                </Button>\\n              )}\\n              <Button autoWidth onClick={() => handleRemove(index)}>\\n                删除\\n              </Button>\\n            </>\\n          )}\\n        />\\n      </EditableDataTable>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = data => {\n          const result = {};\n\n          if (!data.id) {\n            result.id = '必填';\n          }\n\n          if (data.title && data.title.startsWith('1')) {\n            result.title = '标题不能以1开头';\n          }\n\n          return result;\n        };\n\n        const [editingRows, setEditingRows] = useState([true, false]);\n        const [items, setItems] = useState([{\n          id: '1',\n          title: '123'\n        }, {\n          id: '2',\n          title: '1234'\n        }]);\n\n        const handleSave = (row, index, context) => {\n          if (!context.validate()) {\n            alert('数据填写不完整');\n          } else {\n            setEditingRows(produce(editingRows, draft => {\n              draft[index] = false;\n            }));\n            alert('保存成功');\n          }\n        };\n\n        const handleEdit = index => {\n          setEditingRows(produce(editingRows, draft => {\n            draft[index] = true;\n          }));\n        };\n\n        const handleRemove = index => {\n          const removeByIndex = produce(draft => {\n            draft.splice(index, 1);\n          });\n          setEditingRows(removeByIndex);\n          setItems(removeByIndex);\n        };\n\n        const handleAdd = () => {\n          setEditingRows([...editingRows, true]);\n          setItems([...items, {}]);\n        };\n\n        return <>\n  <Button onClick={handleAdd} mdxType=\"Button\">新增</Button>\n  <EditableDataTable data={items} editingRows={editingRows} validate={validate} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"序号\" order mdxType=\"TableColumn\" />\n    <TableColumn title=\"id\" name=\"id\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" editor={TextInput} mdxType=\"TableColumn\" />\n    <TableColumn title=\"操作\" name=\"id\" render={(value, row, index, id, context) => <>\n        {context.editing ? <Button autoWidth onClick={() => handleSave(row, index, context)} mdxType=\"Button\">保存</Button> : <Button autoWidth onClick={() => handleEdit(index)} mdxType=\"Button\">编辑</Button>}\n        <Button autoWidth onClick={() => handleRemove(index)} mdxType=\"Button\">删除</Button>\n      </>} mdxType=\"TableColumn\" />\n  </EditableDataTable>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"使用-useeditinglist\"\n    }}>{`使用 useEditingList`}</h2>\n    <p>{`可以使用 useEditingList 简化增删改查场景的开发：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`内置`}<inlineCode parentName=\"li\">{`editingRows`}</inlineCode>{`和`}<inlineCode parentName=\"li\">{`items`}</inlineCode>{`两个状态和变更方法。`}</li>\n      <li parentName=\"ul\">{`集成了`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/sinoui/use-rest-list-api\"\n        }}>{`@sinoui/use-rest-list-api`}</a>{`，与后端 API 做增删改查交互。`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { useEiditingList } from '@sinouiincubator/editable-data-table';\n`}</code></pre>\n    <p>{`// TODO: 补充。`}</p>\n    <h2 {...{\n      \"id\": \"优化版本\"\n    }}>{`优化版本`}</h2>\n    <Playground __position={4} __code={'() => {\\n  const [data, setData] = useState([\\n    { id: \\'1\\', title: \\'123\\' },\\n    { id: \\'2\\', title: \\'1234\\' },\\n  ])\\n  const handleAdd = () => {\\n    setData([\\n      ...data,\\n      { id: data.length + 1, title: `标题${data.length + 1}` },\\n    ])\\n  }\\n  const handleRemove = useCallback(index => {\\n    setData(prev => prev.filter((_item, i) => i !== index))\\n  }, [])\\n\\n  const renderButtons = useCallback(\\n    (id, row, index) => (\\n      <Button onClick={() => handleRemove(index)}>删除</Button>\\n    ),\\n    [handleRemove],\\n  )\\n\\n  const columns = useMemo(\\n    () => (\\n      <>\\n        <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n        <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n        <TableColumn title=\\\"操作列\\\" name=\\\"id\\\" />\\n        <TableColumn title=\\\"操作\\\" name=\\\"id\\\" render={renderButtons} />\\n      </>\\n    ),\\n    [handleRemove],\\n  )\\n\\n  return (\\n    <div>\\n      <Button onClick={handleAdd}>添加</Button>\\n      <EditableDataTable data={data}>{columns}</EditableDataTable>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  {() => {\n        const [data, setData] = useState([{\n          id: '1',\n          title: '123'\n        }, {\n          id: '2',\n          title: '1234'\n        }]);\n\n        const handleAdd = () => {\n          setData([...data, {\n            id: data.length + 1,\n            title: `标题${data.length + 1}`\n          }]);\n        };\n\n        const handleRemove = useCallback(index => {\n          setData(prev => prev.filter((_item, i) => i !== index));\n        }, []);\n        const renderButtons = useCallback((id, row, index) => <Button onClick={() => handleRemove(index)} mdxType=\"Button\">删除</Button>, [handleRemove]);\n        const columns = useMemo(() => <>\n  <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n  <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n  <TableColumn title=\"操作列\" name=\"id\" mdxType=\"TableColumn\" />\n  <TableColumn title=\"操作\" name=\"id\" render={renderButtons} mdxType=\"TableColumn\" />\n        </>, [handleRemove]);\n        return <div>\n      <Button onClick={handleAdd} mdxType=\"Button\">添加</Button>\n      <EditableDataTable data={data} mdxType=\"EditableDataTable\">\n      {columns}\n      </EditableDataTable>\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"无数据\"\n    }}>{`无数据`}</h2>\n    <Playground __position={5} __code={'<EditableDataTable data={[]}>\\n  <TableColumn title=\\\"id\\\" name=\\\"id\\\" />\\n  <TableColumn title=\\\"标题\\\" name=\\\"title\\\" />\\n</EditableDataTable>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      useMemo,\n      Playground,\n      Props,\n      TableColumn,\n      EditableDataTable,\n      Button,\n      TextInput,\n      produce\n    }} mdxType=\"Playground\">\n  <EditableDataTable data={[]} mdxType=\"EditableDataTable\">\n    <TableColumn title=\"id\" name=\"id\" mdxType=\"TableColumn\" />\n    <TableColumn title=\"标题\" name=\"title\" mdxType=\"TableColumn\" />\n  </EditableDataTable>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import styled, { css } from 'sinoui-components/styles';\nimport Table from 'sinoui-components/Table';\n\nconst captionTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.fontWeightMedium};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst bodyTypeStyle = css`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.body1.fontWeight};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nconst dataTableCellStyle = css`\n  padding: 0;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-bottom: 1px solid\n    ${(props) =>\n      props.theme.palette.type === 'light'\n        ? 'rgba(224, 224, 224, 1)'\n        : 'rgba(80, 80, 80, 1)'};\n`;\n\nconst rowBgColor = {\n  light: {\n    tableRowSelected: 'rgba(0, 0, 0, 0.04)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(0, 0, 0, 0.07)', // 表格行hover时的背景色\n  },\n  dark: {\n    tableRowSelected: 'rgba(255, 255, 255, 0.08)', // 表格行选中时的背景色\n    tableRowHover: 'rgba(255, 255, 255, 0.14)', // 表格行hover时的背景色\n  },\n};\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n  border-top: 1px solid rgba(224, 224, 224, 1);\n  & .sinoui-data-table-head {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    background-color: ${(props) =>\n      props.theme.palette.type === 'light'\n        ? props.theme.palette.primary[50]\n        : props.theme.palette.primary[200]};\n    text-align: left;\n    vertical-align: middle;\n  }\n\n  .sinoui-checkbox-button {\n    margin: 14px;\n  }\n\n  & .sinoui-data-table-head.numeric,\n  .sinoui-data-table-body-td.numeric {\n    text-align: right;\n    flex-direction: row-reverse;\n  }\n\n  & .sinoui-data-table-head.align_center,\n  .sinoui-data-table-body-td.align_center {\n    text-align: center;\n  }\n\n  & .sinoui-data-table-head.checkbox,\n  .sinoui-data-table-body-td.checkbox {\n    padding: 0;\n    width: 48px;\n  }\n\n  & .sinoui-data-table-head.extraInfo,\n  .sinoui-data-table-body-td.extraInfo {\n    padding: 0;\n    width: 60px;\n  }\n\n  & .sinoui-data-table-head:last-child,\n  .sinoui-data-table-body-td:last-child {\n    padding-right: 24px;\n  }\n\n  & .sinoui-data-table-footer {\n    ${captionTypeStyle};\n    ${dataTableCellStyle};\n    padding-left: 24px;\n    padding-right: 12px;\n  }\n\n  & .sinoui-data-table-body-cell-no-data {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    padding: 64px;\n    text-align: center;\n    color: ${(props) => props.theme.typography.caption.color};\n  }\n\n  & .sinoui-data-table-body-td {\n    ${bodyTypeStyle};\n    ${dataTableCellStyle};\n    text-align: left;\n    vertical-align: middle;\n    word-wrap: break-word;\n    word-break: break-all;\n  }\n\n  & .sinoui-data-table-head-row {\n    height: 48px;\n  }\n\n  & .sinoui-data-table-footer-row,\n  .sinoui-data-table-body-row-no-data {\n    height: 56px;\n    background-color: transparent;\n  }\n\n  & .sinoui-data-table-body-row {\n    height: 48px;\n    background-color: transparent;\n\n    &:hover {\n      background-color: ${(props) =>\n        rowBgColor[props.theme.palette.type].tableRowHover};\n    }\n  }\n\n  & .sinoui-data-table-body-row.selected {\n    background-color: ${(props) =>\n      rowBgColor[props.theme.palette.type].tableRowSelected};\n  }\n`;\n\nexport default StyledTable;\n","import React from 'react';\nimport styled from 'sinoui-components/styles';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  padding: 32px 8px;\n`;\n\n/**\n * 表格空数据时显示的行\n */\nconst EmptyDataTableRow: React.SFC = (props) => {\n  const { children } = props;\n  return (\n    <Wrapper className=\"sinoui-data-table-info\" data-testid=\"emptyInfo\">\n      {children}\n    </Wrapper>\n  );\n};\n\nexport default EmptyDataTableRow;\n","import React from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext from './shared/DataTableRowContext';\n\nconst context: { type: RowType.ColGroup } = {\n  type: RowType.ColGroup,\n};\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nfunction DataTableColGroup(props: Props) {\n  const { children } = props;\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <colgroup data-testid=\"colgroup\">{children}</colgroup>\n    </DataTableRowContext.Provider>\n  );\n}\n\nexport default DataTableColGroup;\n","import React from 'react';\n\n/**\n * 数据表头\n */\nconst DataTableHead: React.SFC = function TableHead({ children }) {\n  return (\n    <thead>\n      <tr className=\"sinoui-data-table-head-row\" data-testid=\"tableHead\">\n        {children}\n      </tr>\n    </thead>\n  );\n};\n\nexport default DataTableHead;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from 'react';\nimport { RowType } from './shared/constants';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props<T> {\n  /**\n   * 此行数据\n   */\n  data: T;\n  /**\n   * 数据序号\n   */\n  index: number;\n  /**\n   * 单元格子组件\n   */\n  children: React.ReactNode;\n\n  /**\n   * 是否处于编辑状态\n   */\n  editing?: boolean;\n}\n\ntype CompType<T = any> = React.SFC<Props<T>>;\n\n/**\n * 内容行\n */\nconst DataTableBodyRow: CompType = (props) => {\n  const { data, index, children, editing } = props;\n  const context: BodyRowContextType<any> = useMemo(\n    () => ({ type: RowType.Body, data, index, editing: !!editing }),\n    [data, index, editing],\n  );\n\n  return (\n    <DataTableRowContext.Provider value={context}>\n      <EditingBodyRowContainer.Provider>\n        <tr className=\"sinoui-data-table-body-row\" data-testid=\"bodyRow\">\n          {children}\n        </tr>\n      </EditingBodyRowContainer.Provider>\n    </DataTableRowContext.Provider>\n  );\n};\n\nexport default React.memo(DataTableBodyRow);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport DataTableBodyRow from './DataTableBodyRow';\n\n/**\n * 数据表格内容组件\n */\nconst DataTableBody: React.SFC<{\n  data?: any[];\n  idPropertyName: string;\n  editingRows?: boolean[];\n}> = function DataTableBody({\n  idPropertyName,\n  data,\n  children,\n  editingRows = [],\n}) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n  return (\n    <tbody>\n      {data.map((item, index) => (\n        <DataTableBodyRow\n          key={item[idPropertyName] || `index_${index}`}\n          data={item}\n          index={index}\n          data-testid=\"tableBody\"\n          editing={editingRows[index]}\n        >\n          {children}\n        </DataTableBodyRow>\n      ))}\n    </tbody>\n  );\n};\n\nexport default DataTableBody;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo, useRef, useEffect } from 'react';\nimport Table from './Table';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EmptyDataTableRow from './EmptyDataTableRow';\nimport DataTableColGroup from './DataTableColGroup';\nimport DataTableHead from './DataTableHead';\nimport DataTableBody from './DataTableBody';\n\nexport interface Props<T> {\n  /**\n   * 列表数据\n   */\n  data?: T[];\n  /**\n   * 处于编辑状态的行。`editingRows`数组需要与`data`数组保持一一对应的关系，`editingRows`数组中每一个数据项代表的是`data`数组中对应数据项的编辑状态，`true`表示编辑状态，`false`表示非编辑状态。\n   */\n  editingRows?: boolean[];\n\n  /**\n   * 子节点，一组TableColumn。使用TableColumn指表格列信息。\n   */\n  children: React.ReactNode;\n  /**\n   * 数据的id属性名。默认为'id'。\n   */\n  idPropertyName?: string;\n  /**\n   * 无数据时的提示信息。默认为“暂无数据”。\n   */\n  emptyTitle?: React.ReactNode;\n\n  /**\n   * 监听行数据发生变化的事件。回调函数的`rowData`参数代表的是变更后的行数据对象。\n   */\n  onRowChange?: (index: number, rowData: T) => void;\n\n  /**\n   * 给正在编辑的行添加校验规则。\n   * \n   * 返回错误提示：\n   * \n   * ```js\n     {\n       'title': '不能为空',\n       'name': '不能少于三个字'\n     }\n   * ```\n   *\n   * 上面的错误信息表示字段`title`和`name`校验失败。\n   * \n   * 如果数据行没有错误，则返回`{}`或者`undefined`。\n   */\n  validate?: (rowData: T) => { [x: string]: string } | undefined;\n}\n\nfunction useEditableDataTable<T>({\n  idPropertyName = 'id',\n  onRowChange,\n  validate,\n}: Props<T>) {\n  const options = useRef({\n    onRowChange,\n    validate,\n  });\n\n  useEffect(() => {\n    options.current.onRowChange = onRowChange;\n    options.current.validate = validate;\n  }, [onRowChange, validate]);\n\n  const context = useMemo(\n    () => ({ idPropertyName, options: options.current }),\n    [idPropertyName],\n  );\n\n  return context;\n}\n\n/**\n * 可编辑表格\n */\nfunction EditableDataTable<T>(props: Props<T>) {\n  const {\n    data = [],\n    idPropertyName = 'id',\n    children,\n    emptyTitle = '暂无数据',\n    editingRows,\n  } = props;\n  const context = useEditableDataTable(props);\n  return (\n    <>\n      <Table>\n        <EditableDataTableContext.Provider value={context}>\n          <DataTableColGroup>{children}</DataTableColGroup>\n          <DataTableHead>{children}</DataTableHead>\n          <DataTableBody\n            data={data}\n            idPropertyName={idPropertyName}\n            editingRows={editingRows}\n          >\n            {children}\n          </DataTableBody>\n        </EditableDataTableContext.Provider>\n      </Table>\n      {(!data || data.length === 0) && (\n        <EmptyDataTableRow>{emptyTitle}</EmptyDataTableRow>\n      )}\n    </>\n  );\n}\n\nexport default EditableDataTable;\n","import React, { useState, useContext, useCallback, useMemo } from 'react';\nimport FormHelpText from 'sinoui-components/Form/FormHelpText';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface Props {\n  editor: React.ReactType;\n  name: string;\n}\n\nfunction isChangeEvent(\n  event?: React.ChangeEvent<HTMLInputElement> | string,\n): event is React.ChangeEvent<HTMLInputElement> {\n  return !!(event && (event as React.ChangeEvent<HTMLInputElement>).target);\n}\n\n/**\n * 单元格编辑器\n */\nfunction DataTableCellEditor(props: Props) {\n  const { name, editor: Editor } = props;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { data, index } = useContext(DataTableRowContext) as BodyRowContextType<\n    any\n  >;\n  const valueFromContext = data[name];\n  const [, setValue] = useState(valueFromContext);\n  const { options } = useContext(EditableDataTableContext);\n  const {\n    touched,\n    errors,\n    validateField,\n  } = EditingBodyRowContainer.useContainer();\n\n  const handleChange = useCallback(\n    (event?: React.ChangeEvent<HTMLInputElement> | string) => {\n      const newValue = isChangeEvent(event) ? event.target.value : event;\n      setValue(newValue);\n\n      data[name] = newValue;\n\n      if (options.onRowChange) {\n        options.onRowChange(index, data);\n      }\n      validateField(name, data);\n    },\n    [data, name, options, index, validateField],\n  );\n\n  const isTouched = touched[name];\n  const error = isTouched ? errors[name] : undefined;\n\n  const element = useMemo(\n    () => (\n      <>\n        <Editor\n          name={name}\n          value={valueFromContext}\n          item={data}\n          onChange={handleChange}\n          error={!!error}\n        />\n        {error && <FormHelpText error>{error}</FormHelpText>}\n      </>\n    ),\n    [data, error, handleChange, name, valueFromContext],\n  );\n\n  return element;\n}\n\nexport default React.memo(DataTableCellEditor);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport EditableDataTableContext from './shared/EditableDataTableContext';\nimport DataTableRowContext, {\n  BodyRowContextType,\n} from './shared/DataTableRowContext';\nimport DataTableCellEditor from './DataTableCellEditor';\nimport EditingBodyRowContainer from './shared/EditingBodyRowContainer';\n\ninterface CellState<T> {\n  data: T;\n  index: number;\n  editing: boolean;\n  errors?: { [x: string]: any };\n  validate: (rowData?: T) => boolean;\n  idPropertyName: string;\n}\n\ninterface DataCellProps<T, CellDataType> {\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n  /**\n   * 数据列名称\n   */\n  name?: string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\nfunction useCellState<T>(): CellState<T> {\n  const { data, index, editing } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<any>;\n  const { validate } = EditingBodyRowContainer.useContainer();\n  const { idPropertyName } = useContext(EditableDataTableContext);\n\n  return {\n    data,\n    index,\n    editing,\n    idPropertyName,\n    validate,\n  };\n}\n\n/**\n * 数据单元格\n */\nfunction DataTableBodyCellInner(\n  props: DataCellProps<any, any> & CellState<any>,\n) {\n  const {\n    order,\n    render,\n    name,\n    editor,\n    index,\n    editing,\n    data,\n    idPropertyName,\n    validate,\n  } = props;\n\n  if (order) {\n    return (\n      <td className=\"sinoui-data-table-body-td align_center\">{index + 1}</td>\n    );\n  }\n\n  if (editing && editor) {\n    if (!name) {\n      throw new Error(`没有给TableColumn指定name属性`);\n    }\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        <DataTableCellEditor name={name} editor={editor} />\n      </td>\n    );\n  }\n\n  if (render) {\n    return (\n      <td className=\"sinoui-data-table-body-td\">\n        {render(\n          name ? data[name] : undefined,\n          data,\n          index,\n          data[idPropertyName],\n          {\n            editing,\n            validate,\n          },\n        )}\n      </td>\n    );\n  }\n\n  return name ? (\n    <td className=\"sinoui-data-table-body-td\">{data[name]}</td>\n  ) : null;\n}\n\nconst MemoDataTableBodyCellInner = React.memo(DataTableBodyCellInner);\n\nfunction DataTableBodyCell<T = any, CellDataType = string>(\n  props: DataCellProps<T, CellDataType>,\n) {\n  const state = useCellState<any>();\n\n  return <MemoDataTableBodyCellInner {...props} {...state} />;\n}\n\nexport default DataTableBodyCell;\n","import React from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  order?: boolean;\n  title?: React.ReactNode;\n}\n\n/**\n * 表格头单元格\n */\nfunction DataTableHeadCell(props: Props) {\n  const { order, title } = props;\n  return (\n    <th\n      className={classNames('sinoui-data-table-head', {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        align_center: order,\n      })}\n    >\n      {title}\n    </th>\n  );\n}\n\nexport default DataTableHeadCell;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useContext } from 'react';\nimport DataTableRowContext from './shared/DataTableRowContext';\nimport DataTableBodyCell from './DataTableBodyCell';\nimport DataTableHeadCell from './DataTableHeadCell';\nimport { RowType } from './shared/constants';\n\nexport interface Props<T, CellDataType> {\n  /**\n   * 数据列名称\n   */\n  name?: string;\n  /**\n   * 标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 是否显示序号\n   */\n  order?: boolean;\n\n  /**\n   * 渲染单元格\n   */\n  render?: (\n    value: CellDataType,\n    row: T,\n    index: number,\n    id: string,\n    context: {\n      editing: boolean;\n      validate: (rowData?: any) => boolean;\n    },\n  ) => React.ReactNode;\n\n  /**\n   * 列宽度\n   */\n  width?: number | string;\n\n  /**\n   * 编辑器\n   */\n  editor?: React.ReactType;\n}\n\n/**\n * 表格列\n */\nconst TableColumn: React.SFC<Props<any, any>> = React.memo(function TableColumn<\n  T,\n  CellDataType\n>(props: Props<T, CellDataType>) {\n  const { title, order, width } = props;\n  const { type } = useContext(DataTableRowContext);\n\n  switch (type) {\n    case RowType.Head:\n      return <DataTableHeadCell title={title} order={order} />;\n    case RowType.ColGroup:\n      return <col width={order ? 50 : width} />;\n    default:\n      return <DataTableBodyCell {...props} />;\n  }\n});\n\nexport default TableColumn;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport { RowType } from './constants';\n\nexport interface BodyRowContextType<T> {\n  type: RowType.Body;\n  data: T;\n  index: number;\n  /**\n   * 是否处于编辑状态\n   */\n  editing: boolean;\n}\n\nexport interface HeadRowContextType {\n  type: RowType.Head;\n}\n\nexport interface ColGroupContextType {\n  type: RowType.ColGroup;\n}\n\nexport type RowContextType<T = any> =\n  | BodyRowContextType<T>\n  | HeadRowContextType\n  | ColGroupContextType;\n\nconst DataTableRowContext = React.createContext<RowContextType>({\n  type: RowType.Head,\n});\n\nexport default DataTableRowContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\n\ninterface ContextType {\n  idPropertyName: string;\n  options: {\n    onRowChange?: (index: number, rowData: any) => void;\n    validate?: (rowData: any) => { [x: string]: string } | undefined;\n  };\n}\n\nconst EditableDataTableContext = React.createContext<ContextType>({\n  idPropertyName: 'id',\n  options: {},\n});\n\nexport default EditableDataTableContext;\n","import { useState, useCallback, useRef, useEffect, useContext } from 'react';\nimport { createContainer } from 'unstated-next';\nimport EditableDataTableContext from './EditableDataTableContext';\nimport DataTableRowContext, { BodyRowContextType } from './DataTableRowContext';\n\ninterface ContextType<T> {\n  /**\n   * 校验错误信息\n   */\n  errors: {\n    [x: string]: string;\n  };\n\n  /**\n   * 点击状态\n   */\n  touched: {\n    [x: string]: boolean;\n  };\n\n  /**\n   * 校验数据行\n   *\n   * 如果通过校验，则返回`true`，否则返回`false`。\n   */\n  validate: (newItem?: T) => boolean;\n\n  /**\n   * 校验表单域\n   */\n  validateField: (fieldName: string, newRowData: T) => void;\n}\n\n/**\n * 用于正在编辑的行数据的状态管理hook\n *\n * 主要维护的状态：\n *\n * * 表单校验\n * * 是否点击过的状态\n *\n */\nfunction useEditingBodyRow<T>(): ContextType<T> {\n  const { data: rowData } = useContext(\n    DataTableRowContext,\n  ) as BodyRowContextType<T>;\n  const [touched, setTouched] = useState<{ [x: string]: boolean }>({});\n  const [errors, setErrors] = useState({});\n  const rowDataRef = useRef(rowData);\n  const { options } = useContext(EditableDataTableContext);\n\n  useEffect(() => {\n    rowDataRef.current = rowData;\n  }, [rowData]);\n\n  const validate = useCallback(\n    (newRowData: T = rowDataRef.current, updateTouched: boolean = true) => {\n      if (options.validate) {\n        const result = options.validate(newRowData);\n        if (result) {\n          if (updateTouched) {\n            const newTouched: { [x: string]: boolean } = {};\n            Object.keys(result).forEach((key) => {\n              newTouched[key] = true;\n            });\n\n            setTouched(newTouched);\n          }\n\n          setErrors(result || {});\n\n          return (\n            Object.keys(result).filter((key) => !!result[key]).length === 0\n          );\n        }\n      }\n\n      return true;\n    },\n    [options],\n  );\n\n  const validateField = useCallback(\n    (fieldName: string, newRowData: T) => {\n      setTouched((prev) => {\n        if (!prev[fieldName]) {\n          return { ...prev, [fieldName]: true };\n        }\n        return prev;\n      });\n      validate(newRowData, false);\n    },\n    [validate],\n  );\n\n  return {\n    errors,\n    touched,\n    validate,\n    validateField,\n  };\n}\n\nconst EditingBodyRowContainer = createContainer(useEditingBodyRow);\n\nexport default EditingBodyRowContainer;\n","export enum RowType {\n  Body,\n  Head,\n  ColGroup,\n}\n\nexport const EMPTY_ROW_INFO = '暂无数据';\n"],"sourceRoot":""}
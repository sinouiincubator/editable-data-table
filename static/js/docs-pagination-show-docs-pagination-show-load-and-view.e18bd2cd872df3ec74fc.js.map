{"version":3,"sources":["D:/workspaces/editable-data-table/docs/pagination-show-docs/pagination-show-load-and-view.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"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","file":"static/js/docs-pagination-show-docs-pagination-show-load-and-view.20e6b4d7.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"加载并展示数据\"\n    }}>{`加载并展示数据`}</h1>\n    <h2 {...{\n      \"id\": \"加载并展现列表数据\"\n    }}>{`加载并展现列表数据`}</h2>\n    <p>{`本例需要一次性加载全部的列表数据，而不是`}<a parentName=\"p\" {...{\n        \"href\": \"/pagination-editable-table\"\n      }}>{`分页加载数据`}</a>{`。使用`}<inlineCode parentName=\"p\">{`useEditingList`}</inlineCode>{`来加载列表数据。代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n\n  return (\n    <EditableDataTable\n      data={editingList.items}\n      idPropertyName={editingList.idPropertyName}\n    >\n      <TableColumn title=\"id\" name=\"id\" />\n      <TableColumn title=\"标题\" name=\"title\" />\n    </EditableDataTable>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"分页展现数据\"\n    }}>{`分页展现数据`}</h2>\n    <p>{`可以使用`}<inlineCode parentName=\"p\">{`sinoui-components/Pagination`}</inlineCode>{`组件作为分页器，展现页码信息和切换页码的操作按钮。`}<inlineCode parentName=\"p\">{`Pagination`}</inlineCode>{`组件需要以下几个关键属性：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`total`}</inlineCode>{` - 列表数据总数目。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`currentPage`}</inlineCode>{` - 当前页码。从`}<inlineCode parentName=\"li\">{`1`}</inlineCode>{`开始。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pageSize`}</inlineCode>{` - 页大小。一页能够呈现数据的数目。`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` - 指定当前页码、页大小发生变化的回调函数。`}</li>\n    </ul>\n    <p>{`上面三个属性，`}<inlineCode parentName=\"p\">{`total`}</inlineCode>{`等于`}<inlineCode parentName=\"p\">{`editingList.items.length`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`currentPage`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`pageSize`}</inlineCode>{`是变化的数据，所以需要定义两个状态来维护，如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n  const [currentPage, setCurrentPage] = useState(0); // 当前页码，习惯从0开始。注意与Pagination.currentPage的区别。\n  const [pageSize, setPageSize] = useState(10);\n\n  const handlePaginationChange = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return (\n    <div>\n      <!--此处省略EditableDataTable-->\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={handlePaginationChange}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`上面的代码只是展现出了分页器，接下来我们来解决分页展现列表数据（注意哟，这个时候列表还是展现所有的数据）。`}</p>\n    <p><inlineCode parentName=\"p\">{`EditableDataTable`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`属性是用来接收需要展现的一组数据的属性。`}<inlineCode parentName=\"p\">{`data={editingList.items}`}</inlineCode>{`会将所有的数据给了可编辑表格呈现出来。现在想要只呈现当前页的数据，那就计算出当前页的数据数组指定给`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`即可，代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useMemo } from 'react';\n// ... 省略一部分import代码\n\nfunction Demo() {\n  // ...省略一部分代码\n  const data = useMemo(() =>\n    editingList.items.slice(\n      currentPage * pageSize,\n      (currentPage + 1) * pageSize,\n    ),\n    [editingList.items, currentPage, pageSize],\n  );\n\n  return (\n    <div>\n      <EditableDataTable data={data}>\n        <!--此处省略TableColumn-->\n      </EditableDataTable>\n      <!--此处省略Pagination-->\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`这里使用`}<a parentName=\"p\" {...{\n        \"href\": \"https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo\"\n      }}>{`React useMemo`}</a>{`缓存了分页数据的计算。`}</p>\n    <p>{`完整代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n\n  const [currentPage, setCurrentPage] = useState(0); // 当前页码，习惯从0开始。注意与Pagination.currentPage的区别。\n  const [pageSize, setPageSize] = useState(10);\n\n  const handlePaginationChange = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  const data = useMemo(\n    () =>\n      editingList.items.slice(\n        currentPage * pageSize,\n        (currentPage + 1) * pageSize,\n      ),\n    [editingList.items, currentPage, pageSize],\n  );\n\n  return (\n    <div>\n      <EditableDataTable\n        data={data}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn title=\"id\" name=\"id\" />\n        <TableColumn title=\"标题\" name=\"title\" />\n      </EditableDataTable>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={handlePaginationChange}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"提炼状态管理\"\n    }}>{`提炼状态管理`}</h2>\n    <p>{`Demo 组件目前已经比较复杂了，需要管理很多状态，我们可以使用`}<a parentName=\"p\" {...{\n        \"href\": \"https://zh-hans.reactjs.org/docs/hooks-custom.html\"\n      }}>{`自定义 hook`}</a>{`将状态管理提炼到更小的函数中进行维护。现在我们来提炼两个自定义 hook，分别是`}<inlineCode parentName=\"p\">{`usePagination`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`usePaginationList`}</inlineCode>{`。`}</p>\n    <p>{`我们可以将分页器状态和更新方法迁移到一个自定义 hook 中，我们取名为`}<inlineCode parentName=\"p\">{`usePagination`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n`}</code></pre>\n    <p>{`这样 Demo 组件中的分页代码可以简化一下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  const [currentPage, pageSize, update] = usePagination();\n\n  return (\n    <div>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={(pageNo, newPageSize) => update(pageNo - 1, newPageSize)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`可以将获取分页的列表数据也提炼到自动以 hook 中，我们取名为`}<inlineCode parentName=\"p\">{`usePaginationList`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n`}</code></pre>\n    <p>{`Demo 组件可以简化`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`的计算：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Demo() {\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n\n  return (\n    <div>\n      <EditableDataTable data={data} />\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`完整的代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo } from 'react';\nimport EditableDataTable, {\n  TableColumn,\n  useEditingList,\n} from '@sinouiincubator/editable-data-table';\nimport Pagination from 'sinoui-components/Pagination';\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\nfunction Demo() {\n  const editingList = useEditingList('/api/pagination-show-demo');\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n\n  return (\n    <div>\n      <EditableDataTable\n        data={data}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn title=\"id\" name=\"id\" />\n        <TableColumn title=\"标题\" name=\"title\" />\n      </EditableDataTable>\n      <Pagination\n        total={editingList.items.length}\n        currentPage={currentPage}\n        pageSize={pageSize}\n        onChange={(pageNo, newPageSize) => update(pageNo - 1, newPageSize)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}
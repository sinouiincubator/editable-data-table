{"version":3,"sources":["D:/workspaces/editable-data-table/docs/pagination-show-docs/pagination-show-crud.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","D_workspaces_editable_data_table_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"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","file":"static/js/docs-pagination-show-docs-pagination-show-crud.2b23857c.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"新增、编辑与删除\"\n    }}>{`新增、编辑与删除`}</h1>\n    <h2 {...{\n      \"id\": \"新增数据\"\n    }}>{`新增数据`}</h2>\n    <p>{`点击新增按钮时，在当前页新增一条数据。这个要求需要注意的是`}<strong parentName=\"p\">{`在当前页`}</strong>{`新增一条数据。所以我们应该按照下面的方式新增数据：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`editingList.add({}, currentPage * pageSize);\n`}</code></pre>\n    <p>{`示例代码：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import Button from 'sinoui-components/Button';\n\nfunction Demo() {\n  const handleAdd = () => {\n    editingList.add({}, currentPage * pageSize);\n  };\n\n  return (\n    <div>\n      <Button raised onClick={handleAdd}>\n        新增\n      </Button>\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"编辑与删除数据\"\n    }}>{`编辑与删除数据`}</h2>\n    <p><inlineCode parentName=\"p\">{`editingList`}</inlineCode>{`提供的`}<inlineCode parentName=\"p\">{`edit`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`save`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`remove`}</inlineCode>{`方法都是根据数据在整个列表的索引位置进行操作的。所以我们在使用这些方法时，需要与分页状态相结合。`}</p>\n    <p>{`首先我们通过`}<inlineCode parentName=\"p\">{`TableColumn`}</inlineCode>{`添加一个操作列：在编辑状态时，有保存和删除按钮；在非编辑状态时，有编辑和删除按钮。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<EditableDataTable>\n  <TableColumn\n    title=\"操作\"\n    render={(value, rowData, index, id, context) => (\n      <>\n        {context.editing ? <Button>保存</Button> : <Button>编辑</Button>}\n        <Button color=\"danger\">删除</Button>\n      </>\n    )}\n  />\n</EditableDataTable>\n`}</code></pre>\n    <p>{`保存按钮的点击事件回调函数：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button\n  onClick={() => editingList.save(rowData, currentPage * pageSize + index)}\n>\n  保存\n</Button>\n`}</code></pre>\n    <p>{`重点是`}<inlineCode parentName=\"p\">{`currentPage * pageSize + index`}</inlineCode>{`。`}</p>\n    <p>{`编辑按钮：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button onClick={() => editingList.edit(currentPage * pageSize + index)}>\n  编辑\n</Button>\n`}</code></pre>\n    <p>{`删除按钮：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Button\n  onClick={() => editingList.remove(rowData, currentPage * pageSize + index)}\n>\n  删除\n</Button>\n`}</code></pre>\n    <p>{`当然，别忘了将`}<inlineCode parentName=\"p\">{`editingList.editingRows`}</inlineCode>{`传给`}<inlineCode parentName=\"p\">{`EditableDataTable.editingRows`}</inlineCode>{`，并且定义单元格编辑器：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<EditableDataTable editingRows={editingList.editingRows}>\n  <TableColumn title=\"标题\" name=\"title\" editor=\"input\" />\n</EditableDataTable>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"提炼状态管理\"\n    }}>{`提炼状态管理`}</h2>\n    <p>{`增加、删除、修改、编辑四个动作都与翻页有关系，我们可以将这四个方法提炼到一个自定义 hook：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n`}</code></pre>\n    <p>{`之后我们的代码就是这样子的：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, { useEditingList, TableColumn } from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  return (\n    <div>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}
{"version":3,"sources":["D:/workspaces/editable-data-table/docs/Demo.tsx","D:/workspaces/editable-data-table/docs/pagination-show-editable-data-table.mdx","D:/workspaces/editable-data-table/src/index.ts"],"names":["usePaginationList","items","currentPage","pageSize","useMemo","slice","Demo","editingList","useEditingList","_usePagination","defaultCurrentPage","arguments","length","undefined","defaultPageSize","_useState","useState","_useState2","Object","slicedToArray","setCurrentPage","_useState3","_useState4","setPageSize","pageNo","newPageSize","usePagination","_usePagination2","update","data","editingRows","_usePaginationEditing","add","useCallback","save","item","index","edit","remove","usePaginationEditingListActions","_useState5","_useState6","searchText","setSearchText","react_default","a","createElement","TextInput","value","onChange","event","target","Button","raised","onClick","query","title","src","idPropertyName","name","editor","render","_value","_id","context","Fragment","editing","autoWidth","color","Pagination","total","size","layoutProps","MDXLayout","MDXContent","_ref","components","props","objectWithoutProperties","index_es","assign","mdxType","id","parentName","className","index_esm","__position","__code","__scope","this","Playground","docs_Demo","isMDXComponent","_EditableDataTable__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_TableColumn__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2__","_shared_EditorProps__WEBPACK_IMPORTED_MODULE_2___default","n","_useEditingList__WEBPACK_IMPORTED_MODULE_3__","_useSimpleEditingList__WEBPACK_IMPORTED_MODULE_4__","EditableDataTable"],"mappings":"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","file":"static/js/docs-pagination-show-editable-data-table.085d35d4.js","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, { useEditingList, TableColumn } from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  const [searchText, setSearchText] = useState('');\n  const handleQuery = () => {\n    editingList.query({ title: searchText });\n  };\n\n  return (\n    <div>\n      <TextInput\n        value={searchText}\n        onChange={(event) => setSearchText(event.target.value)}\n      />\n      <Button raised onClick={handleQuery}>\n        查询\n      </Button>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n\nexport default Demo;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport Demo from './Demo';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"分页展示数据的可编辑数据表格\"\n    }}>{`分页展示数据的可编辑数据表格`}</h1>\n    <p>{`本章节介绍一个场景：一次性加载列表数据，但是在前端分页显示的可编辑数据表格。`}</p>\n    <p>{`包含的功能：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`分页展示列表`}</li>\n      <li parentName=\"ul\">{`加载数据`}</li>\n      <li parentName=\"ul\">{`查询`}</li>\n      <li parentName=\"ul\">{`新增`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useMemo, useCallback } from 'react';\nimport Pagination from 'sinoui-components/Pagination';\nimport Button from 'sinoui-components/Button';\nimport TextInput from 'sinoui-components/TextInput';\nimport EditableDataTable, { useEditingList, TableColumn } from '../src';\n\ninterface Article {\n  id: string;\n  title: string;\n}\n\n/**\n * 分页状态hook\n */\nfunction usePagination(\n  defaultCurrentPage: number = 0,\n  defaultPageSize: number = 10,\n): [number, number, (pageNo: number, pageSize: number) => void] {\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n\n  const update = (pageNo: number, newPageSize: number) => {\n    setCurrentPage(pageNo);\n    setPageSize(newPageSize);\n  };\n\n  return [currentPage, pageSize, update];\n}\n\n/**\n * 获取分页列表\n *\n * @param items 列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationList<T>(\n  items: T[],\n  currentPage: number,\n  pageSize: number,\n) {\n  const data = useMemo(\n    () => items.slice(currentPage * pageSize, (currentPage + 1) * pageSize),\n    [items, pageSize, currentPage],\n  );\n\n  return data;\n}\n\n/**\n * 获取分页编辑列表的动作\n *\n * @param editingList 编辑列表\n * @param currentPage 当前页\n * @param pageSize 页大小\n */\nfunction usePaginationEditingListActions<T>(\n  editingList: any,\n  currentPage: number,\n  pageSize: number,\n) {\n  const add = useCallback(() => {\n    editingList.add({}, currentPage * pageSize);\n  }, [currentPage, editingList, pageSize]);\n\n  const save = useCallback(\n    (item: T, index: number) => {\n      return editingList.save(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const edit = useCallback(\n    (index: number) => {\n      editingList.edit(currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  const remove = useCallback(\n    (item: T, index: number) => {\n      return editingList.remove(item, currentPage * pageSize + index);\n    },\n    [currentPage, editingList, pageSize],\n  );\n\n  return { add, save, edit, remove };\n}\n\nfunction Demo() {\n  const editingList = useEditingList<Partial<Article>>(\n    '/api/pagination-show-demo',\n    [],\n  );\n  const [currentPage, pageSize, update] = usePagination();\n  const data = usePaginationList(editingList.items, currentPage, pageSize);\n  const editingRows = usePaginationList(\n    editingList.editingRows,\n    currentPage,\n    pageSize,\n  );\n\n  const { add, save, edit, remove } = usePaginationEditingListActions(\n    editingList,\n    currentPage,\n    pageSize,\n  );\n\n  const [searchText, setSearchText] = useState('');\n  const handleQuery = () => {\n    editingList.query({ title: searchText });\n  };\n\n  return (\n    <div>\n      <TextInput\n        value={searchText}\n        onChange={(event) => setSearchText(event.target.value)}\n      />\n      <Button raised onClick={handleQuery}>\n        查询\n      </Button>\n      <Button raised onClick={add}>\n        新增\n      </Button>\n      <EditableDataTable\n        data={data}\n        editingRows={editingRows}\n        idPropertyName={editingList.idPropertyName}\n      >\n        <TableColumn name=\"id\" title=\"id\" />\n        <TableColumn name=\"title\" title=\"标题\" editor=\"input\" />\n        <TableColumn\n          title=\"操作\"\n          name=\"id\"\n          render={(_value, item, index, _id, context) => (\n            <>\n              {context.editing ? (\n                <Button autoWidth onClick={() => save(item, index)}>\n                  保存\n                </Button>\n              ) : (\n                <Button autoWidth onClick={() => edit(index)}>\n                  编辑\n                </Button>\n              )}\n              <Button\n                autoWidth\n                color=\"danger\"\n                onClick={() => remove(item, index)}\n              >\n                删除\n              </Button>\n            </>\n          )}\n        />\n      </EditableDataTable>\n      <Pagination\n        pageSize={pageSize}\n        total={editingList.items.length}\n        currentPage={currentPage + 1}\n        onChange={(pageNo, size) => update(pageNo - 1, size)}\n      />\n    </div>\n  );\n}\n\nexport default Demo;\n`}</code></pre>\n    <p>{`效果：`}</p>\n    <Playground __position={0} __code={'<Demo />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Demo\n    }} mdxType=\"Playground\">\n  <Demo mdxType=\"Demo\" />\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import EditableDataTable, {\n  Props as EditableDataTableProps,\n} from './EditableDataTable';\nimport TableColumn, { Props as TableColumnProps } from './TableColumn';\nimport EditorProps from './shared/EditorProps';\nimport useEditingList from './useEditingList';\nimport useSimpleEditingList from './useSimpleEditingList';\n\nexport default EditableDataTable;\n\nexport {\n  EditableDataTableProps,\n  TableColumn,\n  TableColumnProps,\n  EditorProps,\n  useEditingList,\n  useSimpleEditingList,\n};\n"],"sourceRoot":""}